Script started on 2019-11-17 21:17:03-05:00 [TERM="linux" TTY="/dev/pts/21" COLUMNS="225" LINES="55"]
[01;31m  __   __                  _   _   // ____ 
[01;31m |  | |  |                | | | | // / ___|
[01;31m |  |_|  | ___ _ ___  ____| |_| |   | |___ 
[01;31m |   _   |/ _ \| '_ \/ /\_\__,  |    \___ \
[01;31m |  | |  |  __/| | | | |   __/  |     ___| |
[01;31m |__| |__|\___||_| |_| |   \___/     |____/

[01;31m  ______    _ [34m        user: hsloan1
[01;31m |___  /   | | [34m             @remote04
[01;31m    / / ___| |__
[01;31m   / / / __| '_ \ [34m    time:  9:17
[01;31m  / /__\__ \ | | |
[01;31m /_____|___/_| |_|
[1m[7m%[27m[1m[m                                                                                                                                                                                                                                 [m[27m[24m[J[39m[m[49m[40m[39m hsloan1@remote04 [44m[30mÓÇ∞[30m ~/i220a/work/lab13/files [43m[34mÓÇ∞[30m ÓÇ† master ‚óè [49m[33mÓÇ∞[39m [K[?2004hbbash[?2004l
hsloan1@remote04:~/i220a/work/lab13/files$ cd stdin-char-count/
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ make
gcc -g -Wall -std=c11 -funsigned-char    stdin-char-count.c   -o stdin-char-count
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
^C
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ vim 
.gitignore          Makefile            stdin-char-count    stdin-char-count.c  
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ vim stdin-char-count.c [1P[1P[1P[1@n[1@a[1@n[1@o
)0[1;55r[m[4l[?7h[39;49m[?25l[?1c[39;49m[m[H[J[53;105H[0;10;7m[ Reading File ][m[53;111H[0;10;7m 12 lines ][m[H[0;10;7m  GNU nano 3.2                                                                                           stdin-char-count.c                                                                                                      [1;224H[m[54d[0;10;7m^G[m Get Help[18G[0;10;7m^O[m Write Out     [0;10;7m^W[m Where Is[52G[0;10;7m^K[m Cut Text[69G[0;10;7m^J[m Justify[86G[0;10;7m^C[m Cur Pos[103G[0;10;7mM-U[m Undo[54;120H[0;10;7mM-A[m Mark Text    [0;10;7mM-][m To Bracket   [0;10;7mM-Q[m Previous     [0;10;7m^B[m Back[54;188H[0;10;7m^‚óÄ[m Prev Word     [0;10;7m^A[m Home[55d[0;10;7m^X[m Exit[55;18H[0;10;7m^R[m Read File     [0;10;7m^\[m Replace[52G[0;10;7m^U[m Uncut Text    [0;10;7m^T[m To Spell[86G[0;10;7m^_[m Go To Line    [0;10;7mM-E[m Redo[55;120H[0;10;7mM-6[m Copy Text    [0;10;7m^Q[m Where Was     [0;10;7mM-W[m Next[55;171H[0;10;7m^F[m Forward[188G[0;10;7m^‚ñ∂[m Next Word     [0;10;7m^E[m End[53d[3d[0;10;1m[36m#include[39m[m [0;10;1m[33m<stdio.h>[5d[0;10m[32mint[6d[39m[mmain([32mint[39m[m argc, [32mconst[39m[m [32mchar[39m[m *argv[])[7d{[8d printf([0;10;1m[33m"EOF = %d\n"[39m[m, [0;10;1m[31mEOF[39m[m);[9;3H[32mchar[39m[m c;[10;3H[32mint[39m[m count = 0;[11;3H[0;10;1m[33mwhile[39m[m ((c = getchar()) != [0;10;1m[31mEOF[39m[m) count++;[12;3Hprintf([0;10;1m[33m"%d\n"[39m[m, count);[13;3H[35mreturn[39m[m 0;[14d}[3d[?25h[?0c[?25l[?1c[4d[?25h[?0c[?25l[?1c[5d[?25h[?0c[?25l[?1c[6d[?25h[?0c[?25l[?1c[7d[?25h[?0c[?25l[?1c[8d[?25h[?0c[?25l[?1c[9d[?25h[?0c[?25l[?1c[10d[?25h[?0c[?25l[?1c[11d[?25h[?0c[?25l[?1c[12d[?25h[?0c[?25l[?1c[A[?25h[?0c[?25l[?1c[A[?25h[?0c[?25l[?1c[A[?25h[?0c[?25l[?1c [?25h[?0c[?25l[?1c [?25h[?0c[?25l[?1c[10d[?25h[?0c[?25l[?1c[A[?25h[?0c[?25l[?1c[1;216H[0;10;7mModified[m[9;3Hichar c;  i[?25h[?0c[?25l[?1c[32mchar[39m[m c;[K  [?25h[?0c[?25l[?1cschar c;  s[?25h[?0c[?25l[?1cichar c;[5G[?25h[?0c[?25l[?1cgchar c;[6G[?25h[?0c[?25l[?1cnchar c;[7G[?25h[?0c[?25l[?1cechar c;[8G[?25h[?0c[?25l[?1cdchar c;[9G[?25h[?0c[?25l[?1c  [32msigned[39m[m [32mchar[39m[m c;[10G[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[53d[0;10;7mSave modified buffer?  (Answering "No" will DISCARD changes.)                                                                                                                                                                    [54;1H Y[m Yes[K[55d[0;10;7m N[m No  [55;17H[0;10;7m^C[m Cancel[K[53;63H[?25h[?0c[?25l[?1c[54d[0;10;7m^G[m Get Help[54;57H[0;10;7mM-D[m DOS Format[54;113H[0;10;7mM-A[m Append[54;169H[0;10;7mM-B[m Backup File[55d[0;10;7m^C[m Cancel[17G         [55;57H[0;10;7mM-M[m Mac Format[55;113H[0;10;7mM-P[m Prepend[55;169H[0;10;7m^T[m To Files[53d[0;10;7mFile Name to Write: stdin-char-count.c                       [m[53;39H[?25h[?0c[?25l[?1c[K[1;224H[1;216H[0;10;7m        [m[53;104H[0;10;7m[ Wrote 12 lines ][m[J[55;225H[?25h[?0c[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ nano stdin-char-count.c ./stdin-char-count <stdin-char-count.cmake[K
gcc -g -Wall -std=c11 -funsigned-char    stdin-char-count.c   -o stdin-char-count
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ makenano stdin-char-count.c ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ vim lab13_out.txt[K[K[K[K[K[K[K[K[K../lab13_log.txt [1P[1P[1P[1@o[1@u[1@t[C[C[C[C[C
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"../lab13_out.txt" [New File][2;1H‚ñΩ[6n[2;1H  [1;1H[2;1H[1m[34m~                                                                                                                                                                                                                                [3;1H~                                                                                                                                                                                                                                [4;1H~                                                                                                                                                                                                                                [5;1H~                                                                                                                                                                                                                                [6;1H~                                                                                                                                                                                                                                [7;1H~                                                                                                                                                                                                                                [8;1H~                                                                                                                                                                                                                                [9;1H~                                                                                                                                                                                                                                [10;1H~                                                                                                                                                                                                                                [11;1H~                                                                                                                                                                                                                                [12;1H~                                                                                                                                                                                                                                [13;1H~                                                                                                                                                                                                                                [14;1H~                                                                                                                                                                                                                                [15;1H~                                                                                                                                                                                                                                [16;1H~                                                                                                                                                                                                                                [17;1H~                                                                                                                                                                                                                                [18;1H~                                                                                                                                                                                                                                [19;1H~                                                                                                                                                                                                                                [20;1H~                                                                                                                                                                                                                                [21;1H~                                                                                                                                                                                                                                [22;1H~                                                                                                                                                                                                                                [23;1H~                                                                                                                                                                                                                                [24;1H~                                                                                                                                                                                                                                [25;1H~                                                                                                                                                                                                                                [26;1H~                                                                                                                                                                                                                                [27;1H~                                                                                                                                                                                                                                [28;1H~                                                                                                                                                                                                                                [29;1H~                                                                                                                                                                                                                                [30;1H~                                                                                                                                                                                                                                [31;1H~                                                                                                                                                                                                                                [32;1H~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H0,0-1[9CAll[1;1H[?25h[?0c[?25l[?1c[55;198Hi[1;1H[55;198H [1;1H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H0,1[11CAll[1;1H[?25h[?0c[?25l[?1chsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1[2;9H[K[3;1H205[3;4H[K[4;1Hhsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c[4;82H[K[5;1H 12  32 205 stdin-char-count.c[5;31H[K[6;1Hhsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$[6;60H[K[55;208H6,60[6;60H[?25h[?0c[55;1H[K[6;59H[?25l[?1c[55;198H^[[6;59H[55;198H  [6;60H[55;208H6,59[10CAll[6;59H[?25h[?0c[?25l[?1c[55;198Hd[6;59H[?25h[?0c[?25l[?1c[55;199Hd[6;59H[55;198H  [5;2H
[1m[34m~                                                                                                                                                                                                                                [m[55;208H5,2 [5;2H[?25h[?0c[?25l[?1c[55;198H:[5;2H[55;198H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" [New] 5L, 225C written[?25h[?0c
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ cd ../file-char-count/
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c[Kmake
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c 
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c ./file-char-count file-char-count.c[K[Kcount[K[K[Knon
cannot read non: No such file or directory
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim 
file-char-count    file-char-count.c  .gitignore         Makefile           
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim [Kfg
bash: fg: current: no such job
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim ../
file-char-count/  file-copy/        lab13_log.txt     lab13_out.txt     no-buffer-copy/   rec-io/           stdin-char-count/ 
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim ../lab13__[Kout.txt 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"../lab13_out.txt" 5L, 225C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1Hhsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c
[1m[34m~                                                                                                                                                                                                                                [7;1H~                                                                                                                                                                                                                                [8;1H~                                                                                                                                                                                                                                [9;1H~                                                                                                                                                                                                                                [10;1H~                                                                                                                                                                                                                                [11;1H~                                                                                                                                                                                                                                [12;1H~                                                                                                                                                                                                                                [13;1H~                                                                                                                                                                                                                                [14;1H~                                                                                                                                                                                                                                [15;1H~                                                                                                                                                                                                                                [16;1H~                                                                                                                                                                                                                                [17;1H~                                                                                                                                                                                                                                [18;1H~                                                                                                                                                                                                                                [19;1H~                                                                                                                                                                                                                                [20;1H~                                                                                                                                                                                                                                [21;1H~                                                                                                                                                                                                                                [22;1H~                                                                                                                                                                                                                                [23;1H~                                                                                                                                                                                                                                [24;1H~                                                                                                                                                                                                                                [25;1H~                                                                                                                                                                                                                                [26;1H~                                                                                                                                                                                                                                [27;1H~                                                                                                                                                                                                                                [28;1H~                                                                                                                                                                                                                                [29;1H~                                                                                                                                                                                                                                [30;1H~                                                                                                                                                                                                                                [31;1H~                                                                                                                                                                                                                                [32;1H~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H5,2[11CAll[5;2H[?25h[?0c[?25l[?1c[55;198Ho[5;2H[55;198H [6;1H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H6,1[11CAll[6;1H[K[6;1H[?25h[?0c[?25l[?1c[7;1H[K[55;208H7[7;1H[?25h[?0c[?25l[?1chsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count[8;64H[K[9;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c[9;95H[K[10;1H566[10;4H[K[11;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c [11;81H[K[12;1H 27  81 566 file-char-count.c[12;30H[K[13;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non[13;81H[K[14;1Hcannot read non: No such file or directory[14;43H[K[55;208H14,43[14;43H[?25h[?0c[55;1H[K[14;42H[?25l[?1c[55;198H^[[14;42H[55;198H  [14;43H[55;208H14,42[9CAll[14;42H[?25h[?0c[?25l[?1c[55;198Hk[14;42H[55;198H [13;42H[55;209H3[13;42H[?25h[?0c[?25l[?1c[55;198Hg[13;42H[?25h[?0c[?25l[?1c[55;198H [13;42H[55;198Hgg[13;42H[55;198H  [1;1H[55;209H,1  [1;1H[?25h[?0c[?25l[?1c[55;198HO[1;1H[55;198H [1;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H1,1[11CTop[1;54r[1;1H[L[1;55r[55;208H[K[55;208H1,1[11CAll[1;1H[?25h[?0c[?25l[?1cE[55;210H2[1;2H[?25h[?0c[?25l[?1cx[55;210H3[1;3H[?25h[?0c[?25l[?1c1[55;210H4[1;4H[?25h[?0c[?25l[?1c:[55;210H5[1;5H[?25h[?0c[55;1H[K[1;4H[?25l[?1c[55;198H^[[1;4H[55;198H  [1;5H[55;208H1,4[11CAll[1;4H[?25h[?0c[?25l[?1c[55;198Hk[1;4H[55;198H [1;4H[?25h[?0c[?25l[?1c[55;198Hj[1;4H[55;198H [2;4H[55;208H2[2;4H[?25h[?0c[?25l[?1c[55;198Hj[2;4H[55;198H [3;4H[55;208H3[3;4H[?25h[?0c[?25l[?1c[55;198Hj[3;4H[55;198H [4;3H[55;208H4,3[4;3H[?25h[?0c[?25l[?1c[55;198Hj[4;3H[55;198H [5;4H[55;208H5,4[5;4H[?25h[?0c[?25l[?1c[55;198Hj[5;4H[55;198H [6;4H[55;208H6[6;4H[?25h[?0c[?25l[?1c[55;198Hj[6;4H[55;198H [7;1H[55;208H7,0-1[7;1H[?25h[?0c[?25l[?1c[55;198Ho[7;1H[55;198H [8;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H8,1[11CTop[8;54r[8;1H[L[1;55r[55;208H[K[55;208H8,1[11CAll[8;1H[?25h[?0c[?25l[?1cE[55;210H2[8;2H[?25h[?0c[?25l[?1cx[55;210H3[8;3H[?25h[?0c[?25l[?1c2[55;210H4[8;4H[?25h[?0c[?25l[?1c:[55;210H5[8;5H[?25h[?0c[55;1H[K[8;4H[?25l[?1c[55;198H^[[8;4H[55;198H  [8;5H[55;208H8,4[11CAll[8;4H[?25h[?0c[?25l[?1c[55;198H:[8;4H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 16L, 698C written[8;4H[55;208H8,4[11CAll[55;208H[K[55;208H8,4[11CAll[8;4H[?25h[?0c[?25l[?1c[55;198H:[8;4H[55;1H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim ../lab13_out.txt fg[Kvim ../lab13_out.txt [K[K[K[Kvim 
file-char-count    file-char-count.c  .gitignore         Makefile           
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim file-char-countc.[K[K.c
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"file-char-count.c" 27L, 566C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc != [1m[35m2[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m FILE_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *fName = argv[[1m[35m1[m];
  [1m[32mFILE[m *in = fopen(fName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, fName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mint[m c;
  [1m[32mint[m count = [1m[35m0[m;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) count++;
  printf([1m[35m"[m[1m[31m%d\n[m[1m[35m"[m, count);
  [1m[33mreturn[m [1m[35m0[m;
}
[1m[34m~                                                                                                                                                                                                                                [29;1H~                                                                                                                                                                                                                                [30;1H~                                                                                                                                                                                                                                [31;1H~                                                                                                                                                                                                                                [32;1H~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H1,1[11CAll[1;1H[?25h[?0c[?25l[?1c[55;198Hj[1;1H[55;198H [2;1H[55;208H2[2;1H[?25h[?0c[?25l[?1c[55;198Hj[2;1H[55;198H [3;1H[55;208H3[3;1H[?25h[?0c[?25l[?1c[55;198Hj[3;1H[55;198H [4;1H[55;208H4[4;1H[?25h[?0c[?25l[?1c[55;198Hj[4;1H[55;198H [5;1H[55;208H5,0-1[5;1H[?25h[?0c[?25l[?1c[55;198Hj[5;1H[55;198H [6;1H[55;208H6,1  [6;1H[?25h[?0c[?25l[?1c[55;198Hj[6;1H[55;198H [7;1H[55;208H7[7;1H[?25h[?0c[?25l[?1c[55;198Hj[7;1H[55;198H [8;1H[55;208H8[8;1H[?25h[?0c[?25l[?1c[55;198Hj[8;1H[55;198H [9;1H[55;208H9[9;1H[?25h[?0c[?25l[?1c[55;198Hj[9;1H[55;198H [10;1H[55;208H10,1[10;1H[?25h[?0c[?25l[?1c[55;198Hj[10;1H[55;198H [11;1H[46m{[27;1H}[m[55;209H1[11;1H[?25h[?0c[?25l[?1c[55;198Hj[11;1H[55;198H [12;1H[11;1H{[27;1H}[55;209H2[12;1H[?25h[?0c[?25l[?1c[55;198Hj[12;1H[55;198H [13;1H[55;209H3[13;1H[?25h[?0c[?25l[?1c[55;198Hj[13;1H[55;198H [14;1H[55;209H4[14;1H[?25h[?0c[?25l[?1c[55;198Hj[14;1H[55;198H [15;1H[55;209H5[15;1H[?25h[?0c[?25l[?1c[55;198Hj[15;1H[55;198H [16;1H[55;209H6[16;1H[?25h[?0c[?25l[?1c[55;198Hj[16;1H[55;198H [17;1H[55;209H7[17;1H[?25h[?0c[?25l[?1c[55;198Hj[17;1H[55;198H [18;1H[55;209H8[18;1H[?25h[?0c[?25l[?1c[55;198Hj[18;1H[55;198H [19;1H[55;209H9[19;1H[?25h[?0c[?25l[?1c[55;198Hj[19;1H[55;198H [20;1H[55;208H20[20;1H[?25h[?0c[?25l[?1c[55;198Hj[20;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hj[21;1H[55;198H [22;1H[55;209H2[22;1H[?25h[?0c[?25l[?1c[55;198Hk[22;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hk[21;1H[55;198H [20;1H[55;209H0[20;1H[?25h[?0c[?25l[?1c[55;198Hk[20;1H[55;198H [19;1H[55;208H19[19;1H[?25h[?0c[?25l[?1c[55;198Hj[19;1H[55;198H [20;1H[55;208H20[20;1H[?25h[?0c[?25l[?1c[55;198Hj[20;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hj[21;1H[55;198H [22;1H[55;209H2[22;1H[?25h[?0c[?25l[?1c[55;198Hk[22;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hj[21;1H[55;198H [22;1H[55;209H2[22;1H[?25h[?0c[?25l[?1c[55;198Hj[22;1H[55;198H [23;1H[55;209H3[23;1H[?25h[?0c[?25l[?1c[55;198Hk[23;1H[55;198H [22;1H[55;209H2[22;1H[?25h[?0c[?25l[?1c[55;198Hk[22;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hk[21;1H[55;198H [20;1H[55;209H0[20;1H[?25h[?0c[?25l[?1c[55;198H/[20;1H[55;1H[K[55;1H/[?25h[?0cf[?25l[?1c[24;15H[7mf[m[55;208H24,15[9CAll[55;208H[K[55;3H[?25h[?0cc[?25l[?1c[24;15Hf[55;208H20,1[10CAll[55;208H[K[55;4H[?25h[?0c[?25l[?1c[55;1H[K[20;1H[55;208H20,1[10CAll[20;1H[?25h[?0c[?25l[?1c[55;198H/[20;1H[55;198H[K[55;1H/[?25h[?0cc[?25l[?1c[22;7H[7mc[m[55;208H22,7[10CAll[55;208H[K[55;3H[?25h[?0cl[?25l[?1c[1;4H[1m[7m[34mcl[m[22;7Hc[55;208H1,4[11CAll[55;208H[K[55;4H[?25h[?0co[?25l[?1c[1;4H[1m[34mcl[m[55;208H20,1[10CAll[55;208H[K[55;5H[?25h[?0cs[?25l[?1c[202C20,1[10CAll[55;208H[K[55;6H[?25h[?0c[?25l[?1c[55;1H[K[20;1H[55;208H20,1[10CAll[20;1H[?25h[?0c[?25l[?1c[55;198Hk[20;1H[55;198H [19;1H[55;208H19[19;1H[?25h[?0c[?25l[?1c[55;198Ho[19;1H[55;198H [20;5H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H20,5[10CTop[20;54r[20;1H[L[1;55r[55;208H[K[55;208H20,5[10CAll[20;5H[?25h[?0c[?25l[?1cf[55;211H6[20;6H[?25h[?0c[?25l[?1cc[55;211H7[20;7H[?25h[?0c[?25l[?1cl[55;211H8[20;8H[?25h[?0c[?25l[?1co[55;211H9[20;9H[?25h[?0c[?25l[?1cs[55;211H10[20;10H[?25h[?0c[?25l[?1ce[55;212H1[20;11H[?25h[?0c[?25l[?1c([55;212H2[20;12H[?25h[?0c[?25l[?1ci[55;212H3[20;13H[?25h[?0c[?25l[?1cn[55;212H4[20;14H[?25h[?0c[?25l[?1c)[46m([min[46m)[m[55;212H5[20;15H[?25h[?0c[?25l[?1c;(in)[55;212H6[20;16H[?25h[?0c[55;1H[K[20;15H[?25l[?1c[55;198H^[[20;15H[55;198H  [20;16H[55;208H20,15[9CAll[20;15H[?25h[?0c[?25l[?1c[55;198H;[20;15H[55;198H [20;15H[?25h[?0c[?25l[?1c[55;198Hw[20;15H[55;198H [21;5H[55;209H1,5 [21;5H[?25h[?0c[?25l[?1c[55;198H^M[21;5H[55;198H  [22;3H[18;12H[46m{[22;3H}[m[55;209H2,3[22;3H[?25h[?0c[?25l[?1c[55;198Hj[22;3H[55;198H [23;3H[18;12H{[22;3H}[55;209H3[23;3H[?25h[?0c[?25l[?1c[55;198Hj[23;3H[55;198H [24;3H[55;209H4[24;3H[?25h[?0c[?25l[?1c[55;198Hj[24;3H[55;198H [25;3H[55;209H5[25;3H[?25h[?0c[?25l[?1c[55;198Hj[25;3H[55;198H [26;3H[55;209H6[26;3H[?25h[?0c[?25l[?1c[55;198Ho[26;3H[55;198H [27;3H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H27,3[10CTop[27;54r[27;1H[L[1;55r[55;208H[K[55;208H27,3[10CAll[27;3H[?25h[?0c[?25l[?1cf[55;211H4[27;4H[?25h[?0c[?25l[?1cc[55;211H5[27;5H[?25h[?0c[?25l[?1cl[55;211H6[27;6H[?25h[?0c[?25l[?1co[55;211H7[27;7H[?25h[?0c[?25l[?1cs[55;211H8[27;8H[?25h[?0c[?25l[?1ce[55;211H9[27;9H[?25h[?0c[?25l[?1c([55;211H10[27;10H[?25h[?0c[?25l[?1ci[55;212H1[27;11H[?25h[?0c[?25l[?1cn[55;212H2[27;12H[?25h[?0c[?25l[?1c)[46m([min[46m)[m[55;212H3[27;13H[?25h[?0c[?25l[?1c:(in)[55;212H4[27;14H[?25h[?0c[?25l[?1c[27;13H[K[27;9H[46m([min[46m)[m[55;212H3[27;13H[?25h[?0c[?25l[?1c;(in)[55;212H4[27;14H[?25h[?0c[55;1H[K[27;13H[?25l[?1c[55;198H^[[27;13H[55;198H  [27;14H[55;208H27,13[9CAll[27;13H[?25h[?0c[?25l[?1c[55;198H:[27;13H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"file-char-count.c" 29L, 596C written[27;13H[55;208H27,13[9CAll[55;208H[K[55;208H27,13[9CAll[27;13H[?25h[?0c[?25l[?1c[55;198H^Z[27;13H[55;1H
[?25h[?0c
[1]+  Stopped                 vim file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ f[Km[Kval
vala                      valac                     vala-gen-introspect       valgrind                  valgrind-di-server        
vala-0.42                 valac-0.42                vala-gen-introspect-0.42  valgrind.bin              valgrind-listener         
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind 
file-char-count         file-char-count.c       .file-char-count.c.swp  .gitignore              Makefile                
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind file-char-count
valgrind: file-char-count: command not found
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind file-char-count.file-char-count/file-char-count
==7916== Memcheck, a memory error detector
==7916== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7916== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==7916== Command: ./file-char-count
==7916== 
usage: ./file-char-count FILE_NAME
==7916== 
==7916== HEAP SUMMARY:
==7916==     in use at exit: 0 bytes in 0 blocks
==7916==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==7916== 
==7916== All heap blocks were freed -- no leaks are possible
==7916== 
==7916== For counts of detected and suppressed errors, rerun with: -v
==7916== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind ./file-char-count non
==7948== Memcheck, a memory error detector
==7948== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7948== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==7948== Command: ./file-char-count non
==7948== 
cannot read non: No such file or directory
==7948== 
==7948== HEAP SUMMARY:
==7948==     in use at exit: 0 bytes in 0 blocks
==7948==   total heap usage: 1 allocs, 1 frees, 552 bytes allocated
==7948== 
==7948== All heap blocks were freed -- no leaks are possible
==7948== 
==7948== For counts of detected and suppressed errors, rerun with: -v
==7948== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind ./file-char-count non -v[K[K[K[C[C[C[C[C[C[C[C[C[1@-[1@v[1@ 
==8024== Memcheck, a memory error detector
==8024== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8024== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==8024== Command: ./file-char-count non
==8024== 
--8024-- Valgrind options:
--8024--    -v
--8024-- Contents of /proc/version:
--8024--   Linux version 4.19.0-5-amd64 (debian-kernel@lists.debian.org) (gcc version 8.3.0 (Debian 8.3.0-7)) #1 SMP Debian 4.19.37-5 (2019-06-19)
--8024-- 
--8024-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-avx-avx2-bmi
--8024-- Page sizes: currently 4096, max supported 4096
--8024-- Valgrind library directory: /usr/lib/x86_64-linux-gnu/valgrind
--8024-- Reading syms from /import/linux/home1/hsloan1/git-repos/i220a/work/lab13/files/file-char-count/file-char-count
--8024-- Reading syms from /lib/x86_64-linux-gnu/ld-2.28.so
--8024--   Considering /usr/lib/debug/.build-id/f2/5dfd7b95be4ba386fd71080accae8c0732b711.debug ..
--8024--   .. build-id is valid
--8024-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux
--8024--   Considering /usr/lib/debug/.build-id/32/2e77af97f403c3d34ff09edf60b089e72ec889.debug ..
--8024--   .. build-id is valid
--8024--    object doesn't have a dynamic symbol table
--8024-- Scheduler: using generic scheduler lock implementation.
--8024-- Reading suppressions file: /usr/lib/x86_64-linux-gnu/valgrind/default.supp
==8024== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-8024-by-hsloan1-on-???
==8024== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-8024-by-hsloan1-on-???
==8024== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-8024-by-hsloan1-on-???
==8024== 
==8024== TO CONTROL THIS PROCESS USING vgdb (which you probably
==8024== don't want to do, unless you know exactly what you're doing,
==8024== or are doing some strange experiment):
==8024==   /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=8024 ...command...
==8024== 
==8024== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==8024==   /path/to/gdb ./file-char-count
==8024== and then give GDB the following command
==8024==   target remote | /usr/lib/x86_64-linux-gnu/valgrind/../../bin/vgdb --pid=8024
==8024== --pid is optional if only one valgrind process is running
==8024== 
--8024-- REDIR: 0x401e2f0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c9ce2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--8024-- REDIR: 0x401e0d0 (ld-linux-x86-64.so.2:index) redirected to 0x580c9cfc (vgPlain_amd64_linux_REDIR_FOR_index)
--8024-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_core-amd64-linux.so
--8024--   Considering /usr/lib/debug/.build-id/34/fbc4cdfbfce1bfc3d2e522a01a050bf724c930.debug ..
--8024--   .. build-id is valid
--8024-- Reading syms from /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so
--8024--   Considering /usr/lib/debug/.build-id/ca/bb7898ea982d936cbfadd70ae831c6eb63623f.debug ..
--8024--   .. build-id is valid
==8024== WARNING: new redirection conflicts with existing -- ignoring it
--8024--     old: 0x0401e2f0 (strlen              ) R-> (0000.0) 0x580c9ce2 vgPlain_amd64_linux_REDIR_FOR_strlen
--8024--     new: 0x0401e2f0 (strlen              ) R-> (2007.0) 0x04838d80 strlen
--8024-- REDIR: 0x401ab10 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4839e40 (strcmp)
--8024-- REDIR: 0x401e830 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x483d860 (mempcpy)
--8024-- Reading syms from /lib/x86_64-linux-gnu/libc-2.28.so
--8024--   Considering /usr/lib/debug/.build-id/18/b9a9a8c523e5cfe5b5d946d605d09242f09798.debug ..
--8024--   .. build-id is valid
--8024-- REDIR: 0x4903f70 (libc.so.6:memmove) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903160 (libc.so.6:strncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4904250 (libc.so.6:strcasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4902b70 (libc.so.6:strcat) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903190 (libc.so.6:rindex) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4905890 (libc.so.6:rawmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x491e230 (libc.so.6:wmemchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x491dcd0 (libc.so.6:wcscmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49040e0 (libc.so.6:mempcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903f10 (libc.so.6:bcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903100 (libc.so.6:strncmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4902be0 (libc.so.6:strcmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4904040 (libc.so.6:memset) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x491dca0 (libc.so.6:wcschr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49030a0 (libc.so.6:strnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4902c70 (libc.so.6:strcspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49042a0 (libc.so.6:strncasecmp) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4902c40 (libc.so.6:strcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49043e0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x491f4d0 (libc.so.6:wcsnlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49031c0 (libc.so.6:strpbrk) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4902ba0 (libc.so.6:index) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903070 (libc.so.6:strlen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x490a280 (libc.so.6:memrchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49042f0 (libc.so.6:strcasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903ee0 (libc.so.6:memchr) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x491ddb0 (libc.so.6:wcslen) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4903460 (libc.so.6:strspn) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4904220 (libc.so.6:stpncpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49041f0 (libc.so.6:stpcpy) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49058c0 (libc.so.6:strchrnul) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x4904340 (libc.so.6:strncasecmp_l) redirected to 0x482b1b0 (_vgnU_ifunc_wrapper)
--8024-- REDIR: 0x49d6fa0 (libc.so.6:__strrchr_avx2) redirected to 0x4838790 (rindex)
--8024-- REDIR: 0x48ff350 (libc.so.6:malloc) redirected to 0x4835710 (malloc)
--8024-- REDIR: 0x48ff9a0 (libc.so.6:free) redirected to 0x4836940 (free)
--8024-- REDIR: 0x49d7170 (libc.so.6:__strlen_avx2) redirected to 0x4838c60 (strlen)
--8024-- REDIR: 0x4919710 (libc.so.6:__stpcpy_sse2_unaligned) redirected to 0x483c3f0 (__stpcpy_sse2_unaligned)
--8024-- REDIR: 0x49d7690 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x483d4a0 (mempcpy)
--8024-- REDIR: 0x49d6db0 (libc.so.6:__strchrnul_avx2) redirected to 0x483d390 (strchrnul)
cannot read non: No such file or directory
==8024== 
==8024== HEAP SUMMARY:
==8024==     in use at exit: 0 bytes in 0 blocks
==8024==   total heap usage: 1 allocs, 1 frees, 552 bytes allocated
==8024== 
==8024== All heap blocks were freed -- no leaks are possible
==8024== 
==8024== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==8024== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind ./file-char-count file-char-count.c
==8116== Memcheck, a memory error detector
==8116== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8116== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==8116== Command: ./file-char-count file-char-count.c
==8116== 
596
==8116== 
==8116== HEAP SUMMARY:
==8116==     in use at exit: 552 bytes in 1 blocks
==8116==   total heap usage: 3 allocs, 2 frees, 9,768 bytes allocated
==8116== 
==8116== LEAK SUMMARY:
==8116==    definitely lost: 0 bytes in 0 blocks
==8116==    indirectly lost: 0 bytes in 0 blocks
==8116==      possibly lost: 0 bytes in 0 blocks
==8116==    still reachable: 552 bytes in 1 blocks
==8116==         suppressed: 0 bytes in 0 blocks
==8116== Rerun with --leak-check=full to see details of leaked memory
==8116== 
==8116== For counts of detected and suppressed errors, rerun with: -v
==8116== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[1@-[1@-[1@l[1@e[1@a[1@k[1@-[1@c[1@h[1@e[1@c[1@k[1@-[1@=[1P[1P[1@=[1@f[1@u[1@l[1@l[1@ 
==8192== Memcheck, a memory error detector
==8192== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8192== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==8192== Command: ./file-char-count file-char-count.c
==8192== 
596
==8192== 
==8192== HEAP SUMMARY:
==8192==     in use at exit: 552 bytes in 1 blocks
==8192==   total heap usage: 3 allocs, 2 frees, 9,768 bytes allocated
==8192== 
==8192== LEAK SUMMARY:
==8192==    definitely lost: 0 bytes in 0 blocks
==8192==    indirectly lost: 0 bytes in 0 blocks
==8192==      possibly lost: 0 bytes in 0 blocks
==8192==    still reachable: 552 bytes in 1 blocks
==8192==         suppressed: 0 bytes in 0 blocks
==8192== Reachable blocks (those to which a pointer was found) are not shown.
==8192== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8192== 
==8192== For counts of detected and suppressed errors, rerun with: -v
==8192== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ makevalgrind --leak-check=full ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==8242== Memcheck, a memory error detector
==8242== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8242== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==8242== Command: ./file-char-count file-char-count.c
==8242== 
596
==8242== 
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242== 
==8242== All heap blocks were freed -- no leaks are possible
==8242== 
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[18P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[11P-v ./file-char-count non[3P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[3@-v [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C./file-char-count file-char-count.c[18@--leak-check=full [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kfg
vim file-char-count.c
[27m[24m[m[H[J[?25l[?1c[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc != [1m[35m2[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m FILE_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *fName = argv[[1m[35m1[m];
  [1m[32mFILE[m *in = fopen(fName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, fName, strerror(errno));
    fclose(in);
    exit([1m[35m1[m);
  }
  [1m[32mint[m c;
  [1m[32mint[m count = [1m[35m0[m;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) count++;
  printf([1m[35m"[m[1m[31m%d\n[m[1m[35m"[m, count);
  fclose(in);
  [1m[33mreturn[m [1m[35m0[m;
}
[1m[34m~                                                                                                                                                                                                                                [31;1H~                                                                                                                                                                                                                                [32;1H~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H27,13[9CAll[27;13H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198Hj[27;13H[55;198H [28;11H[55;209H8,11[28;11H[?25h[?0c[?25l[?1c[55;198H;[28;11H[55;198H [28;11H[?25h[?0c[?25l[?1c[55;198H:[28;11H[55;198H[K[55;1H:[?25h[?0cq[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ fgvalgrind --leak-check=full ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[18P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[H[Jhsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ valgrind ./file-char-count file-char-count.c[Kv^C
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ vim ../fg[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full ./file-char-count file-char-count.c[18P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[11P-v ./file-char-count non[3P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[2Pfile-char-count[3Pim file-char-count.c../lab13_out.txt fg[Kvim ../lab13_out.txt 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"../lab13_out.txt" 16L, 698C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1HEx1:
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory
[1m[34m~                                                                                                                                                                                                                                [18;1H~                                                                                                                                                                                                                                [19;1H~                                                                                                                                                                                                                                [20;1H~                                                                                                                                                                                                                                [21;1H~                                                                                                                                                                                                                                [22;1H~                                                                                                                                                                                                                                [23;1H~                                                                                                                                                                                                                                [24;1H~                                                                                                                                                                                                                                [25;1H~                                                                                                                                                                                                                                [26;1H~                                                                                                                                                                                                                                [27;1H~                                                                                                                                                                                                                                [28;1H~                                                                                                                                                                                                                                [29;1H~                                                                                                                                                                                                                                [30;1H~                                                                                                                                                                                                                                [31;1H~                                                                                                                                                                                                                                [32;1H~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H8,4[11CAll[8;4H[?25h[?0c[?25l[?1c[55;198HG[8;4H[55;198H [16;1H[55;208H16,1[16;1H[?25h[?0c[?25l[?1c[55;198Ho[16;1H[55;198H [17;1H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H17,1[10CAll[17;1H[K[17;1H[?25h[?0c[?25l[?1c==8242== Command: ./file-char-count file-char-count.c
==8242== [18;10H[K[19;1H596[19;4H[K[20;1H==8242== [20;10H[K[21;1H==8242== HEAP SUMMARY:[21;23H[K[22;1H==8242==     in use at exit: 0 bytes in 0 blocks[22;49H[K[23;1H==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated[23;70H[K[24;1H==8242== [24;10H[K[25;1H==8242== All heap blocks were freed -- no leaks are possible[25;61H[K[26;1H==8242== [26;10H[K[27;1H==8242== For counts of detected and suppressed errors, rerun with: -v[27;70H[K[28;1H==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)[28;72H[K[29;1H[K[55;208H29[29;1H[?25h[?0c[55;1H[K[29;1H[?25l[?1c[55;198H^[[29;1H[55;198H  [29;1H[55;208H29,0-1[8CAll[29;1H[?25h[?0c[?25l[?1c[55;198Hk[29;1H[55;198H [28;1H[55;209H8,1  [28;1H[?25h[?0c[?25l[?1c[55;198Hk[28;1H[55;198H [27;1H[55;209H7[27;1H[?25h[?0c[?25l[?1c[55;198Hk[27;1H[55;198H [26;1H[55;209H6[26;1H[?25h[?0c[?25l[?1c[55;198Hk[26;1H[55;198H [25;1H[55;209H5[25;1H[?25h[?0c[?25l[?1c[55;198Hk[25;1H[55;198H [24;1H[55;209H4[24;1H[?25h[?0c[?25l[?1c[55;198Hk[24;1H[55;198H [23;1H[55;209H3[23;1H[?25h[?0c[?25l[?1c[55;198Hk[23;1H[55;198H [22;1H[55;209H2[22;1H[?25h[?0c[?25l[?1c[55;198Hk[22;1H[55;198H [21;1H[55;209H1[21;1H[?25h[?0c[?25l[?1c[55;198Hk[21;1H[55;198H [20;1H[55;209H0[20;1H[?25h[?0c[?25l[?1c[55;198Hk[20;1H[55;198H [19;1H[55;208H19[19;1H[?25h[?0c[?25l[?1c[55;198Hk[19;1H[55;198H [18;1H[55;209H8[18;1H[?25h[?0c[?25l[?1c[55;198Hk[18;1H[55;198H [17;1H[55;209H7[17;1H[?25h[?0c[?25l[?1c[55;198Hk[17;1H[55;198H [16;1H[55;209H6[16;1H[?25h[?0c[?25l[?1c[55;198Ho[16;1H[55;198H [17;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H17,1[10CTop[17;54r[17;1H[L[1;55r[55;208H[K[55;208H17,1[10CAll[17;1H[?25h[?0c[?25l[?1c[18;54r[18;1H[L[1;55r[55;208H[K[55;208H18,1[10CAll[18;1H[?25h[?0c[?25l[?1c#[55;211H2[18;2H[?25h[?0c[?25l[?1c[55;211H3[18;3H[?25h[?0c[?25l[?1cA[55;211H4[18;4H[?25h[?0c[?25l[?1cD[55;211H5[18;5H[?25h[?0c[?25l[?1c[18;4H[K[55;211H4[18;4H[?25h[?0c[?25l[?1cd[55;211H5[18;5H[?25h[?0c[?25l[?1cd[55;211H6[18;6H[?25h[?0c[?25l[?1ce[55;211H7[18;7H[?25h[?0c[?25l[?1cd[55;211H8[18;8H[?25h[?0c[?25l[?1c[55;211H9[18;9H[?25h[?0c[?25l[?1cf[55;211H10[18;10H[?25h[?0c[?25l[?1cr[55;212H1[18;11H[?25h[?0c[?25l[?1ce[55;212H2[18;12H[?25h[?0c[?25l[?1ce[55;212H3[18;13H[?25h[?0c[?25l[?1c[18;12H[K[55;212H2[18;12H[?25h[?0c[?25l[?1c[18;11H[K[55;212H1[18;11H[?25h[?0c[?25l[?1c[18;10H[K[55;212H0[18;10H[?25h[?0c[?25l[?1ci[55;212H1[18;11H[?25h[?0c[?25l[?1cl[55;212H2[18;12H[?25h[?0c[?25l[?1ce[55;212H3[18;13H[?25h[?0c[?25l[?1c[55;212H4[18;14H[?25h[?0c[?25l[?1cc[55;212H5[18;15H[?25h[?0c[?25l[?1cl[55;212H6[18;16H[?25h[?0c[?25l[?1co[55;212H7[18;17H[?25h[?0c[?25l[?1cs[55;212H8[18;18H[?25h[?0c[?25l[?1ce[55;212H9[18;19H[?25h[?0c[?25l[?1cs[55;211H20[18;20H[?25h[?0c[55;1H[K[18;19H[?25l[?1c[55;198H^[[18;19H[55;198H  [18;20H[55;208H18,19[9CAll[18;19H[?25h[?0c[?25l[?1c[55;198H:[18;19H[55;198H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 31L, 1163C written[?25h[?0c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ :[Kcd ..//[Kfile-copy/
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ make
gcc -g -Wall -std=c11    file-copy.c   -o file-copy
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy 
usage: ./file-copy SRC_NAME DEST_NAME
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ls -l file-copy.c t 
ls: cannot access 't': No such file or directory
-rw-r----- 1 hsloan1 hsloan1 1195 Nov 17 21:15 file-copy.c
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ls -l file-copy.c t
-rw-r----- 1 hsloan1 hsloan1 1195 Nov 17 21:15 file-copy.c
-rw-r----- 1 hsloan1 hsloan1 1195 Nov 17 21:24 t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t    
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t 
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fg [K../v../i../m../ ../[C[C[C
file-char-count/  file-copy/        lab13_log.txt     lab13_out.txt     no-buffer-copy/   rec-io/           stdin-char-count/ 
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ vim ../lab13_out.txt 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"../lab13_out.txt" 31L, 1163C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1HEx1:
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

[1m[34m~                                                                                                                                                                                                                                [33;1H~                                                                                                                                                                                                                                [34;1H~                                                                                                                                                                                                                                [35;1H~                                                                                                                                                                                                                                [36;1H~                                                                                                                                                                                                                                [37;1H~                                                                                                                                                                                                                                [38;1H~                                                                                                                                                                                                                                [39;1H~                                                                                                                                                                                                                                [40;1H~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H18,19[9CAll[18;19H[?25h[?0c[?25l[?1c[55;198Hj[18;19H[55;198H [19;19H[55;209H9[19;19H[?25h[?0c[?25l[?1c[55;198HG[19;19H[55;198H [31;1H[55;208H31,0-1[31;1H[?25h[?0c[?25l[?1c[55;198Ho[31;1H[55;198H [32;1H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H32,1[10CAll[32;1H[K[32;1H[?25h[?0c[?25l[?1cE[55;211H2[32;2H[?25h[?0c[?25l[?1cx[55;211H3[32;3H[?25h[?0c[?25l[?1c3[55;211H4[32;4H[?25h[?0c[?25l[?1c:[55;211H5[32;5H[?25h[?0c[?25l[?1c[55;211H6[32;6H[?25h[?0c[?25l[?1c[55;211H5[32;5H[?25h[?0c[?25l[?1c[33;1H[K[55;209H3,1[33;1H[?25h[?0c[?25l[?1chsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t[34;76H[K[35;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t    [35;72H[K[36;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C[36;56H[K[37;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t [37;66H[K[38;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t[38;79H[K[39;1Hcannot write t: Permission denied[39;34H[K[55;209H9,34[39;34H[?25h[?0c[55;1H[K[39;33H[?25l[?1c[55;198H^[[39;33H[55;198H  [39;34H[55;208H39,33[9CAll[39;33H[?25h[?0c[?25l[?1c[55;198H;[39;33H[55;198H [39;33H[?25h[?0c[?25l[?1c[55;198H:[39;33H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 39L, 1622C written[39;33H[55;208H39,33[9CAll[55;208H[K[55;208H39,33[9CAll[39;33H[?25h[?0c[?25l[?1c[55;198H^Z[39;33H[55;1H
[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ i[Kvim 
file-copy    file-copy.c  .gitignore   Makefile     t            
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ vim vo[K[Kfile-copy.c 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"file-copy.c" 50L, 1195C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[32mstatic[m [1m[32mvoid[m
doCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)
{
  [1m[32mint[m c;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {
    [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[12;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);
    }
  }
}

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc != [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];
  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];
  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);
  [1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  doCopy(srcName, in, destName, out);
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mreturn[m [1m[35m0[m;
}
[1m[34m~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H1,1[11CAll[1;1H[?25h[?0c[?25l[?1c[55;198HG[1;1H[55;198H [50;1H[23;1H[46m{[50;1H}[m[55;208H50,1[50;1H[?25h[?0c[?25l[?1c[55;198Hk[50;1H[55;198H [49;1H[23;1H{[50;1H}[55;208H49[49;1H[?25h[?0c[?25l[?1c[55;198Hk[49;1H[55;198H [48;1H[55;209H8[48;1H[?25h[?0c[?25l[?1c[55;198Hk[48;1H[55;198H [47;1H[55;209H7[47;1H[?25h[?0c[?25l[?1c[55;198Hk[47;1H[55;198H [46;1H[55;209H6[46;1H[?25h[?0c[?25l[?1c[55;198Hk[46;1H[55;198H [45;1H[55;209H5[45;1H[?25h[?0c[?25l[?1c[55;198Hk[45;1H[55;198H [44;1H[55;209H4[44;1H[?25h[?0c[?25l[?1c[55;198Hk[44;1H[55;198H [43;1H[55;209H3[43;1H[?25h[?0c[?25l[?1c[55;198Hk[43;1H[55;198H [42;1H[55;209H2[42;1H[?25h[?0c[?25l[?1c[55;198Hk[42;1H[55;198H [41;1H[55;209H1[41;1H[?25h[?0c[?25l[?1c[55;198Hk[41;1H[55;198H [40;1H[55;209H0[40;1H[?25h[?0c[?25l[?1c[55;198Hk[40;1H[55;198H [39;1H[55;208H39[39;1H[?25h[?0c[?25l[?1c[55;198Hk[39;1H[55;198H [38;1H[55;209H8[38;1H[?25h[?0c[?25l[?1c[55;198Hk[38;1H[55;198H [37;1H[55;209H7[37;1H[?25h[?0c[?25l[?1c[55;198Hk[37;1H[55;198H [36;1H[55;209H6[36;1H[?25h[?0c[?25l[?1c[55;198Hk[36;1H[55;198H [35;1H[55;209H5[35;1H[?25h[?0c[?25l[?1c[55;198Hk[35;1H[55;198H [34;1H[55;209H4[34;1H[?25h[?0c[?25l[?1c[55;198Hk[34;1H[55;198H [33;1H[55;209H3[33;1H[?25h[?0c[?25l[?1c[55;198Hk[33;1H[55;198H [32;1H[55;209H2[32;1H[?25h[?0c[?25l[?1c[55;198Hk[32;1H[55;198H [31;1H[55;209H1[31;1H[?25h[?0c[?25l[?1c[55;198Hk[31;1H[55;198H [30;1H[55;209H0[30;1H[?25h[?0c[?25l[?1c[55;198HG[30;1H[55;198H [50;1H[23;1H[46m{[50;1H}[m[55;208H5[50;1H[?25h[?0c[?25l[?1c[55;198Hk[50;1H[55;198H [49;1H[23;1H{[50;1H}[55;208H49[49;1H[?25h[?0c[?25l[?1c[55;198Hk[49;1H[55;198H [48;1H[55;209H8[48;1H[?25h[?0c[?25l[?1c[55;198Hk[48;1H[55;198H [47;1H[55;209H7[47;1H[?25h[?0c[?25l[?1c[55;198Hk[47;1H[55;198H [46;1H[55;209H6[46;1H[?25h[?0c[?25l[?1c[55;198Hk[46;1H[55;198H [45;1H[55;209H5[45;1H[?25h[?0c[?25l[?1c[55;198Hk[45;1H[55;198H [44;1H[55;209H4[44;1H[?25h[?0c[?25l[?1c[55;198Hk[44;1H[55;198H [43;1H[55;209H3[43;1H[?25h[?0c[?25l[?1c[55;198Hk[43;1H[55;198H [42;1H[55;209H2[42;1H[?25h[?0c[?25l[?1c[55;198Hk[42;1H[55;198H [41;1H[55;209H1[41;1H[?25h[?0c[?25l[?1c[55;198Hk[41;1H[55;198H [40;1H[55;209H0[40;1H[?25h[?0c[?25l[?1c[55;198Hk[40;1H[55;198H [39;1H[55;208H39[39;1H[?25h[?0c[?25l[?1c[55;198Hk[39;1H[55;198H [38;1H[55;209H8[38;1H[?25h[?0c[?25l[?1c[55;198Hk[38;1H[55;198H [37;1H[55;209H7[37;1H[?25h[?0c[?25l[?1c[55;198Hk[37;1H[55;198H [36;1H[55;209H6[36;1H[?25h[?0c[?25l[?1c[55;198Hk[36;1H[55;198H [35;1H[55;209H5[35;1H[?25h[?0c[?25l[?1c[55;198Hk[35;1H[55;198H [34;1H[55;209H4[34;1H[?25h[?0c[?25l[?1c[55;198Hk[34;1H[55;198H [33;1H[55;209H3[33;1H[?25h[?0c[?25l[?1c[55;198Hk[33;1H[55;198H [32;1H[55;209H2[32;1H[?25h[?0c[?25l[?1c[55;198Hk[32;1H[55;198H [31;1H[55;209H1[31;1H[?25h[?0c[?25l[?1c[55;198Hk[31;1H[55;198H [30;1H[55;209H0[30;1H[?25h[?0c[?25l[?1c[55;198Hk[30;1H[55;198H [29;1H[55;208H29[29;1H[?25h[?0c[?25l[?1c[55;198Hj[29;1H[55;198H [30;1H[55;208H30[30;1H[?25h[?0c[?25l[?1c[55;198Hj[30;1H[55;198H [31;1H[55;209H1[31;1H[?25h[?0c[?25l[?1c[55;198Hk[31;1H[55;198H [30;1H[55;209H0[30;1H[?25h[?0c[?25l[?1c[55;198Hk[30;1H[55;198H [29;1H[55;208H29[29;1H[?25h[?0c[?25l[?1c[55;198H.[29;1H[55;198H [29;1H[?25h[?0c[?25l[?1c[55;198H/[29;1H[55;1H[K[55;1H/[?25h[?0cf[?25l[?1c[30;14H[7mf[m[55;208H30,14[9CAll[55;208H[K[55;3H[?25h[?0cg[?25l[?1c[10;15H[7mfg[m[30;14Hf[55;208H10,15[9CAll[55;208H[K[55;4H[?25h[?0ce[?25l[?1c[10;17H[7me[m[55;208H10,15[9CAll[55;208H[K[55;5H[?25h[?0ct[?25l[?1c[10;18H[7mt[m[55;208H10,15[9CAll[55;208H[K[55;6H[?25h[?0cc[?25l[?1c[10;19H[7mc[m[55;208H10,15[9CAll[55;208H[K[55;7H[?25h[?0c[?25l[?1c[1m[31msearch hit BOTTOM, continuing at TOP[10;15H[mfgetc[55;208H10,15[9CAll[55;208H[K[55;208H10,15[9CAll[10;15H[?25h[?0c[?25l[?1c[55;198Hj[10;15H[55;198H [11;15H[55;209H1[11;15H[?25h[?0c[?25l[?1c[55;198Hk[11;15H[55;198H [10;15H[55;209H0[10;15H[?25h[?0c[?25l[?1c[55;198Hb[10;15H[55;198H [10;13H[55;212H3[10;13H[?25h[?0c[?25l[?1c[55;198Hb[10;13H[55;198H [10;11H[55;212H1[10;11H[?25h[?0c[?25l[?1c[55;198Hh[10;11H[55;198H [10;10H[46m([13C)[m[55;212H0[10;10H[?25h[?0c[?25l[?1c[55;198Ho[10;10H[55;198H [11;11H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H11,4-11[7CTop[11;54r[11;1H[L[1;55r[55;208H[K[55;208H11,4-11[7CAll[10;10H([13C)[11;11H[?25h[?0c[?25l[?1c[55;211H3-10[11;10H[?25h[?0c[?25l[?1c[55;211H2-9 [11;9H[?25h[?0c[?25l[?1c[55;211H1  [11;1H[?25h[?0c[?25l[?1c[10;54r[54;1H
[1;55r[10;3H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[54;1H[1m[34m~                                                                                                                                                                                                                                [m[55;208H[K[55;208H10,35[9CAll[10;34H[46m{[15;3H}[10;35H[?25h[?0c[?25l[?1c[11;54r[m[11;1H[L[1;55r[15;3H[46m [m
  }[55;208H[K[55;208H11,4-11[7CAll[10;34H{[15;3H [11;11H[?25h[?0c[?25l[?1c[55;211H3-10[11;10H[?25h[?0c[?25l[?1c[55;211H2-9 [11;9H[?25h[?0c[?25l[?1c[55;211H1  [11;1H[?25h[?0c[?25l[?1c[55;211H2[11;2H[?25h[?0c[?25l[?1c[55;211H3[11;3H[?25h[?0c[?25l[?1c[55;211H4[11;4H[?25h[?0c[?25l[?1c[55;211H5[11;5H[?25h[?0c[?25l[?1ci[55;211H6[11;6H[?25h[?0c[?25l[?1c[1m[33mif[m[55;211H7[11;7H[?25h[?0c[?25l[?1c[55;211H8[11;8H[?25h[?0c[?25l[?1c([12;31H[1m[37m[41m{[15;5H}[m[55;211H9[11;9H[?25h[?0c[?25l[?1cf[55;211H10[11;10H[?25h[?0c[?25l[?1ce[55;212H1[11;11H[?25h[?0c[?25l[?1cr[55;212H2[11;12H[?25h[?0c[?25l[?1cr[55;212H3[11;13H[?25h[?0c[?25l[?1co[55;212H4[11;14H[?25h[?0c[?25l[?1cr[55;212H5[11;15H[?25h[?0c[?25l[?1c([55;212H6[11;16H[?25h[?0c[?25l[?1c)[46m()[m[55;212H7[11;17H[?25h[?0c[?25l[?1c)[12;31H{[15;5H}[11;8H[46m([mferror()[46m)[m[55;212H8[11;18H[?25h[?0c[?25l[?1c[11;8H([8C)[55;212H9[11;19H[?25h[?0c[?25l[?1c[55;211H20[11;20H[?25h[?0c[?25l[?1c{[46m{[16;3H}[m[55;212H1[11;21H[?25h[?0c[?25l[?1c[11;20H[K[16;3H}[55;212H0[11;20H[?25h[?0c[?25l[?1c[55;211H19[11;19H[?25h[?0c[?25l[?1c{[46m{[16;3H}[m[55;211H20[11;20H[?25h[?0c[?25l[?1c[12;54r[12;1H[L[1;55r[16;3H[46m [m
  }[55;208H[K[55;208H12,6-13[7CAll[11;19H{[16;3H [12;13H[?25h[?0c[?25l[?1c    }[11;19H[46m{
[m    [46m}[m[55;212H   [12;6H[?25h[?0c[55;1H[K[12;5H[?25l[?1c[55;198H^[[12;5H[55;198H  [12;6H[55;208H12,5[10CAll[12;5H[?25h[?0c[?25l[?1c[55;198Hk[12;5H[55;198H [11;5H[14C{
    }[55;209H1[11;5H[?25h[?0c[?25l[?1c[55;198Ho[11;5H[55;198H [12;13H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H12,6-13[7CTop[12;54r[12;1H[L[1;55r[55;208H[K[55;208H12,6-13[7CAll[12;13H[?25h[?0c[?25l[?1c[55;211H5-12[12;12H[?25h[?0c[?25l[?1c[55;211H4-11[12;11H[?25h[?0c[?25l[?1c[55;211H3-10[12;10H[?25h[?0c[?25l[?1c[55;211H2-9 [12;9H[?25h[?0c[?25l[?1cf[55;211H3-10[12;10H[?25h[?0c[?25l[?1c[12;9H[K[55;211H2-9 [12;9H[?25h[?0c[?25l[?1ce[55;211H3-10[12;10H[?25h[?0c[?25l[?1cx[55;211H4-11[12;11H[?25h[?0c[?25l[?1ci[55;211H5-12[12;12H[?25h[?0c[?25l[?1ct[55;211H6-13[12;13H[?25h[?0c[55;1H[K[12;12H[?25l[?1c[55;198H^[[12;12H[55;198H  [12;13H[55;208H12,5-12[7CAll[12;12H[?25h[?0c[?25l[?1c[55;198Hj[12;12H[55;198H [13;5H[11;19H[46m{[13;5H}[m[55;209H3,5   [13;5H[?25h[?0c[?25l[?1c[55;198Hj[13;5H[55;198H [14;12H[11;19H{[13;5H}[55;209H4,12[14;12H[?25h[?0c[?25l[?1c[55;198Hj[14;12H[55;198H [15;12H[55;209H5[15;12H[?25h[?0c[?25l[?1c[55;198Hj[15;12H[55;198H [16;12H[55;209H6[16;12H[?25h[?0c[?25l[?1c[55;198Hk[16;12H[55;198H [15;12H[55;209H5[15;12H[?25h[?0c[?25l[?1c[55;198HV[15;12H[55;198H1[15;12H[7m      fprin[mt[7mf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"error writing to [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, outName, strerror(errno)); [m[55;1H[1m-- VISUAL LINE --[m[55;198H[K[55;198H1[15;12H[55;208H15,12[9CAll[15;12H[?25h[?0c[?25l[?1c[55;198Hj[15;12H[55;198H2[16;12H[15;12H[7mt
      exit([1C); [m[55;209H6[16;12H[?25h[?0c[?25l[?1c[55;198Hy[16;12H[55;198H [15;1H      fprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[15;78H[K[16;1H      exit([1C);[16;15H[K[55;1H[K[55;208H15,1[10CAll[15;1H[?25h[?0c[?25l[?1c[55;198Hk[15;1H[55;198H [14;1H[55;209H4[14;1H[?25h[?0c[?25l[?1c[55;198Hk[14;1H[55;198H [13;1H[55;209H3[13;1H[?25h[?0c[?25l[?1c[55;198Hk[13;1H[55;198H [12;8H[55;209H2,1-8[12;8H[?25h[?0c[?25l[?1c[55;198Hk[12;8H[55;198H [11;1H[55;209H1,1  [11;1H[?25h[?0c[?25l[?1c[55;198Hp[11;1H[55;198H [12;7H[12;54r[12;1H[2L[1;55r[12;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);[55;208H[K[55;208H12,7[10CTop[12;7H[?25h[?0c[?25l[?1c[55;198Hj[12;7H[55;198H [13;7H[55;209H3[13;7H[?25h[?0c[?25l[?1c[55;198Hj[13;7H[55;198H [14;8H[55;209H4,1-8[14;8H[?25h[?0c[?25l[?1c[55;198Hd[14;8H[?25h[?0c[?25l[?1c[55;199Hd[14;8H[55;198H  [14;5H[11;54r[54;1H
[1;55r[11;5H[1m[33mif[m (ferror()) [46m{[m[11;20H[K[12;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);
    [46m}[m[54;1H}[55;208H[K[55;208H14,5[10CAll[14;5H[?25h[?0c[?25l[?1c[55;198Hk[14;5H[55;198H [13;5H[11;19H{[14;5H}[55;209H3[13;5H[?25h[?0c[?25l[?1c[55;198Hk[13;5H[55;198H [12;5H[55;209H2[12;5H[?25h[?0c[?25l[?1c[55;198Hw[12;5H[55;198H [12;7H[55;211H7[12;7H[?25h[?0c[?25l[?1c[55;198Hw[12;7H[55;198H [12;14H[46m([61C)[m[55;211H14[12;14H[?25h[?0c[?25l[?1c[55;198Hw[12;14H[55;198H [12;15H([61C)[55;212H5[12;15H[?25h[?0c[?25l[?1c[55;198Hw[12;15H[55;198H [12;21H[55;211H21[12;21H[?25h[?0c[?25l[?1c[55;198Hw[12;21H[55;198H [12;23H[55;212H3[12;23H[?25h[?0c[?25l[?1c[55;198Hw[12;23H[55;198H [12;24H[55;212H4[12;24H[?25h[?0c[?25l[?1c[55;198Hw[12;24H[55;198H [12;30H[55;211H30[12;30H[?25h[?0c[?25l[?1c[55;198Hw[12;30H[55;198H [12;38H[55;212H8[12;38H[?25h[?0c[?25l[?1c[55;198Hb[12;38H[55;198H [12;30H[55;212H0[12;30H[?25h[?0c[?25l[?1c[55;198Hv[12;30H[55;198H1[12;30H[55;1H[1m-- VISUAL --[m[55;198H[K[55;198H1[12;30H[55;208H12,30[9CAll[12;30H[?25h[?0c[?25l[?1c[55;198Hl[12;30H[55;198H2[12;31H[1m[7m[35mw[m[55;212H1[12;31H[?25h[?0c[?25l[?1c[55;198Hl[12;31H[55;198H3[12;32H[1m[7m[35mr[m[55;212H2[12;32H[?25h[?0c[?25l[?1c[55;198Hl[12;32H[55;198H4[12;33H[1m[7m[35mi[m[55;212H3[12;33H[?25h[?0c[?25l[?1c[55;198Hl[12;33H[55;198H5[12;34H[1m[7m[35mt[m[55;212H4[12;34H[?25h[?0c[?25l[?1c[55;198Hl[12;34H[55;198H6[12;35H[1m[7m[35mi[m[55;212H5[12;35H[?25h[?0c[?25l[?1c[55;198Hl[12;35H[55;198H7[12;36H[1m[7m[35mn[m[55;212H6[12;36H[?25h[?0c[?25l[?1c[55;198Hl[12;36H[55;198H8[12;37H[1m[7m[35mg[m[55;212H7[12;37H[?25h[?0c[?25l[?1c[55;198Hl[12;37H[55;198H9[12;38H[1m[7m[35m [m[55;212H8[12;38H[?25h[?0c[?25l[?1c[55;198Hl[12;38H[55;198H10[12;39H[1m[7m[35mt[m[55;212H9[12;39H[?25h[?0c[?25l[?1c[55;198Hl [12;39H[55;198H11[12;40H[1m[7m[35mo[m[55;211H40[12;40H[?25h[?0c[?25l[?1c[55;198Hl [12;40H[55;198H12[12;41H[1m[7m[35m [m[55;212H1[12;41H[?25h[?0c[?25l[?1c[55;198Hh [12;41H[55;198H11[12;40H[1m[35m [m[55;212H0[12;40H[?25h[?0c[?25l[?1c[55;198H^[[12;40H[55;198H11[12;40H[55;200H^[[12;40H[55;198H    [12;40H[12;30H[1m[35mwriting to[m[55;1H[K[55;208H12,40[9CAll[12;40H[?25h[?0c[?25l[?1c[55;198Hb[12;40H[55;198H [12;38H[55;211H38[12;38H[?25h[?0c[?25l[?1c[55;198Hb[12;38H[55;198H [12;30H[55;212H0[12;30H[?25h[?0c[?25l[?1c[55;198Hb[12;30H[55;198H [12;24H[55;211H24[12;24H[?25h[?0c[?25l[?1c[55;198Hi[12;24H[55;198H [12;24H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H12,24[9CAll[12;24H[?25h[?0c[?25l[?1c[1m[35mgerror writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[55;212H5[12;25H[?25h[?0c[?25l[?1c[1C[1m[35merror writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[55;212H6[12;26H[?25h[?0c[?25l[?1c[1m[35mterror writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[55;212H7[12;27H[?25h[?0c[?25l[?1c[1m[35mcerror writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[55;212H8[12;28H[?25h[?0c[?25l[?1c[1m[35m error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[55;212H9[12;29H[?25h[?0c[55;1H[K[12;28H[?25l[?1c[55;198H^[[12;28H[55;198H  [12;29H[55;208H12,28[9CAll[12;28H[?25h[?0c[?25l[?1c[55;198H;[12;28H[55;198H [12;28H[?25h[?0c[?25l[?1c[55;198Hw[12;28H[55;198H [12;29H[55;212H9[12;29H[?25h[?0c[?25l[?1c[55;198H^M[12;29H[55;198H  [13;7H[55;209H3,7 [13;7H[?25h[?0c[?25l[?1c[55;198H:[13;7H[55;198H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c"file-copy.c" 54L, 1319C written[?25h[?0c
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ make
gcc -g -Wall -std=c11    file-copy.c   -o file-copy
[01m[Kfile-copy.c:[m[K In function ‚Äò[01m[KdoCopy[m[K‚Äô:
[01m[Kfile-copy.c:11:9:[m[K [01;31m[Kerror: [m[Ktoo few arguments to function ‚Äò[01m[Kferror[m[K‚Äô
     if ([01;31m[Kferror[m[K()) {
         [01;31m[K^~~~~~[m[K
In file included from [01m[Kfile-copy.c:2[m[K:
[01m[K/usr/include/stdio.h:767:12:[m[K [01;36m[Knote: [m[Kdeclared here
 extern int [01;36m[Kferror[m[K (FILE *__stream) __THROW __wur;
            [01;36m[K^~~~~~[m[K
make: *** [<builtin>: file-copy] Error 1
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fg
vim ../lab13_out.txt
[27m[24m[m[H[J[?25l[?1c[1;1HEx1:
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied
[1m[34m~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H39,33[9CAll[39;33H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198H^Z[39;33H[55;1H
[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fgmakevim file-copy.c [5@../lab13_out.txt[C[5Pfile-copy.c[C
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"file-copy.c" 54L, 1319C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[32mstatic[m [1m[32mvoid[m
doCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)
{
  [1m[32mint[m c;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {
    [1m[33mif[m (ferror()) {[12;7Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);
    }
    [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[16;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[17;7Hexit([1m[35m1[m);
    }
  }
}

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc != [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];
  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];
  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);
  [1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  doCopy(srcName, in, destName, out);
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mreturn[m [1m[35m0[m;
}[55;208H13,7[10CAll[13;7H[?25h[?0c[?25l[?1c[55;198Hg[13;7H[?25h[?0c[?25l[?1c[55;198H [13;7H[55;198Hg[13;7H[55;199H^[[13;7H[55;198H   [13;7H[55;198Hg^[[13;7H[55;199H  [13;7H[55;199H^[[13;7H[55;198H   [13;7H[?25h[?0c[?25l[?1c[55;198Hk[13;7H[55;198H [12;7H[55;209H2[12;7H[?25h[?0c[?25l[?1c[55;198Hk[12;7H[55;198H [11;7H[55;209H1[11;7H[?25h[?0c[?25l[?1c[55;198Hw[11;7H[55;198H [11;8H[46m([8C)[m[55;211H8[11;8H[?25h[?0c[?25l[?1c[55;198Hw[11;8H[55;198H [11;9H([8C)[55;211H9[11;9H[?25h[?0c[?25l[?1c[55;198Hw[11;9H[55;198H [11;15H[46m()[m[55;211H15[11;15H[?25h[?0c[?25l[?1c[55;198Hw[11;15H[55;198H [11;19H()) [46m{[14;5H}[m[55;212H9[11;19H[?25h[?0c[?25l[?1c[55;198Hb[11;19H[55;198H [11;15H[46m()[m) {[14;5H}[55;212H5[11;15H[?25h[?0c[?25l[?1c[55;198Hl[11;15H[55;198H [11;16H[55;212H6[11;16H[?25h[?0c[?25l[?1c[55;198Hi[11;16H[55;198H [11;16H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H11,16[9CAll[11;16H[?25h[?0c[?25l[?1c[46mi[m)) {i[46m)[m[55;212H7[11;17H[?25h[?0c[?25l[?1c[46mn[m)) {n[46m)[m[55;212H8[11;18H[?25h[?0c[55;1H[K[11;17H[?25l[?1c[55;198H^[[11;17H[55;198H  [11;18H(in)[55;208H11,17[9CAll[11;17H[?25h[?0c[?25l[?1c[55;198H:[11;17H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"file-copy.c" 54L, 1321C written[11;17H[55;208H11,17[9CAll[55;208H[K[55;208H11,17[9CAll[11;17H[?25h[?0c[?25l[?1c[55;198H:[11;17H[55;1H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[55;2H[K[55;2H[?25h[?0cz[?25l[?1c[?25h[?0c[?25l[?1c      fprintf(stderr, "getc error writing to %s: %s\n", outName, strerror(errno));
      exit(1);
    }
    if (fputc(c, out) == EOF) {
      fprintf(stderr, "error writing to %s: %s\n", outName, strerror(errno));
      exit(1);
    }
  }
}

/** Output number of chars in file specified by single command-line
 *  argument.
 */
int
main(int argc, const char *argv[])
{
  if (argc != 3) {
    fprintf(stderr, "usage: %s SRC_NAME DEST_NAME\n", argv[0]);
    exit(1);
  }
  const char *srcName = argv[1];
  const char *destName = argv[2];
  FILE *in = fopen(srcName, "r");
  if (!in) {
    fprintf(stderr, "cannot read %s: %s\n", srcName, strerror(errno));
    exit(1);
  }
  FILE *out = fopen(destName, "w");
  if (!out) {
    fprintf(stderr, "cannot write %s: %s\n", destName, strerror(errno));
    exit(1);
  }
  doCopy(srcName, in, destName, out);
  if (fclose(in) != 0) {
    fprintf(stderr, "cannot close %s: %s\n", srcName, strerror(errno));
    exit(1);
  }
  if (fclose(out) != 0) {
    fprintf(stderr, "cannot close %s: %s\n", destName, strerror(errno));
    exit(1);
  }
  return 0;
}
[1m[32mPress ENTER or type command to continue[?25h[?0c[?25l[?1c[54;1H[m[1;1H[43L[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[32mstatic[m [1m[32mvoid[m
doCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)
{
  [1m[32mint[m c;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {
    [1m[33mif[m (ferror(in)) {[12;7Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);
    }
    [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[16;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[17;7Hexit([1m[35m1[m);
    }
  }
}

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc != [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];
  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];
  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);
  [1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }[54;1H[46m}[m[55;7H[K[55;208H54,1[10CAll[54;1H[?25h[?0c[?25l[?1c[55;198H^Z[54;1H

[?25h[?0c
[2]+  Stopped                 vim file-copy.c
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ vim file-copy.c fg[Kmakevim file-copy.c make[K
gcc -g -Wall -std=c11    file-copy.c   -o file-copy
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fg
vim file-copy.c
[27m[24m[m[H[J[?25l[?1c[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[32mstatic[m [1m[32mvoid[m
doCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)
{
  [1m[32mint[m c;
  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {
    [1m[33mif[m (ferror(in)) {[12;7Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[13;7Hexit([1m[35m1[m);
    }
    [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[16;7Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[17;7Hexit([1m[35m1[m);
    }
  }
}

[1m[36m/** Output number of chars in file specified by single command-line
 *  argument.
 */[m
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc != [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];
  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];
  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);
  [1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  doCopy(srcName, in, destName, out);
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;208H54,1[10CAll[54;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;198H[K[55;1H:[?25h[?0cq[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fg
vim ../lab13_out.txt
[27m[24m[m[H[J[?25l[?1c[1;1HEx1:
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied
[1m[34m~                                                                                                                                                                                                                                [41;1H~                                                                                                                                                                                                                                [42;1H~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H39,33[9CAll[39;33H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198Hj[39;33H[55;198H [39;33H[?25h[?0c[?25l[?1c[55;198Ho[39;33H[55;198H [40;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H40,1[10CAll[40;1H[K[40;1H[?25h[?0c[?25l[?1c[41;1H[K[55;209H1[41;1H[?25h[?0c[?25l[?1c[46m([mferror(in)[46m)[m[55;212H3[41;13H[?25h[?0c[55;1H[K[41;12H[?25l[?1c[55;198H^[[41;12H[55;198H  [41;13H[55;208H41,12[9CAll[41;12H[?25h[?0c[?25l[?1c[55;198Hk[41;12H[55;198H [40;1H
([10C)[55;209H0,0-1[40;1H[?25h[?0c[?25l[?1c[55;198Hj[40;1H[55;198H [41;12H[46m([10C)[m[55;209H1,12 [41;12H[?25h[?0c[?25l[?1c[55;198HI[41;12H[55;198H [41;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H41,1[10CAll[41;1H[?25h[?0c[?25l[?1c#[46m([mferror(in)[46m)[m[55;211H2[41;2H[?25h[?0c[?25l[?1c [46m([mferror(in)[46m)[m[55;211H3[41;3H[?25h[?0c[?25l[?1cA[46m([mferror(in)[46m)[m[55;211H4[41;4H[?25h[?0c[?25l[?1cd[46m([mferror(in)[46m)[m[55;211H5[41;5H[?25h[?0c[?25l[?1cd[46m([mferror(in)[46m)[m[55;211H6[41;6H[?25h[?0c[?25l[?1c [46m([mferror(in)[46m)[m[55;211H7[41;7H[?25h[?0c[55;1H[K[41;6H[?25l[?1c[55;198H^[[41;6H[55;198H  [41;7H([10C)[55;208H41,6[10CAll[41;6H[?25h[?0c[?25l[?1c[55;198HA[41;6H[55;198H [41;19H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H41,19[9CAll[41;7H[46m([10C)[?25h[?0c[?25l[?1c[m[41;7H([10C)[55;211H20[41;20H[?25h[?0c[?25l[?1ct[55;212H1[41;21H[?25h[?0c[?25l[?1co[55;212H2[41;22H[?25h[?0c[?25l[?1c[55;212H3[41;23H[?25h[?0c[?25l[?1cf[55;212H4[41;24H[?25h[?0c[?25l[?1ci[55;212H5[41;25H[?25h[?0c[?25l[?1cl[55;212H6[41;26H[?25h[?0c[?25l[?1ce[55;212H7[41;27H[?25h[?0c[?25l[?1cc[55;212H8[41;28H[?25h[?0c[?25l[?1c[41;27H[K[55;212H7[41;27H[?25h[?0c[?25l[?1c-[55;212H8[41;28H[?25h[?0c[?25l[?1cc[55;212H9[41;29H[?25h[?0c[?25l[?1co[55;211H30[41;30H[?25h[?0c[?25l[?1cp[55;212H1[41;31H[?25h[?0c[?25l[?1cy[55;212H2[41;32H[?25h[?0c[?25l[?1c.[55;212H3[41;33H[?25h[?0c[?25l[?1cf[55;212H4[41;34H[?25h[?0c[?25l[?1c[41;33H[K[55;212H3[41;33H[?25h[?0c[?25l[?1cc[55;212H4[41;34H[?25h[?0c[55;1H[K[41;33H[?25l[?1c[55;198H^[[41;33H[55;198H  [41;34H[55;208H41,33[9CAll[41;33H[?25h[?0c[?25l[?1c[55;198H:[41;33H[55;198H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 41L, 1657C written[?25h[?0c
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cd ../[Krm -r [Kf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t[C[C[1P t t[K t[KM takefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ 
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ fg
bash: fg: current: no such job
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ vim ../
file-char-count/  file-copy/        lab13_log.txt     lab13_out.txt     no-buffer-copy/   rec-io/           stdin-char-count/ 
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ vim ../lab13_out.txt 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"../lab13_out.txt" 41L, 1657C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1HEx1:
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ ./stdin-char-count <stdin-char-count.c
EOF = -1
205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c
[1m[34m~                                                                                                                                                                                                                                [43;1H~                                                                                                                                                                                                                                [44;1H~                                                                                                                                                                                                                                [45;1H~                                                                                                                                                                                                                                [46;1H~                                                                                                                                                                                                                                [47;1H~                                                                                                                                                                                                                                [48;1H~                                                                                                                                                                                                                                [49;1H~                                                                                                                                                                                                                                [50;1H~                                                                                                                                                                                                                                [51;1H~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H41,33[9CAll[41;33H[?25h[?0c[?25l[?1c[55;198Ho[41;33H[55;198H [42;1H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H42,1[10CAll[42;1H[K[42;1H[?25h[?0c[?25l[?1c[43;1H[K[55;209H3[43;1H[?25h[?0c[?25l[?1cL[55;211H2[43;2H[?25h[?0c[?25l[?1c[43;1H[K[55;211H1[43;1H[?25h[?0c[?25l[?1cE[55;211H2[43;2H[?25h[?0c[?25l[?1cx[55;211H3[43;3H[?25h[?0c[?25l[?1c3[55;211H4[43;4H[?25h[?0c[?25l[?1c[43;3H[K[55;211H3[43;3H[?25h[?0c[?25l[?1c4[55;211H4[43;4H[?25h[?0c[?25l[?1c:[55;211H5[43;5H[?25h[?0c[?25l[?1c[44;1H[K[55;209H4,1[44;1H[?25h[?0c[?25l[?1c[1;54r[1;1H[3M[1;55r[41;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t[42;79H[K[43;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t[43;76H[K[44;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile[44;81H[K[45;1H  54 file-copy.c[45;17H[K[46;1H  10 Makefile[46;14H[K[47;1H  64 total[47;11H[K[48;1Hhsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t[48;61H[K[49;1H10 t[49;5H[K[50;1H[K[52;1H[1m[34m~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H[K[55;208H53,1[10CBot[50;1H[?25h[?0c[55;1H[K[50;1H[?25l[?1c[55;198H^[[50;1H[55;198H  [50;1H[55;208H53,0-1[8CBot[50;1H[?25h[?0c[?25l[?1c[55;198H:[50;1H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 53L, 2070C written[50;1H[55;208H53,0-1[8CBot[55;208H[K[55;208H53,0-1[8CBot[50;1H[?25h[?0c[?25l[?1c[55;198H^Z[50;1H[55;1H
[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cd ../no-buffer-copy/
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ make
gcc -g -Wall -std=c11    no-buffer-copy.c   -o no-buffer-copy
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1

real	0m0.016s
user	0m0.010s
sys	0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real	0m1.698s
user	0m0.929s
sys	0m0.767s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ fg
vim ../lab13_out.txt	(wd: ~/i220a/work/lab13/files/file-copy)
[27m[24m[m[H[J[?25l[?1c[1;1H205
hsloan1@remote04:~/i220a/work/lab13/files/stdin-char-count$ wc stdin-char-count.c
 12  32 205 stdin-char-count.c

Ex2:
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ make
gcc -g -Wall -std=c11    file-char-count.c   -o file-char-count
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count file-char-count.c
566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c

Ex4:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t

[1m[34m~                                                                                                                                                                                                                                [52;1H~                                                                                                                                                                                                                                [53;1H~                                                                                                                                                                                                                                [54;1H~                                                                                                                                                                                                                                [m[55;208H53,0-1[8CBot[50;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198Ho[50;1H[55;198H [51;1H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H54,1[10CBot[51;1H[K[51;1H[?25h[?0c[?25l[?1cE[55;211H2[51;2H[?25h[?0c[?25l[?1cx[55;211H3[51;3H[?25h[?0c[?25l[?1c5[55;211H4[51;4H[?25h[?0c[?25l[?1c:[55;211H5[51;5H[?25h[?0c[?25l[?1c[52;1H[K[55;209H5,1[52;1H[?25h[?0c[?25l[?1c[1;54r[1;1H[8M[1;55r[44;1Hhsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1[45;1H[K[46;1Hreal    0m0.016s[46;17H[K[47;1Huser    0m0.010s
sys     0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real    0m1.698s
user    0m0.929s
sys     0m0.767s[55;208H[K[55;208H65,1[10CBot[54;1H[?25h[?0c[55;1H[K[54;1H[?25l[?1c[55;198H^[[54;1H[55;198H  [54;1H[55;208H65,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;198H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[55;2H[K[55;2H[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c[55;2H[K[55;2H[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 65L, 2388C written[54;1H[55;208H65,0-1[8CBot[55;208H[K[55;208H65,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[55;198H^Z[54;1H

[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt  (wd: ~/i220a/work/lab13/files/file-copy)
(wd now: ~/i220a/work/lab13/files/no-buffer-copy)
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ d[Kcd ../rec-io/
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o gen-rand-points.o gen-rand-points.c
gcc   gen-rand-points.o  -lm -o gen-rand-points
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
gcc -g -Wall -std=c11   -c -o dyn-array.o dyn-array.c
gcc   stat-points.o dyn-array.o  -lm -o stat-points
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./gen-rand-points 100 points.dat
average magnitude = 752.156
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim ../lab13_out.txt	(wd: ~/i220a/work/lab13/files/file-copy)
[27m[24m[m[H[J[?25l[?1c[1;1H566
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ wc file-char-count.c
 27  81 566 file-char-count.c
hsloan1@remote04:~/i220a/work/lab13/files/file-char-count$ ./file-char-count non
cannot read non: No such file or directory

# Added file closes
==8242== Command: ./file-char-count file-char-count.c
==8242==
596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c

Ex4:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t

Ex5:
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1

real    0m0.016s
user    0m0.010s
sys     0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real    0m1.698s
user    0m0.929s
sys     0m0.767s[55;208H65,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198Hj[54;1H[55;198H [54;1H[?25h[?0c[?25l[?1c[55;198Ho[54;1H[55;198H [54;1H
[1m-- INSERT --[m[55;208H[K[55;208H66,1[10CBot[1;54r[54;1H
[1;55r[55;208H[K[55;208H66,1[10CBot[54;1H[?25h[?0c[?25l[?1cE[55;211H2[54;2H[?25h[?0c[?25l[?1cx[55;211H3[54;3H[?25h[?0c[?25l[?1c6[55;211H4[54;4H[?25h[?0c[?25l[?1c:[55;211H5[54;5H[?25h[?0c[?25l[?1c[1;54r[54;1H
[1;55r[55;208H[K[55;208H67,1[10CBot[54;1H[?25h[?0c[?25l[?1c[1;54r[1;1H[7M[1;55r[47;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./gen-rand-points 100 points.dat
average magnitude = 752.156
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49[55;208H[K[55;208H74,1[10CBot[54;1H[?25h[?0c[55;1H[K[54;1H[?25l[?1c[55;198H^[[54;1H[55;198H  [54;1H[55;208H74,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 74L, 2642C written[54;1H[55;208H74,0-1[8CBot[55;208H[K[55;208H74,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[55;198H^Z[54;1H

[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt  (wd: ~/i220a/work/lab13/files/file-copy)
(wd now: ~/i220a/work/lab13/files/rec-io)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim 
dyn-array.c        dyn-array.o        gen-rand-points.c  .gitignore         point2.h           stat-points        stat-points.o      
dyn-array.h        gen-rand-points    gen-rand-points.o  Makefile           points.dat         stat-points.c      
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim gen-rand-points.
gen-rand-points.c  gen-rand-points.o  
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim gen-rand-points.c
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"gen-rand-points.c" 54L, 1357C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m __attribute__(([1m[32mnoreturn[m))
usage([1m[32mconst[m [1m[32mchar[m *progName)
{
  fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m N_POINTS OUT_FILE[m[1m[31m\n[m[1m[35m"[m, progName);
  exit([1m[35m1[m);
}

[1m[32mstatic[m [1m[32mint[m
randCoord([1m[32mvoid[m)
{
  [1m[32menum[m { MAX = [1m[35m1000[m }; [1m[36m//exclusive
[m  [1m[36m//statistically unsound; see
[m  [1m[36m//<https://stackoverflow.com/questions/[m[1m[35m4195958[m[1m[36m/how-do-i-scale-down-numbers-from-rand>[m
  [1m[33mreturn[m rand() % MAX;
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc != [1m[35m3[m) usage(argv[[1m[35m0[m]);
  [1m[32mint[m nPoints = atoi(argv[[1m[35m1[m]);
  [1m[33mif[m (nPoints <= [1m[35m0[m) usage(argv[[1m[35m0[m]);
  [1m[32mconst[m [1m[32mchar[m *outName = argv[[1m[35m2[m];
  [1m[32mFILE[m *out = fopen(outName, [1m[35m"w"[m);
  [1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[32mdouble[m sum = [1m[35m0.0[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < nPoints; i++) {
    Point2 point2 = { .x = randCoord(), .y = randCoord(), };
    [1m[33mif[m (fwrite(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, out) != [1m[35m1[m) {[41;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot write Point2([m[1m[31m%d[m[1m[35m, [m[1m[31m%d[m[1m[35m) to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m,[42;15Hpoint2.x, point2.y, outName, strerror(errno));[43;7Hexit([1m[35m1[m);
    }
    [1m[32mdouble[m mag = magnitudePoint2(&point2);
    sum += mag;
  }
  fprintf([1m[35mstderr[m, [1m[35m"average magnitude = [m[1m[31m%g\n[m[1m[35m"[m, sum/nPoints);
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));
    exit([1m[35m1[m);
  }
  [1m[33mreturn[m [1m[35m0[m;
}[55;208H1,1[11CAll[1;1H[?25h[?0c[?25l[?1c[55;198H/[1;1H[55;1H[K[55;1H/[?25h[?0cf[?25l[?1c[12;3H[7mf[m[55;208H12,3[10CAll[55;208H[K[55;3H[?25h[?0co[?25l[?1c[12;3Hf[32;15H[7mfo[m[55;208H32,15[9CAll[55;208H[K[55;4H[?25h[?0cp[?25l[?1c[32;17H[7mp[m[55;208H32,15[9CAll[55;208H[K[55;5H[?25h[?0ce[?25l[?1c[32;18H[7me[m[55;208H32,15[9CAll[55;208H[K[55;6H[?25h[?0cn[?25l[?1c[32;19H[7mn[m[55;208H32,15[9CAll[55;208H[K[55;7H[?25h[?0c[?25l[?1c[32;15Hfopen[55;208H32,15[9CAll[32;15H[?25h[?0c[?25l[?1c[55;198Hn[32;15H[55;198H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[32;15H[m[55;208H32,15[9CAll[55;208H[K[55;208H32,15[9CAll[32;15H[?25h[?0c[?25l[?1c[55;198Hn[32;15H[55;1H/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[32;15H[m[55;208H32,15[9CAll[55;208H[K[55;208H32,15[9CAll[32;15H[?25h[?0c[?25l[?1c[55;198HA[32;15H[55;198H [32;35H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H32,35[9CAll[32;35H[?25h[?0c[55;1H[K[32;34H[?25l[?1c[55;198H^[[32;34H[55;198H  [32;35H[55;208H32,34[9CAll[32;34H[?25h[?0c[?25l[?1c[55;198Hb[32;34H[55;198H [32;32H[55;212H2[32;32H[?25h[?0c[?25l[?1c[55;198Hi[32;32H[55;198H [32;32H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[1m[35mw"[m);[55;212H3[32;33H[?25h[?0c[?25l[?1c[1m[35m"[m);[32;35H[K[55;212H2[32;32H[?25h[?0c[?25l[?1c[1m[35mb"[m);[55;212H3[32;33H[?25h[?0c[55;1H[K[32;32H[?25l[?1c[55;198H^[[32;32H[55;198H  [32;33H[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[55;198H:[32;32H[55;198H[K[55;1H:[?25h[?0c[?25l[?1c[55;1H[K[32;32H[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[55;198H;[32;32H[55;198H [32;32H[?25h[?0c[?25l[?1c[55;198Hx[32;32H[55;198H [32;32H[55;198Hdl[32;32H[55;198H  [32;32H[1m[35m"[m);[32;35H[K[32;32H[?25h[?0c[?25l[?1c[55;198Hi[32;32H[55;198H [32;32H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[1m[35mu"[m);[55;212H3[32;33H[?25h[?0c[55;1H[K[32;32H[?25l[?1c[55;198H^[[32;32H[55;198H  [32;33H[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[55;198Hu[32;32H[55;1H1 change; before #3  0 seconds ago[55;198H[K[32;32H[1m[35m"[m);[32;35H[K[55;208H32,32[9CAll[55;208H[K[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[55;198Hu[32;32H[55;19H2  3[55;198H[K[32;32H[1m[35mb"[m);[55;208H32,32[9CAll[55;208H[K[55;208H32,32[9CAll[32;32H[?25h[?0c[?25l[?1c[55;198H:[32;32H[55;1H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c"gen-rand-points.c" 54L, 1358C written[?25h[?0c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim sp[Ktat-points.
stat-points.c  stat-points.o  
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim stat-points.c 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"stat-points.c" 76L, 1801C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"r"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  assert(n > [1m[35m0[m);
  [1m[32mdouble[m sum = [1m[35m0[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);
    [1m[32mdouble[m mag = magnitudePoint2(p);
    sum += mag;
  }
  [1m[33mreturn[m sum/n;
}

[1m[32mstatic[m [1m[32mvoid[m
statPoints(DynArray *points, [1m[32mFILE[m *out)
{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {[55;208H1,1[11CTop[1;1H[?25h[?0c[?25l[?1c[55;198H/[1;1H[55;1H[K[55;1H/[?25h[?0cf[?25l[?1c[14;14H[7mf[m[55;208H14,14[9CTop[55;208H[K[55;3H[?25h[?0co[?25l[?1c[14;15H[7mo[m[55;208H14,14[9CTop[55;208H[K[55;4H[?25h[?0cp[?25l[?1c[14;16H[7mp[m[55;208H14,14[9CTop[55;208H[K[55;5H[?25h[?0ce[?25l[?1c[14;17H[7me[m[55;208H14,14[9CTop[55;208H[K[55;6H[?25h[?0cn[?25l[?1c[14;18H[7mn[m[55;208H14,14[9CTop[55;208H[K[55;7H[?25h[?0c[?25l[?1c[14;14Hfopen[55;208H14,14[9CTop[14;14H[?25h[?0c[?25l[?1c[55;198Hn[14;14H[55;198H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[14;14H[m[55;208H14,14[9CTop[55;208H[K[55;208H14,14[9CTop[14;14H[?25h[?0c[?25l[?1c[55;198Hn[14;14H[55;1H/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m/fopen[55;7H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[14;14H[m[55;208H14,14[9CTop[55;208H[K[55;208H14,14[9CTop[14;14H[?25h[?0c[?25l[?1c[55;198HA[14;14H[55;198H [14;33H[55;1H[1m-- INSERT --[m[55;13H[K[55;208H14,33[9CTop[14;33H[?25h[?0c[55;1H[K[14;32H[?25l[?1c[55;198H^[[14;32H[55;198H  [14;33H[55;208H14,32[9CTop[14;32H[?25h[?0c[?25l[?1c[55;198Hh[14;32H[55;198H [14;31H[14;19H[46m([11C)[m[55;212H1[14;31H[?25h[?0c[?25l[?1c[55;198Hh[14;31H[55;198H [14;30H[14;19H([11C)[55;212H0[14;30H[?25h[?0c[?25l[?1c[55;198Hi[14;30H[55;198H [14;30H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H14,30[9CTop[14;30H[?25h[?0c[?25l[?1c[1m[35mb"[m);[55;212H1[14;31H[?25h[?0c[55;1H[K[14;30H[?25l[?1c[55;198H^[[14;30H[55;198H  [14;31H[55;208H14,30[9CTop[14;30H[?25h[?0c[?25l[?1c[55;198HG[14;30H[55;198H [54;1H[1;54r[1;1H[22M[1;55r[33;5H[1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[38;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc != [1m[35m2[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;208H[K[55;208H76,1[10CBot[54;1H[?25h[?0c[?25l[?1c[55;198H^[[54;1H[55;198H  [54;1H[55;198H^[[54;1H[55;198H  [54;1H[?25h[?0c[?25l[?1c[55;198Hk[54;1H[55;198H [53;1H[44;1H{[54;1H}[55;209H5[53;1H[?25h[?0c[?25l[?1c[55;198Hk[53;1H[55;198H [52;1H[55;209H4[52;1H[?25h[?0c[?25l[?1c[55;198Hk[52;1H[55;198H [51;1H[55;209H3[51;1H[?25h[?0c[?25l[?1c[55;198Hk[51;1H[55;198H [50;1H[55;209H2[50;1H[?25h[?0c[?25l[?1c[55;198Hk[50;1H[55;198H [49;1H[55;209H1[49;1H[?25h[?0c[?25l[?1c[55;198Hk[49;1H[55;198H [48;1H[55;209H0[48;1H[?25h[?0c[?25l[?1c[55;198Hk[48;1H[55;198H [47;1H[55;208H69[47;1H[?25h[?0c[?25l[?1c[55;198Hk[47;1H[55;198H [46;1H[55;209H8[46;1H[?25h[?0c[?25l[?1c[55;198Hk[46;1H[55;198H [45;1H[55;209H7[45;1H[?25h[?0c[?25l[?1c[55;198Hj[45;1H[55;198H [46;1H[55;209H8[46;1H[?25h[?0c[?25l[?1c[55;198Hk[46;1H[55;198H [45;1H[55;209H7[45;1H[?25h[?0c[?25l[?1c[55;198Hw[45;1H[55;198H [45;3H[55;211H3[45;3H[?25h[?0c[?25l[?1c[55;198Hw[45;3H[55;198H [45;6H[46m([9C)[m[55;211H6[45;6H[?25h[?0c[?25l[?1c[55;198Hw[45;6H[55;198H [45;7H([9C)[55;211H7[45;7H[?25h[?0c[?25l[?1c[55;198Hw[45;7H[55;198H [45;12H[55;211H12[45;12H[?25h[?0c[?25l[?1c[55;198Hw[45;12H[55;198H [45;15H[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hw[45;15H[55;198H [45;16H[45;6H[46m([9C)[m[55;212H6[45;16H[?25h[?0c[?25l[?1c[55;198Hw[45;16H[55;198H [45;18H[45;6H([9C) [46m{[48;3H}[m[55;212H8[45;18H[?25h[?0c[?25l[?1c[55;198Hb[45;18H[55;198H [45;16H[45;6H[46m([9C)[m {[48;3H}[55;212H6[45;16H[?25h[?0c[?25l[?1c[55;198Hj[45;16H[55;198H [46;16H[45;6H([9C)[55;209H8[46;16H[?25h[?0c[?25l[?1c[55;198Hj[46;16H[55;198H [47;12H[55;209H9,12[47;12H[?25h[?0c[?25l[?1c[55;198Hj[47;12H[55;198H [48;3H[45;18H[46m{[48;3H}[m[55;208H70,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hj[48;3H[55;198H [49;16H[45;18H{[48;3H}[55;209H1,16[49;16H[?25h[?0c[?25l[?1c[55;198Hj[49;16H[55;198H [50;16H[55;209H2[50;16H[?25h[?0c[?25l[?1c[55;198Hj[50;16H[55;198H [51;16H[55;209H3[51;16H[?25h[?0c[?25l[?1c[55;198Hj[51;16H[55;198H [52;16H[55;209H4[52;16H[?25h[?0c[?25l[?1c[55;198Hk[52;16H[55;198H [51;16H[55;209H3[51;16H[?25h[?0c[?25l[?1c[55;198Hk[51;16H[55;198H [50;16H[55;209H2[50;16H[?25h[?0c[?25l[?1c[55;198Hk[50;16H[55;198H [49;16H[55;209H1[49;16H[?25h[?0c[?25l[?1c[55;198Hk[49;16H[55;198H [48;3H[45;18H[46m{[48;3H}[m[55;209H0,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;12H[45;18H{[48;3H}[55;208H69,12[47;12H[?25h[?0c[?25l[?1c[55;198Hk[47;12H[55;198H [46;16H[55;209H8,16[46;16H[?25h[?0c[?25l[?1c[55;198Hk[46;16H[55;198H [45;16H[45;6H[46m([9C)[m[55;209H7[45;16H[?25h[?0c[?25l[?1c[55;198Hb[45;16H[55;198H [45;15H[45;6H([9C)[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hb[45;15H[55;198H [45;12H[55;212H2[45;12H[?25h[?0c[?25l[?1c[55;198Hw[45;12H[55;198H [45;15H[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hb[45;15H[55;198H [45;12H[55;212H2[45;12H[?25h[?0c[?25l[?1c[55;198Hw[45;12H[55;198H [45;15H[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hb[45;15H[55;198H [45;12H[55;212H2[45;12H[?25h[?0c[?25l[?1c[55;198Hl[45;12H[55;198H [45;13H[55;212H3[45;13H[?25h[?0c[?25l[?1c[55;198Hl[45;13H[55;198H [45;14H[55;212H4[45;14H[?25h[?0c[?25l[?1c[55;198Hl[45;14H[55;198H [45;15H[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hh[45;15H[55;198H [45;14H[55;212H4[45;14H[?25h[?0c[?25l[?1c[55;198Hi[45;14H[55;198H [45;14H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H67,14[9CBot[45;14H[?25h[?0c[?25l[?1c [1m[35m2[m) {[45;18H[K[55;212H3[45;13H[?25h[?0c[?25l[?1c [1m[35m2[m) {[45;17H[K[55;212H2[45;12H[?25h[?0c[?25l[?1c< [1m[35m2[m) {[55;212H3[45;13H[?25h[?0c[55;1H[K[45;12H[?25l[?1c[55;198H^[[45;12H[55;198H  [45;13H[55;208H67,12[9CBot[45;12H[?25h[?0c[?25l[?1c[55;198Hj[45;12H[55;198H [46;12H[46m([49C)[m[55;209H8[46;12H[?25h[?0c[?25l[?1c[55;198Hw[46;12H[55;198H [46;13H([49C)[55;212H3[46;13H[?25h[?0c[?25l[?1c[55;198Hw[46;13H[55;198H [46;19H[55;212H9[46;19H[?25h[?0c[?25l[?1c[55;198Hw[46;19H[55;198H [46;21H[55;211H21[46;21H[?25h[?0c[?25l[?1c[55;198Hw[46;21H[55;198H [46;22H[55;212H2[46;22H[?25h[?0c[?25l[?1c[55;198Hw[46;22H[55;198H [46;27H[55;212H7[46;27H[?25h[?0c[?25l[?1c[55;198Hw[46;27H[55;198H [46;29H[55;212H9[46;29H[?25h[?0c[?25l[?1c[55;198Hw[46;29H[55;198H [46;30H[55;211H30[46;30H[?25h[?0c[?25l[?1c[55;198Hw[46;30H[55;198H [46;32H[55;212H2[46;32H[?25h[?0c[?25l[?1c[55;198Hw[46;32H[55;198H [46;50H[55;211H50[46;50H[?25h[?0c[?25l[?1c[55;198Hb[46;50H[55;198H [46;32H[55;211H32[46;32H[?25h[?0c[?25l[?1c[55;198Hi[46;32H[55;198H [46;32H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H68,32[9CBot[46;32H[?25h[?0c[?25l[?1c[1m[35m<BINARY_POINTS_FILE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H3[46;33H[?25h[?0c[?25l[?1c[1m[35mBINARY_POINTS_FILE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[46;64H[K[55;212H2[46;32H[?25h[?0c[?25l[?1c[1m[35m[BINARY_POINTS_FILE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H3[46;33H[?25h[?0c[?25l[?1c[1m[35mBINARY_POINTS_FILE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[46;64H[K[55;212H2[46;32H[?25h[?0c[55;1H[K[46;31H[?25l[?1c[55;198H^[[46;31H[55;198H  [46;32H[55;208H68,31[9CBot[46;31H[?25h[?0c[?25l[?1c[55;198Hw[46;31H[55;198H [46;32H[55;212H2[46;32H[?25h[?0c[?25l[?1c[55;198Hw[46;32H[55;198H [46;50H[55;211H50[46;50H[?25h[?0c[?25l[?1c[55;198Hw[46;50H[55;198H [46;51H[55;212H1[46;51H[?25h[?0c[?25l[?1c[55;198Hb[46;51H[55;198H [46;50H[55;212H0[46;50H[?25h[?0c[?25l[?1c[55;198Hi[46;50H[55;198H [46;50H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H68,50[9CBot[46;50H[?25h[?0c[?25l[?1c[1m[35m [m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H1[46;51H[?25h[?0c[?25l[?1c[1m[35m[[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H2[46;52H[?25h[?0c[?25l[?1c[1m[35mO[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H3[46;53H[?25h[?0c[?25l[?1c[1m[35mU[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H4[46;54H[?25h[?0c[?25l[?1c[1m[35mT[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H5[46;55H[?25h[?0c[?25l[?1c[1m[35mP[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H6[46;56H[?25h[?0c[?25l[?1c[1m[35mU[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H7[46;57H[?25h[?0c[?25l[?1c[1m[35mT[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H8[46;58H[?25h[?0c[?25l[?1c[1m[35m_[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H9[46;59H[?25h[?0c[?25l[?1c[1m[35mF[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;211H60[46;60H[?25h[?0c[?25l[?1c[1m[35mI[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H1[46;61H[?25h[?0c[?25l[?1c[1m[35mL[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H2[46;62H[?25h[?0c[?25l[?1c[1m[35mE[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[55;212H3[46;63H[?25h[?0c[?25l[?1c[1m[35m][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[46;51H[1m[35m[46m[[11C][m[55;212H4[46;64H[?25h[?0c[55;1H[K[46;63H[?25l[?1c[55;198H^[[46;63H[55;198H  [46;64H[55;208H68,63[9CBot[46;63H[?25h[?0c[?25l[?1c[55;198Hj[46;63H[55;198H [47;12H[46;51H[1m[35m[[11C][m[55;209H9,12[47;12H[?25h[?0c[?25l[?1c[55;198Hj[47;12H[55;198H [48;3H[45;17H[46m{[48;3H}[m[55;208H70,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;12H[45;17H{[48;3H}[55;208H69,12[47;12H[?25h[?0c[?25l[?1c[55;198Hj[47;12H[55;198H [48;3H[45;17H[46m{[48;3H}[m[55;208H70,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hj[48;3H[55;198H [49;49H[45;17H{[48;3H}[55;209H1,49[49;49H[?25h[?0c[?25l[?1c[55;198Hj[49;49H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hj[50;30H[55;198H [51;29H[55;209H3,29[51;29H[?25h[?0c[?25l[?1c[55;198Hj[51;29H[55;198H [52;23H[55;209H4,23[52;23H[?25h[?0c[?25l[?1c[55;198Hk[52;23H[55;198H [51;29H[55;209H3,29[51;29H[?25h[?0c[?25l[?1c[55;198Hk[51;29H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hj[50;30H[55;198H [51;29H[55;209H3,29[51;29H[?25h[?0c[?25l[?1c[55;198Hk[51;29H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hk[50;30H[55;198H [49;49H[55;209H1,49[49;49H[?25h[?0c[?25l[?1c[55;198Hk[49;49H[55;198H [48;3H[45;17H[46m{[48;3H}[m[55;209H0,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;12H[45;17H{[48;3H}[55;208H69,12[47;12H[?25h[?0c[?25l[?1c[55;198Hk[47;12H[55;198H [46;63H[46;51H[1m[35m[46m[[11C][m[55;209H8,63[46;63H[?25h[?0c[?25l[?1c[55;198Hk[46;63H[55;198H [45;17H[46m{[m[46;51H[1m[35m[[11C][m

  [46m}[m[55;209H7,17[45;17H[?25h[?0c[?25l[?1c[55;198Hk[45;17H[55;198H [44;1H[46m{[m[45;17H{[48;3H}[54;1H[46m}[m[55;209H6,1 [44;1H[?25h[?0c[?25l[?1c[55;198Hk[44;1H[55;198H [43;34Hmain[46m([28C)[m
{[54;1H}[55;209H5,34[43;34H[?25h[?0c[?25l[?1c[55;198Hk[43;34H[55;198H [42;3H
main([28C)[55;209H4,3 [42;3H[?25h[?0c[?25l[?1c[55;198Hk[42;3H[55;198H [41;1H[55;209H3,0-1[41;1H[?25h[?0c[?25l[?1c[55;198Hk[41;1H[55;198H [40;1H[29;1H[46m{[40;1H}[m[55;209H2,1  [40;1H[?25h[?0c[?25l[?1c[55;198Hk[40;1H[55;198H [39;3H[29;1H{[32;14H[46m{[39;3H}[m
}[55;209H1,3[39;3H[?25h[?0c[?25l[?1c[55;198Hk[39;3H[55;198H [38;39H[32;14H{[39;3H}[55;209H0,39[38;39H[?25h[?0c[?25l[?1c[55;198Hk[38;39H[55;198H [37;63H[55;208H59,63[37;63H[?25h[?0c[?25l[?1c[55;198Hk[37;63H[55;198H [36;63H[55;209H8[36;63H[?25h[?0c[?25l[?1c[55;198Hj[36;63H[55;198H [37;63H[55;209H9[37;63H[?25h[?0c[?25l[?1c[55;198Hj[37;63H[55;198H [38;39H[55;208H60,39[38;39H[?25h[?0c[?25l[?1c[55;198Hj[38;39H[55;198H [39;3H[32;14H[46m{[39;3H}[m[55;209H1,3 [39;3H[?25h[?0c[?25l[?1c[55;198Hk[39;3H[55;198H [38;39H[32;14H{[39;3H}[55;209H0,39[38;39H[?25h[?0c[?25l[?1c[55;198Hj[38;39H[55;198H [39;3H[32;14H[46m{[39;3H}[m[55;209H1,3 [39;3H[?25h[?0c[?25l[?1c[55;198Hk[39;3H[55;198H [38;39H[32;14H{[39;3H}[55;209H0,39[38;39H[?25h[?0c[?25l[?1c[55;198Hk[38;39H[55;198H [37;63H[55;208H59,63[37;63H[?25h[?0c[?25l[?1c[55;198Hk[37;63H[55;198H [36;63H[55;209H8[36;63H[?25h[?0c[?25l[?1c[55;198Hj[36;63H[55;198H [37;63H[55;209H9[37;63H[?25h[?0c[?25l[?1c[55;198Hj[37;63H[55;198H [38;39H[55;208H60,39[38;39H[?25h[?0c[?25l[?1c[55;198H;[38;39H[55;198H [38;39H[?25h[?0c[?25l[?1c[55;198Hw[38;39H[55;198H [39;3H[32;14H[46m{[39;3H}[m[55;209H1,3 [39;3H[?25h[?0c[?25l[?1c[55;198Hk[39;3H[55;198H [38;3H[32;14H{[39;3H}[55;209H0[38;3H[?25h[?0c[?25l[?1c[55;198Hk[38;3H[55;198H [37;3H[55;208H59[37;3H[?25h[?0c[?25l[?1c[55;198Hw[37;3H[55;198H [37;5H[55;211H5[37;5H[?25h[?0c[?25l[?1c[55;198Hw[37;5H[55;198H [37;12H[46m([38;38H)[m[55;211H12[37;12H[?25h[?0c[?25l[?1c[55;198Hw[37;12H[55;198H [37;13H([38;38H)[55;212H3[37;13H[?25h[?0c[?25l[?1c[55;198Hw[37;13H[55;198H [37;16H[55;212H6[37;16H[?25h[?0c[?25l[?1c[55;198Hb[37;16H[55;198H [37;13H[55;212H3[37;13H[?25h[?0c[?25l[?1c[55;198HG[37;13H[55;198H [54;1H[44;1H[46m{[54;1H}[m[55;208H76,1 [54;1H[?25h[?0c[?25l[?1c[55;198Hk[54;1H[55;198H [53;1H[44;1H{[54;1H}[55;209H5[53;1H[?25h[?0c[?25l[?1c[55;198Hk[53;1H[55;198H [52;1H[55;209H4[52;1H[?25h[?0c[?25l[?1c[55;198Hk[52;1H[55;198H [51;1H[55;209H3[51;1H[?25h[?0c[?25l[?1c[55;198Hw[51;1H[55;198H [51;3H[55;211H3[51;3H[?25h[?0c[?25l[?1c[55;198Hw[51;3H[55;198H [51;13H[46m([14C)[m[55;211H13[51;13H[?25h[?0c[?25l[?1c[55;198Hw[51;13H[55;198H [51;14H([14C)[55;212H4[51;14H[?25h[?0c[?25l[?1c[55;198Hw[51;14H[55;198H [51;20H[55;211H20[51;20H[?25h[?0c[?25l[?1c[55;198Hw[51;20H[55;198H [51;22H[55;212H2[51;22H[?25h[?0c[?25l[?1c[55;198Hb[51;22H[55;198H [51;20H[55;212H0[51;20H[?25h[?0c[?25l[?1c[55;198Hw[51;20H[55;198H [51;22H[55;212H2[51;22H[?25h[?0c[?25l[?1c[55;198Hi[51;22H[55;198H [51;22H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H73,22[9CBot[51;22H[?25h[?0c[?25l[?1c([1m[35mstdout[m);[51;22H[46m([6C)[m[55;212H3[51;23H[?25h[?0c[?25l[?1csstdou[46mt[m);[51;22H(sstdout[55;212H4[51;24H[?25h[?0c[?25l[?1c[1m[35mstdout[m);[51;31H[K[51;22H[46m([6C)[m[55;212H3[51;23H[?25h[?0c[?25l[?1castdou[46mt[m);[51;22H(astdout[55;212H4[51;24H[?25h[?0c[?25l[?1crstdout);[55;212H5[51;25H[?25h[?0c[?25l[?1cgstdout);[55;212H6[51;26H[?25h[?0c[?25l[?1ccstdout);[55;212H7[51;27H[?25h[?0c[?25l[?1c [1m[35mstdout[m);[55;212H8[51;28H[?25h[?0c[?25l[?1c=[1m[35mstdout[m);[55;212H9[51;29H[?25h[?0c[?25l[?1c=[1m[35mstdout[m);[55;211H30[51;30H[?25h[?0c[?25l[?1c [1m[35mstdout[m);[55;212H1[51;31H[?25h[?0c[?25l[?1c3stdout);[55;212H2[51;32H[?25h[?0c[?25l[?1c[1m[35m3[m)[1m[35mstdout[m);[51;22H[46m([9C)[m[55;212H3[51;33H[?25h[?0c[?25l[?1c [1m[35mstdout[m);[51;22H([9C)[55;212H4[51;34H[?25h[?0c[55;1H[K[51;33H[?25l[?1c[55;198H^[[51;33H[55;198H  [51;34H[55;208H73,33[9CBot[51;33H[?25h[?0c[?25l[?1c[55;198Hk[51;33H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hk[50;30H[55;198H [49;33H[46m([14C)[m[55;209H1,33[49;33H[?25h[?0c[?25l[?1c[55;198Hk[49;33H[55;198H [48;3H[45;17H[46m{[48;3H}[m[49;33H([14C)[55;209H0,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;12H[45;17H{[48;3H}[55;208H69,12[47;12H[?25h[?0c[?25l[?1c[55;198Hk[47;12H[55;198H [46;33H[55;209H8,33[46;33H[?25h[?0c[?25l[?1c[55;198Hj[46;33H[55;198H [47;12H[55;209H9,12[47;12H[?25h[?0c[?25l[?1c[55;198Hj[47;12H[55;198H [48;3H[45;17H[46m{[48;3H}[m[55;208H70,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;12H[45;17H{[48;3H}[55;208H69,12[47;12H[?25h[?0c[?25l[?1c[55;198Hk[47;12H[55;198H [46;33H[55;209H8,33[46;33H[?25h[?0c[?25l[?1c[55;198Hk[46;33H[55;198H [45;17H[46m{[48;3H}[m[55;209H7,17[45;17H[?25h[?0c[?25l[?1c[55;198Hh[45;17H[55;198H [45;16H {[48;3H}[55;212H6[45;16H[?25h[?0c[?25l[?1c[55;198Hh[45;16H[55;198H [45;15H[45;6H[46m([8C)[m[55;212H5[45;15H[?25h[?0c[?25l[?1c[55;198Hi[45;15H[55;198H [45;15H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H67,15[9CBot[45;15H[?25h[?0c[?25l[?1c[46m [m) { [46m)[m[55;212H6[45;16H[?25h[?0c[?25l[?1c[46m|[m) {|[46m)[m[55;212H7[45;17H[?25h[?0c[?25l[?1c[46m|[m) {|[46m)[m[55;212H8[45;18H[?25h[?0c[?25l[?1c[46m [m) { [46m)[m[55;212H9[45;19H[?25h[?0c[?25l[?1c[46ma[m) {a[46m)[m[55;211H20[45;20H[?25h[?0c[?25l[?1c[46mr[m) {r[46m)[m[55;212H1[45;21H[?25h[?0c[?25l[?1c[46mg[m) {g[46m)[m[55;212H2[45;22H[?25h[?0c[?25l[?1c[46mc[m) {c[46m)[m[55;212H3[45;23H[?25h[?0c[?25l[?1c[46m [m) { [46m)[m[55;212H4[45;24H[?25h[?0c[?25l[?1c[46m>[m) {>[46m)[m[55;212H5[45;25H[?25h[?0c[?25l[?1c[46m [m) { [46m)[m[55;212H6[45;26H[?25h[?0c[?25l[?1c[1m[35m[46m3[m) {[1m[35m3[m[46m)[m[55;212H7[45;27H[?25h[?0c[55;1H[K[45;26H[?25l[?1c[55;198H^[[45;26H[55;198H  [45;27H[45;6H([20C)[55;208H67,26[9CBot[45;26H[?25h[?0c[?25l[?1c[55;198Hj[45;26H[55;198H [46;26H[55;209H8[46;26H[?25h[?0c[?25l[?1c[55;198Hj[46;26H[55;198H [47;12H[55;209H9,12[47;12H[?25h[?0c[?25l[?1c[55;198Hj[47;12H[55;198H [48;3H[45;29H[46m{[48;3H}[m[55;208H70,3 [48;3H[?25h[?0c[?25l[?1c[55;198Hj[48;3H[55;198H [49;26H[45;29H{[48;3H}[55;209H1,26[49;26H[?25h[?0c[?25l[?1c[55;198Hj[49;26H[55;198H [50;26H[55;209H2[50;26H[?25h[?0c[?25l[?1c[55;198Hj[50;26H[55;198H [51;26H[55;209H3[51;26H[?25h[?0c[?25l[?1c[55;198Hj[51;26H[55;198H [52;23H[55;209H4,23[52;23H[?25h[?0c[?25l[?1c[55;198Hk[52;23H[55;198H [51;26H[55;209H3,26[51;26H[?25h[?0c[?25l[?1c[55;198Hw[51;26H[55;198H [51;28H[55;212H8[51;28H[?25h[?0c[?25l[?1c[55;198Hw[51;28H[55;198H [51;31H[55;211H31[51;31H[?25h[?0c[?25l[?1c[55;198Hw[51;31H[55;198H [51;32H[51;22H[46m([9C)[m[55;212H2[51;32H[?25h[?0c[?25l[?1c[55;198Hl[51;32H[55;198H [51;33H[51;22H([9C)[55;212H3[51;33H[?25h[?0c[?25l[?1c[55;198Hi[51;33H[55;198H [51;33H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H73,33[9CBot[51;33H[?25h[?0c[?25l[?1c  [1m[35mstdout[m);[55;212H4[51;34H[?25h[?0c[?25l[?1c? [1m[35mstdout[m[1m[37m[41m);[52;23H;[53;11H;
}[m[55;212H5[51;35H[?25h[?0c[?25l[?1c  [1m[35mstdout[m[1m[37m[41m);[m[55;212H6[51;36H[?25h[?0c[?25l[?1c[1m[35mstdout[m[1m[37m[41m);[m[51;44H[K[55;212H5[51;35H[?25h[?0c[?25l[?1c  [1m[35mstdout[m[1m[37m[41m);[m[55;212H6[51;36H[?25h[?0c[55;1H[K[51;35H[?25l[?1c[55;198H^[[51;35H[55;198H  [51;36H[55;208H73,35[9CBot[51;35H[?25h[?0c[?25l[?1c[55;198Hk[51;35H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hj[50;30H[55;198H [51;35H[55;209H3,35[51;35H[?25h[?0c[?25l[?1c[55;198Hl[51;35H[55;198H [51;36H[55;212H6[51;36H[?25h[?0c[?25l[?1c[55;198Hk[51;36H[55;198H [50;30H[55;209H2,30[50;30H[?25h[?0c[?25l[?1c[55;198Hk[50;30H[55;198H [49;36H[55;209H1,36[49;36H[?25h[?0c[?25l[?1c[55;198Hk[49;36H[55;198H [48;3H[45;29H[46m{[48;3H}[m[55;209H0,3 [48;3H[?25h[?0c[?25l[?1c[55;198Ho[48;3H[55;198H [49;3H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H71,3[10C95%[49;54r[49;1H[L[1;55r[55;208H[K[55;208H71,3[10C95%[45;29H{[48;3H}
  [?25h[?0c[?25l[?1ci[55;211H4[49;4H[?25h[?0c[?25l[?1c[1m[33mif[m[55;211H5[49;5H[?25h[?0c[?25l[?1c[55;211H6[49;6H[?25h[?0c[?25l[?1c[1m[37m[41m)[m[55;211H7[49;7H[?25h[?0c[?25l[?1c[49;6H[K[55;211H6[49;6H[?25h[?0c[?25l[?1c([55;211H7[49;7H[?25h[?0c[?25l[?1ca[55;211H8[49;8H[?25h[?0c[?25l[?1cr[55;211H9[49;9H[?25h[?0c[?25l[?1cg[55;211H10[49;10H[?25h[?0c[?25l[?1cc[55;212H1[49;11H[?25h[?0c[?25l[?1c[55;212H2[49;12H[?25h[?0c[?25l[?1c=[55;212H3[49;13H[?25h[?0c[?25l[?1c=[55;212H4[49;14H[?25h[?0c[?25l[?1c[55;212H5[49;15H[?25h[?0c[?25l[?1c[1m[35m3[m[55;212H6[49;16H[?25h[?0c[?25l[?1c)[49;6H[46m([9C)[m[55;212H7[49;17H[?25h[?0c[?25l[?1c[49;6H([9C)[55;212H8[49;18H[?25h[?0c[?25l[?1c{[55;212H9[49;19H[?25h[?0c[?25l[?1c[1;54r[54;1H
[1;55r[49;54r[49;1H[L[1;55r[55;208H[K[55;208H72,4-11[7C95%[49;11H[?25h[?0c[?25l[?1c[1;54r[54;1H
[1;55r[49;54r[49;1H[L[1;55r[55;208H[K[55;208H73,4-11[7C96%[49;11H[?25h[?0c[?25l[?1c  }[47;18H[46m{

[m  [46m}[m[55;212H   [49;4H[?25h[?0ck[?25l[?1c[55;198H^[[49;4H[55;200Hk[49;4H[55;198H   [49;4H [55;1H[K[55;208H73,3[10C96%[49;3H[?25h[?0c[?25l[?1c[55;198Hk[49;3H[55;198H [48;1H[47;18H{

  }[55;209H2,0-1[48;1H[?25h[?0c[?25l[?1c[55;198Hk[48;1H[55;198H [47;3H[55;209H1,3  [47;3H[?25h[?0c[?25l[?1c[55;198Hj[47;3H[55;198H [48;1H[55;209H2,0-1[48;1H[?25h[?0c[?25l[?1c[55;198Hk[48;1H[55;198H [47;3H[55;209H1,3  [47;3H[?25h[?0c[?25l[?1c[55;198Hk[47;3H[55;198H [46;3H[43;29H[46m{[46;3H}[m[55;209H0[46;3H[?25h[?0c[?25l[?1c[55;198Ho[46;3H[55;198H [47;3H[55;1H[1m-- INSERT --[m[55;208H[K[55;208H71,3[10C92%[47;54r[47;1H[L[1;55r[55;208H[K[55;208H71,3[10C92%[43;29H{[46;3H}
  [?25h[?0c[55;1H[K[47;1H[?25l[?1c[55;198H^[[47;1H[55;198H  [47;3H[55;208H71,0-1[8C92%[47;1H[?25h[?0c[?25l[?1c[55;198H^W[47;1H[?25h[?0c[?25l[?1c[55;200Hv[47;1H[55;198H[K[46;1H[1;3H}         [100C[7m|[m
}  [109C[7m|[m
 [111C[7m|[m
[1m[32mstatic[m [1m[32mint[m[102C[7m|[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[67C[7m|[m
{                                            [67C[7m|[m
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[61C[7m|[m
}                                                  [61C[7m|[m
 [111C[7m|[m
[1m[32mstatic[m [1m[32mdouble[m[99C[7m|[m
averagePoints([1m[32mconst[m DynArray *points)[75C[7m|[m
{                                    [75C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  assert(n > [1m[35m0[m);                          [70C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i[6Ci < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);                [60C[7m|[m
    sum += mag;                     [76C[7m|[m
  }            [97C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}              [97C[7m|[m
 [111C[7m|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{                                      [73C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {                            [70C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m[31;13Hax[46Cn - [1m[35m1[m));[44C[7m|[m[32;12Haverage = averagePoints(points);                         [44C[7m|[m[33;12Hmedian = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,  [43C[7m|[m
            min, average, median, max);                            [45C[7m|[m
  }[9C                           [73C[7m|[m
}  [109C[7m|[m
 [111C[7m|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{                                 [78C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);                                                                 [35C[7m|[m
  }         [100C[7m|[m
   [109C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m
                  [94C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);                   [63C[7m|[m
  stat[7Cpoints, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m[68C[7m|[m
  freeDynArray(points)[1m[37m[41m;[m                     [68C[7m|[m
[1m[7mstat-points.c [+]                                                                             71,0-1         92% [m[1;116H}[2;114H}[4;114H[1m[32mstatic[m [1m[32mint[m[5;114HcomparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[6;114H{[7;116H[1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[8;114H}[10;114H[1m[32mstatic[m [1m[32mdouble[m[11;114HaveragePoints([1m[32mconst[m DynArray *points)[12;114H{[13;116H[1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[14;116Hassert(n > [1m[35m0[m);[15;116H[1m[32mdouble[m sum = [1m[35m0[m;[16;116H[1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[17;118H[1m[32mconst[m Point2 *p = getElementDynArray(points, i);[18;118H[1m[32mdouble[m mag = magnitudePoint2(p);[19;118Hsum += mag;[20;116H}[21;116H[1m[33mreturn[m sum/n;[22;114H}[24;114H[1m[32mstatic[m [1m[32mvoid[m[25;114HstatPoints(DynArray *points, [1m[32mFILE[m *out)[26;114H{[27;116HsortDynArray(points, comparePoint2);[28;116H[1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[29;116H[1m[33mif[m (n > [1m[35m0[m) {[30;118H[1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[31;118H[1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[32;118H[1m[32mdouble[m average = averagePoints(points);[33;118H[1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[34;118Hfprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[35;126Hmin, average, median, max);[36;116H}[37;114H}[39;114H[1m[32mint[m[40;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[41;114H{[42;116H[1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[43;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[44;118Hexit([1m[35m1[m);[45;116H}[47;116H[1m[33mif[m (argc == [1m[35m3[m) {[49;116H}[50;116HDynArray *points = newDynArray([1m[33msizeof[m(Point2));[51;116HreadPoints(argv[[1m[35m1[m], points);[52;116HstatPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m[53;116HfreeDynArray(points)[1m[37m[41m;[m[54;114H[7mstat-points.c [+]                                                                             71,0-1         92%[46;1H[?25h[?0c[?25l[?1c[m[55;215H^W[46;1H[?25h[?0c[?25l[?1c[55;217Hl[46;1H[55;215H   [46;114H[54;1H[7mstat-points.c [+]                                                                             71,0-1         92% [m[1m[7mstat-points.c [+]                                                                             71,0-1         92%[46;114H[?25h[?0c[?25l[?1c[m[55;215H;[46;114H[55;215H [46;114H[?25h[?0c[?25l[?1c[55;215He[46;114H[55;215H [47;117H[54;209H[1m[7m2,4  [47;117H[?25h[?0c[?25l[?1c[m[55;215H<20>[47;117H[55;215H    [47;118H[54;211H[1m[7m5[47;118H[?25h[?0c[?25l[?1c[m[55;215H:[47;118H[55;215H[K[55;1H:[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0c[?25l[?1c[55;1H[K[47;118H[?25h[?0c[?25l[?1c[55;215Hu[47;118H[55;1H1 line less; before #9  5 seconds ago[55;215H[K[45;116H[42;1H    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    
  freeDynArray(points)[1m[37m[41m;[m                                                                                         
                                                                                                                [42;3H[1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }[53;3H[1m[33mreturn[m [1m[35m0[m[1m[37m[41m;[m[42;114H    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   [43;114H    exit([1m[35m1[m);                                                                                                    [44;114H  }                                                                                                             [45;114H                                                                                                                [46;114H  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              [47;114H                                                                                                                [48;114H  }                                                                                                             [49;114H  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               [50;114H  readPoints(argv[[1m[35m1[m], points);                                                                                  [51;114H  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    [52;114H  freeDynArray(points)[1m[37m[41m;[m                                                                                         [53;114H                                                                                                                [42;116H[1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) [46m{[m[42;143H[K[43;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[44;116H  exit([1m[35m1[m);[45;116H[46m}[m[53;116H[1m[33mreturn[m [1m[35m0[m[1m[37m[41m;[m[55;1H[K[55;1H1 line less; before #9  5 seconds ago[54;209H[1m[7m0,3[12C6[45;116H[?25h[?0c[?25l[?1c[m[55;215H^R[45;116H[55;3Hmore line; after #9  6 seconds ago[55;37H[K[45;116H
                                                                                                                
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    
  freeDynArray(points)[1m[37m[41m;[m                                                                                         [46;1H[113C                                                                                                                [47;114H  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              [48;114H                                                                                                                [49;114H  }                                                                                                             [50;114H  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               [51;114H  readPoints(argv[[1m[35m1[m], points);                                                                                  [52;114H  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    [53;114H  freeDynArray(points)[1m[37m[41m;[m                                                                                         [55;1H[K[55;1H1 more line; after #9  6 seconds ago[54;224H[1m[7m2[45;116H[?25h[?0c[?25l[?1c[m[55;215H;[45;116H[55;215H [45;116H[?25h[?0c[?25l[?1c[55;215H:[45;116H[55;1H[K[55;1H:[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0c.[?25l[?1c[?25h[?0c.[?25l[?1c[?25h[?0c/[?25l[?1c[?25h[?0c...[?25l[?1cfile-char-count/...[55;7H[K[55;7H[54;1H[1m[7mfile-char-count/  file-copy/  lab13_log.txt  lab13_out.txt  no-buffer-copy/  rec-io/  stdin-char-count/                           [77C    [11C   [m[55;7H...[54;1H[30m[43mfile-char-count/[m[55;7Hfile-char-count/[?25h[?0c...[54;1H[1m[7mfile-char-count/[m[2C[30m[43mfile-copy/[?25l[?1c[m[55;13Hopy/[55;17H[K[55;17H[?25h[?0c[54;1H[7mstat-points.c [+]                                                                             [?25l[?1c70,1           92% [m[1m[7mstat-points.c [+][77C70,3[11C92%[55;1H[m"../file-copy/" Illegal file name[1;114H[1m[36m" ============================================================================[2;114H" Netrw Directory Listing                                        [m[1m[36m(netrw v156)[m[3;114H[1m[36m"   /import/linux/home1/hsloan1/git-repos/i220a/work/lab13/files/file-copy[4;114H"   Sorted by[m[1m[33m      name[m[5;114H[1m[36m"   Sort sequence:[m[1m[33m [\/]$[m[1m[36m,[m[1m[33m\<core\%(\.\d\+\)\=\>[m[1m[36m,[m[1m[33m\.h$[m[1m[36m,[m[1m[33m\.c$[m[1m[36m,[m[1m[33m\.cpp$[m[1m[36m,[m[1m[33m\~\=\*$[m[1m[36m,[m[1m[33m*[m[1m[36m,[m[1m[33m\.o$[m[1m[36m,[m[1m[33m\.obj$[m[1m[36m,[m[1m[33m\.info$[m[1m[36m,[m[1m[33m\.swp$[m[1m[36m,[m[1m[33m\.bak$[m[1m[36m,[m[1m[33m\~$[m[6;114H[1m[36m"   Quick Help: [m[1m[36m<F1>[m[1m[31m:[mhelp  [1m[36m-[m[1m[31m:[mgo up dir  [1m[36mD[m[1m[31m:[mdelete  [1m[36mR[m[1m[31m:[mrename  [1m[36ms[m[1m[31m:[msort-by  [1m[36mx[m[1m[31m:[mspecial[7;114H[1m[36m" ==============================================================================[m[8;114H[1m[4m[36m..[24m[m[1m[4m[36m/[24m[m[4m                                                                                                             [24m[9;114H[1m[36m.[m[1m[36m/[m[10;114Hfile-copy.c[10;125H[K[11;114H[1m[34mfile-copy[m[1m[36m*[m[11;124H[K[12;114H.gitignore[13;114HMakefile[13;122H[K[14;114Ht[14;116H[K[15;114H[1m[34m~                                                                                                               [16;114H~                                                                                                               [17;114H~                                                                                                               [18;114H~                                                                                                               [19;114H~                                                                                                               [20;114H~                                                                                                               [21;114H~                                                                                                               [22;114H~                                                                                                               [23;114H~                                                                                                               [24;114H~                                                                                                               [25;114H~                                                                                                               [26;114H~                                                                                                               [27;114H~                                                                                                               [28;114H~                                                                                                               [29;114H~                                                                                                               [30;114H~                                                                                                               [31;114H~                                                                                                               [32;114H~                                                                                                               [33;114H~                                                                                                               [34;114H~                                                                                                               [35;114H~                                                                                                               [36;114H~                                                                                                               [37;114H~                                                                                                               [38;114H~                                                                                                               [39;114H~                                                                                                               [40;114H~                                                                                                               [41;114H~                                                                                                               [42;114H~                                                                                                               [43;114H~                                                                                                               [44;114H~                                                                                                               [45;114H~                                                                                                               [46;114H~                                                                                                               [47;114H~                                                                                                               [48;114H~                                                                                                               [49;114H~                                                                                                               [50;114H~                                                                                                               [51;114H~                                                                                                               [52;114H~                                                                                                               [53;114H~                                                                                                               [m[54;114H[1m[7m~/git-repos/i220a/work/lab13/files/file-copy [RO][45C8,1 [11CAll[8;114H[?25h[?0c[?25l[?1c[m[3;178H[K[10;114H[1m[36mfile-char-count[m[1m[36m/[m[11;114H[1m[36mfile-copy[m[1m[36m/[m[12;114H[1m[36mno-buffer-copy[m[1m[36m/[m[13;114H[1m[36mrec-io[m[1m[36m/[m[13;121H[K[14;114H[1m[36mstdin-char-count[m[1m[36m/[m[15;114Hlab13_log.txt[15;127H[K[16;114Hlab13_out.txt[16;127H[K[17;114H.lab13_out.txt.swp[17;132H[K[54;148H[1m[7m [RO]          [8;114H[?25h[?0c[?25l[?1c[m[55;215Hj[8;114H[55;215H [9;114H[8;114H[1m[36m..[m[1m[36m/[m[8;117H[K[9;114H[1m[4m[36m.[24m[m[1m[4m[36m/[24m[m[4m                                                                                                              [24m[54;208H[1m[7m9[9;114H[?25h[?0c[?25l[?1c[m[55;215Hj[9;114H[55;215H [10;114H[9;114H[1m[36m.[m[1m[36m/[m[9;116H[K[10;114H[1m[4m[36mfile-char-count[24m[m[1m[4m[36m/[24m[m[4m                                                                                                [24m[54;208H[1m[7m10,1[10;114H[?25h[?0c[?25l[?1c[m[55;215Hj[10;114H[55;215H [11;114H[10;114H[1m[36mfile-char-count[m[1m[36m/[m[10;130H[K[11;114H[1m[4m[36mfile-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                      [24m[54;209H[1m[7m1[11;114H[?25h[?0c[?25l[?1c[m[55;215Hj[11;114H[55;215H [12;114H[11;114H[1m[36mfile-copy[m[1m[36m/[m[11;124H[K[12;114H[1m[4m[36mno-buffer-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                 [24m[54;209H[1m[7m2[12;114H[?25h[?0c[?25l[?1c[m[55;215Hk[12;114H[55;215H [11;114H[1m[4m[36mfile-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                      [24m[12;114H[1m[36mno-buffer-copy[m[1m[36m/[m[12;129H[K[54;209H[1m[7m1[11;114H[?25h[?0c[?25l[?1c[m[55;215Hk[11;114H[55;215H [10;114H[1m[4m[36mfile-char-count[24m[m[1m[4m[36m/[24m[m[4m                                                                                                [24m[11;114H[1m[36mfile-copy[m[1m[36m/[m[11;124H[K[54;209H[1m[7m0[10;114H[?25h[?0c[?25l[?1c[m[55;215Hj[10;114H[55;215H [11;114H[10;114H[1m[36mfile-char-count[m[1m[36m/[m[10;130H[K[11;114H[1m[4m[36mfile-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                      [24m[54;209H[1m[7m1[11;114H[?25h[?0c[?25l[?1c[m[55;215Hj[11;114H[55;215H [12;114H[11;114H[1m[36mfile-copy[m[1m[36m/[m[11;124H[K[12;114H[1m[4m[36mno-buffer-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                 [24m[54;209H[1m[7m2[12;114H[?25h[?0c[?25l[?1c[m[55;215Hk[12;114H[55;215H [11;114H[1m[4m[36mfile-copy[24m[m[1m[4m[36m/[24m[m[4m                                                                                                      [24m[12;114H[1m[36mno-buffer-copy[m[1m[36m/[m[12;129H[K[54;209H[1m[7m1[11;114H[?25h[?0c[?25l[?1c[m[3;178H[1m[36m/file-copy[m[8;114H[1m[4m[36m..[24m[m[1m[4m[36m/[24m[m[4m                                                                                                             [24m[10;114Hfile-copy.c[10;125H[K[11;114H[1m[34mfile-copy[m[1m[36m*[m[11;124H[K[12;114H.gitignore[12;124H[K[13;114HMakefile[14;114Ht[14;115H[K[15;114H[1m[34m~                                                                                                               [16;114H~                                                                                                               [17;114H~                                                                                                               [m[54;148H[1m[7m/file-copy [RO][45C8,1 [8;114H[?25h[?0c[?25l[?1c[m[55;215Hj[8;114H[55;215H [9;114H[8;114H[1m[36m..[m[1m[36m/[m[8;117H[K[9;114H[1m[4m[36m.[24m[m[1m[4m[36m/[24m[m[4m                                                                                                              [24m[54;208H[1m[7m9[9;114H[?25h[?0c[?25l[?1c[m[55;215Hj[9;114H[55;215H [10;114H[9;114H[1m[36m.[m[1m[36m/[m[9;116H[K[10;114H[4mfile-copy.c                                                                                                     [24m[54;208H[1m[7m10,1[10;114H[?25h[?0c[?25l[?1c[m[55;2H~/git-repos/i220a/work/lab13/files/file-copy/file-copy.c" 54L, 1321C[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[1;132H[K[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[2;133H[K[3;114H[1m[34m#include [m[1m[35m<string.h>[m[3;133H[K[4;114H[K[5;114H[1m[32mstatic[m [1m[32mvoid[m[5;125H[K[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[6;182H[K[7;114H{[7;115H[K[8;114H  [1m[32mint[m c;[9;114H  [1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;114H    [1m[33mif[m (ferror(in)) {[10;135H[K[11;114H      fprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;114H      exit([1m[35m1[m);[13;114H    }[13;119H[K[14;114H    [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;114H      fprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[15;191H[K[16;114H      exit([1m[35m1[m);[16;128H[K[17;114H    }[17;119H[K[18;114H  }[18;117H[K[19;114H}[19;115H[K[20;114H[K[21;114H[1m[36m/** Output number of chars in file specified by single command-line[m[21;181H[K[22;114H[1m[36m *  argument.[m[22;127H[K[23;114H[1m[36m */[m[23;117H[K[24;114H[1m[32mint[m[24;117H[K[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[25;148H[K[26;114H[46m{[m[26;115H[K[27;114H  [1m[33mif[m (argc != [1m[35m3[m) {[27;132H[K[28;114H    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[28;177H[K[29;114H    exit([1m[35m1[m);[29;126H[K[30;114H  }[30;117H[K[31;114H  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[31;146H[K[32;114H  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[32;147H[K[33;114H  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[33;147H[K[34;114H  [1m[33mif[m (!in) {[34;126H[K[35;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[35;184H[K[36;114H    exit([1m[35m1[m);[36;126H[K[37;114H  }[37;117H[K[38;114H  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[38;149H[K[39;114H  [1m[33mif[m (!out) {[39;127H[K[40;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[40;186H[K[41;114H    exit([1m[35m1[m);[41;126H[K[42;114H  }[42;117H[K[43;114H  doCopy(srcName, in, destName, out);[43;151H[K[44;114H  [1m[33mif[m (fclose(in) != [1m[35m0[m) {[44;138H[K[45;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[45;185H[K[46;114H    exit([1m[35m1[m);[46;126H[K[47;114H  }[47;117H[K[48;114H  [1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;139H[K[49;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[49;186H[K[50;114H    exit([1m[35m1[m);[50;126H[K[51;114H  }[51;117H[K[52;114H  [1m[33mreturn[m [1m[35m0[m;[52;125H[K[53;114H[46m}[m[53;115H[K[54;158H[1m[7m/file-copy.c[38C54[13CBot[53;114H[?25h[?0c[?25l[?1c[m[55;215HG[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215H^W[53;114H[?25h[?0c[?25l[?1c[55;217Hh[53;114H[55;215H   [45;1H[54;1H[1m[7mstat-points.c [+]                                                                             70,1           92% [m[7m~/git-repos/i220a/work/lab13/files/file-copy/file-copy.c                                      54,1           Bot[45;1H[?25h[?0c[?25l[?1c[m[55;215Hj[45;1H[55;215H [46;1H[54;96H[1m[7m1,0-1[46;1H[?25h[?0c[?25l[?1c[m[55;215Ho[46;1H[55;215H [47;3H[55;1H[1m-- INSERT --[m[55;13H[K[47;1H                                                                                                                
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    [54;96H[1m[7m2,3  [9C89[47;3H[?25h[?0c[?25l[?1c[mF[54;98H[1m[7m4[47;4H[?25h[?0c[?25l[?1c[mi[54;98H[1m[7m5[47;5H[?25h[?0c[?25l[?1c[ml[54;98H[1m[7m6[47;6H[?25h[?0c[?25l[?1c[me[54;98H[1m[7m7[47;7H[?25h[?0c[?25l[?1c[54;98H8[47;8H[?25h[?0c[?25l[?1c[m*[54;98H[1m[7m9[47;9H[?25h[?0c[?25l[?1c[mi[54;98H[1m[7m10[47;10H[?25h[?0c[?25l[?1c[mn[54;99H[1m[7m1[47;11H[?25h[?0c[?25l[?1c[54;99H2[47;12H[?25h[?0c[?25l[?1c[54;99H1[47;11H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m0[47;10H[?25h[?0c[?25l[?1c[m [54;98H[1m[7m9 [47;9H[?25h[?0c[?25l[?1c[mo[54;98H[1m[7m10[47;10H[?25h[?0c[?25l[?1c[mu[54;99H[1m[7m1[47;11H[?25h[?0c[?25l[?1c[mt[54;99H[1m[7m2[47;12H[?25h[?0c[?25l[?1c[54;99H3[47;13H[?25h[?0c[m[55;1H[K[47;12H[?25l[?1c[55;215H^[[47;12H[55;215H  [47;13H[54;99H[1m[7m2[47;12H[?25h[?0c[?25l[?1c[m[55;215Hb[47;12H[55;215H [47;9H[54;98H[1m[7m9 [47;9H[?25h[?0c[?25l[?1c[m[55;215Hb[47;9H[55;215H [47;8H[54;98H[1m[7m8[47;8H[?25h[?0c[?25l[?1c[m[55;215Hb[47;8H[55;215H [47;3H[54;98H[1m[7m3[47;3H[?25h[?0c[?25l[?1c[m[55;215Hc[47;3H[?25h[?0c[?25l[?1c[55;216Hw[47;3H[55;215H  [47;3H[55;1H[1m-- INSERT --[m[47;3H *out      [?25h[?0c[?25l[?1cF *out[54;98H[1m[7m4[47;4H[?25h[?0c[?25l[?1c[mI *out[54;98H[1m[7m5[47;5H[?25h[?0c[?25l[?1c[mL *out[54;98H[1m[7m6[47;6H[?25h[?0c[?25l[?1c[m[1m[32mFILE[m *out[54;98H[1m[7m7[47;7H[?25h[?0c[m[55;1H[K[47;6H[?25l[?1c[55;215H^[[47;6H[55;215H  [47;7H[54;98H[1m[7m6[47;6H[?25h[?0c[?25l[?1c[m[55;215HA[47;6H[55;215H [47;13H[55;1H[1m-- INSERT --[m[54;98H[1m[7m13[47;13H[?25h[?0c[?25l[?1c[m=[54;99H[1m[7m4[47;14H[?25h[?0c[?25l[?1c[54;99H5[47;15H[?25h[?0c[?25l[?1c[mf[54;99H[1m[7m6[47;16H[?25h[?0c[?25l[?1c[mo[54;99H[1m[7m7[47;17H[?25h[?0c[?25l[?1c[mp[54;99H[1m[7m8[47;18H[?25h[?0c[?25l[?1c[me[54;99H[1m[7m9[47;19H[?25h[?0c[?25l[?1c[mn[54;98H[1m[7m20[47;20H[?25h[?0c[?25l[?1c[m([48;18H[1m[37m[41m{

[m  [1m[37m[41m}[m[54;99H[1m[7m1[47;21H[?25h[?0c[m[55;1H[K[47;20H[?25l[?1c[55;215H^[[47;20H[55;215H  [47;21H[54;99H[1m[7m0[47;20H[?25h[?0c[?25l[?1c[m[55;215H~@k[47;20H[55;215H   [47;19H[54;98H[1m[7m19[47;19H[?25h[?0c[?25l[?1c[m[55;215Hb[47;19H[55;215H [47;15H[54;99H[1m[7m5[47;15H[?25h[?0c[?25l[?1c[m[55;215Hb[47;15H[55;215H [47;13H[54;99H[1m[7m3[47;13H[?25h[?0c[?25l[?1c[m[55;215Hh[47;13H[55;215H [47;12H[54;99H[1m[7m2[47;12H[?25h[?0c[?25l[?1c[m[55;215Hd[47;12H[?25h[?0c[?25l[?1c[55;216H$[47;12H[55;215H  [47;11Ht         [48;18H{

  }[54;99H[1m[7m1[47;11H[?25h[?0c[?25l[?1c[m[55;215Ha[47;11H[55;215H [47;12H[55;1H[1m-- INSERT --[m[54;99H[1m[7m2[47;12H[?25h[?0c[?25l[?1c[m;[54;99H[1m[7m3[47;13H[?25h[?0c[m[55;1H[K[47;12H[?25l[?1c[55;215H^[[47;12H[55;215H  [47;13H[54;99H[1m[7m2[47;12H[?25h[?0c[?25l[?1c[m[55;215Hj[47;12H[55;215H [48;12H[54;96H[1m[7m3[48;12H[?25h[?0c[?25l[?1c[m[55;215Hj[48;12H[55;215H [48;1H[1;1H}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    
                                                                                                                  freeDynArray(points)[1m[37m[41m;[m[54;96H[1m[7m4,0-1[9C92[48;1H[?25h[?0c[?25l[?1c[m[55;215Hi[48;1H[55;215H [48;1H[55;1H[1m-- INSERT --[m[54;98H[1m[7m1  [48;1H[?25h[?0c[?25l[?1c[54;98H2-9[48;9H[?25h[?0c[?25l[?1c[mf[54;98H[1m[7m3-10[48;10H[?25h[?0c[?25l[?1c[mo[54;98H[1m[7m4-11[48;11H[?25h[?0c[?25l[?1c[mp[54;98H[1m[7m5-12[48;12H[?25h[?0c[?25l[?1c[me[54;98H[1m[7m6-13[48;13H[?25h[?0c[?25l[?1c[mn[54;98H[1m[7m7-14[48;14H[?25h[?0c[m[55;1H[K[48;13H[?25l[?1c[55;215H^[[48;13H[55;215H  [48;14H[54;98H[1m[7m6-13[48;13H[?25h[?0c[?25l[?1c[m[55;215Hb[48;13H[55;215H [48;9H[54;98H[1m[7m2-9 [48;9H[?25h[?0c[?25l[?1c[m[55;215Hi[48;9H[55;215H [48;9H[55;1H[1m-- INSERT --[48;9H[?25h[?0c[?25l[?1c[mofopen[54;98H[1m[7m3-10[48;10H[?25h[?0c[?25l[?1c[mufopen[54;98H[1m[7m4-11[48;11H[?25h[?0c[?25l[?1c[mtfopen[54;98H[1m[7m5-12[48;12H[?25h[?0c[?25l[?1c[m fopen[54;98H[1m[7m6-13[48;13H[?25h[?0c[?25l[?1c[m=fopen[54;98H[1m[7m7-14[48;14H[?25h[?0c[?25l[?1c[m fopen[54;98H[1m[7m8-15[48;15H[?25h[?0c[m[55;1H[K[48;14H[?25l[?1c[55;215H^[[48;14H[55;215H  [48;15H[54;98H[1m[7m7-14[48;14H[?25h[?0c[?25l[?1c[m[55;215Hb[48;14H[55;215H [48;13H[54;98H[1m[7m6-13[48;13H[?25h[?0c[?25l[?1c[m[55;215Hb[48;13H[55;215H [48;9H[54;98H[1m[7m2-9 [48;9H[?25h[?0c[?25l[?1c[m[55;215Hb[48;9H[55;215H [47;18H[46m{

[m  [46m}[m[54;96H[1m[7m3,18 [47;18H[?25h[?0c[?25l[?1c[m[55;215Hk[47;18H[55;215H [46;12H[47;18H{

  }[54;96H[1m[7m2,12[46;12H[?25h[?0c[?25l[?1c[m[55;215Hj[46;12H[55;215H [47;18H[46m{

[m  [46m}[m[54;96H[1m[7m3,18[47;18H[?25h[?0c[?25l[?1c[m[55;215Hj[47;18H[55;215H [48;18H[47;18H{

  }[54;96H[1m[7m4,11-18[48;18H[?25h[?0c[?25l[?1c[m[55;215HA[48;18H[55;215H [48;20H[55;1H[1m-- INSERT --[m[54;99H[1m[7m3-20[48;20H[?25h[?0c[?25l[?1c[m([54;99H[1m[7m4-21[48;21H[?25h[?0c[?25l[?1c[ma[54;99H[1m[7m5-22[48;22H[?25h[?0c[?25l[?1c[mr[54;99H[1m[7m6-23[48;23H[?25h[?0c[?25l[?1c[mg[54;99H[1m[7m7-24[48;24H[?25h[?0c[?25l[?1c[mv[54;99H[1m[7m8-25[48;25H[?25h[?0c[?25l[?1c[m[[54;99H[1m[7m9-26[48;26H[?25h[?0c[?25l[?1c[m[1m[35m3[m[54;98H[1m[7m20-27[48;27H[?25h[?0c[?25l[?1c[m][46m[[1C][m[54;99H[1m[7m1-28[48;28H[?25h[?0c[m[55;1H[K[48;27H[?25l[?1c[55;215H^[[48;27H[55;215H  [48;28H[54;99H[1m[7m0-27[48;27H[?25h[?0c[?25l[?1c[m[55;215Hj[48;27H[55;215H [48;3H[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[46m[[m[1m[35m3[m[46m][m                                                                                     
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    
  freeDynArray(points)[1m[37m[41m;[m                                                                                         
                                                                                                                [46;18H[46m{[m[47;25H[[1C]
  [46m}[m[53;3H[1m[33mreturn[m [1m[35m0[m[1m[37m[41m;[m[54;96H[1m[7m5,3    [8C6[48;3H[?25h[?0c[?25l[?1c[m[55;215Hk[48;3H[55;215H [47;27H[46;18H{[47;25H[46m[[1C][m
  }[54;96H[1m[7m4,20-27[47;27H[?25h[?0c[?25l[?1c[m[55;215Hh[47;27H[55;215H [47;26H[[1C][54;98H[1m[7m19-26[47;26H[?25h[?0c[?25l[?1c[m[55;215Hr[47;26H[?25h[?0c[?25l[?1c[55;216H2[47;26H[55;215H  [47;26H[1m[35m2[?25h[?0c[?25l[?1c[m[55;215HA[47;26H[55;215H [47;28H[55;1H[1m-- INSERT --[m[47;25H[46m[[1C][m[54;98H[1m[7m21-28[47;28H[?25h[?0c[?25l[?1c[m,[[1C][54;99H[1m[7m2-29[47;29H[?25h[?0c[?25l[?1c[54;99H3-30[47;30H[?25h[?0c[?25l[?1c[m'[54;99H[1m[7m4-31[47;31H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m3-30[47;30H[?25h[?0c[?25l[?1c[m[1m[35m"
  }
  DynArray *points = newDynArray(sizeof(Point2));
  readPoints(argv[1], points);
  statPoints(points, (argc == 3) ?  stdout);
  freeDynArray(points);
  return 0;[m[54;99H[1m[7m4-31[47;31H[?25h[?0c[?25l[?1c[m[1m[35mo[m[54;99H[1m[7m5-32[47;32H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m4-31[47;31H[?25h[?0c[?25l[?1c[m[1m[35mw[m[54;99H[1m[7m5-32[47;32H[?25h[?0c[?25l[?1c[m[1m[35m"[m
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1C], points);
  statPoints(points, (argc == [1C) ?  [6C[1m[37m[41m);[m
  freeDynArray(points)[1m[37m[41m;[m
  [1m[33mreturn[m [1C[1m[37m[41m;[m[54;99H[1m[7m6-33[47;33H[?25h[?0c[?25l[?1c[m)[47;20H[46m([12C)[m[54;99H[1m[7m7-34[47;34H[?25h[?0c[?25l[?1c[m;[47;20H([12C)[54;99H[1m[7m8-35[47;35H[?25h[?0c[m[55;1H[K[47;34H[?25l[?1c[55;215H^[[47;34H[55;215H  [47;35H[54;99H[1m[7m7-34[47;34H[?25h[?0c[?25l[?1c[m[55;215Hh[47;34H[55;215H [47;33H[47;20H[46m([12C)[m[54;99H[1m[7m6-33[47;33H[?25h[?0c[?25l[?1c[m[55;215Hh[47;33H[55;215H [47;32H[47;20H([12C)[54;99H[1m[7m5-32[47;32H[?25h[?0c[?25l[?1c[m[55;215Hj[47;32H[55;215H [48;3H[46;18H[46m{

[m  [46m}[m[54;96H[1m[7m5,3    [48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;32H[1;1H[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) [46m{[m                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
  [46m}[m                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ?  [1m[35mstdout[m[1m[37m[41m);[m                                                                    
  freeDynArray(points)[1m[37m[41m;[m                                                                                         
  [1m[33mreturn[m [1m[35m0[m[1m[37m[41m;[m                                                                                                     
                                                                                                                [45;18H{

  }[53;1H[1m[37m[41m}[m[54;96H[1m[7m6,32[10CBot[48;32H[?25h[?0c[?25l[?1c[m[55;215Hj[48;32H[55;215H [49;30H[54;96H[1m[7m7,30[49;30H[?25h[?0c[?25l[?1c[m[55;215Hj[49;30H[55;215H [50;32H[50;22H[46m([9C)[m[54;96H[1m[7m8,32[50;32H[?25h[?0c[?25l[?1c[m[55;215Hj[50;32H[55;215H [51;23H[50;22H([9C)[54;96H[1m[7m9,23[51;23H[?25h[?0c[?25l[?1c[m[55;215Hj[51;23H[55;215H [52;11H[54;95H[1m[7m80,11[52;11H[?25h[?0c[?25l[?1c[m[55;215Hk[52;11H[55;215H [51;23H[54;95H[1m[7m79,23[51;23H[?25h[?0c[?25l[?1c[m[55;215Hk[51;23H[55;215H [50;32H[50;22H[46m([9C)[m[54;96H[1m[7m8,32[50;32H[?25h[?0c[?25l[?1c[m[55;215Hk[50;32H[55;215H [49;30H[50;22H([9C)[54;96H[1m[7m7,30[49;30H[?25h[?0c[?25l[?1c[m[55;215Hj[49;30H[55;215H [50;32H[50;22H[46m([9C)[m[54;96H[1m[7m8,32[50;32H[?25h[?0c[?25l[?1c[m[55;215Hl[50;32H[55;215H [50;33H[50;22H([9C)[54;99H[1m[7m3[50;33H[?25h[?0c[?25l[?1c[m[55;215Hl[50;33H[55;215H [50;34H[54;99H[1m[7m4[50;34H[?25h[?0c[?25l[?1c[m[55;215Hl[50;34H[55;215H [50;35H[54;99H[1m[7m5[50;35H[?25h[?0c[?25l[?1c[m[55;215Hl[50;35H[55;215H [50;36H[54;99H[1m[7m6[50;36H[?25h[?0c[?25l[?1c[m[55;215Hi[50;36H[55;215H [50;36H[55;1H[1m-- INSERT --[50;36H[?25h[?0c[?25l[?1c[mo [1m[35mstdout[m[1m[37m[41m);[m[54;99H[1m[7m7[50;37H[?25h[?0c[?25l[?1c[mu [1m[35mstdout[m[1m[37m[41m);[m[54;99H[1m[7m8[50;38H[?25h[?0c[?25l[?1c[mt [1m[35mstdout[m[1m[37m[41m);[m[54;99H[1m[7m9[50;39H[?25h[?0c[?25l[?1c[m: [1m[35mstdout[m);[51;23H;[52;11H;
}[54;98H[1m[7m40[50;40H[?25h[?0c[?25l[?1c[m  [1m[35mstdout[m);[54;99H[1m[7m1[50;41H[?25h[?0c[?25l[?1c[m[1m[35mstdout[m); [54;99H[1m[7m0[50;40H[?25h[?0c[?25l[?1c[m [1m[35mstdout[m[1m[37m[41m);[m [51;23H[1m[37m[41m;[52;11H;
}[m[54;98H[1m[7m39[50;39H[?25h[?0c[?25l[?1c[m  [1m[35mstdout[m[1m[37m[41m);[m[54;98H[1m[7m40[50;40H[?25h[?0c[?25l[?1c[m: [1m[35mstdout[m);[51;23H;[52;11H;
}[54;99H[1m[7m1[50;41H[?25h[?0c[m[55;1H[K[50;40H[?25l[?1c[55;215H^[[50;40H[55;215H  [50;41H[54;99H[1m[7m0[50;40H[?25h[?0c[?25l[?1c[m[55;215Hk[50;40H[55;215H [49;30H[54;96H[1m[7m7,3[49;30H[?25h[?0c[?25l[?1c[m[55;215Hk[49;30H[55;215H [48;40H[46m([mPoint2[46m)[m[54;96H[1m[7m6,4[48;40H[?25h[?0c[?25l[?1c[m[55;215Hk[48;40H[55;215H [47;3H[45;18H[46m{

[m  [46m}[m[48;40H(Point2)[54;96H[1m[7m5,3 [47;3H[?25h[?0c[?25l[?1c[m[55;215Hj[47;3H[55;215H [48;40H[45;18H{

  }[48;40H[46m([mPoint2[46m)[m[54;96H[1m[7m6,40[48;40H[?25h[?0c[?25l[?1c[m[55;215Hj[48;40H[55;215H [49;30H[48;40H(Point2)[54;96H[1m[7m7,3[49;30H[?25h[?0c[?25l[?1c[m[55;215Hj[49;30H[55;215H [50;40H[54;96H[1m[7m8,4[50;40H[?25h[?0c[?25l[?1c[m[55;215Hj[50;40H[55;215H [51;23H[54;96H[1m[7m9,23[51;23H[?25h[?0c[?25l[?1c[m[55;215Hk[51;23H[55;215H [50;40H[54;96H[1m[7m8,40[50;40H[?25h[?0c[?25l[?1c[m[55;215Hk[50;40H[55;215H [49;30H[54;96H[1m[7m7,3[49;30H[?25h[?0c[?25l[?1c[m[55;215Hk[49;30H[55;215H [48;40H[46m([mPoint2[46m)[m[54;96H[1m[7m6,4[48;40H[?25h[?0c[?25l[?1c[m[55;215Hk[48;40H[55;215H [47;3H[45;18H[46m{

[m  [46m}[m[48;40H(Point2)[54;96H[1m[7m5,3 [47;3H[?25h[?0c[?25l[?1c[m[55;215Hk[47;3H[55;215H [46;34H[45;18H{

  }[54;96H[1m[7m4,27-34[46;34H[?25h[?0c[?25l[?1c[m[55;215Hj[46;34H[55;215H [47;3H[45;18H[46m{

[m  [46m}[m[54;96H[1m[7m5,3    [47;3H[?25h[?0c[?25l[?1c[m[55;215Hj[47;3H[55;215H [48;40H[45;18H{

  }[48;40H[46m([mPoint2[46m)[m[54;96H[1m[7m6,40[48;40H[?25h[?0c[?25l[?1c[m[55;215Hj[48;40H[55;215H [49;30H[48;40H(Point2)[54;96H[1m[7m7,3[49;30H[?25h[?0c[?25l[?1c[m[55;215Hj[49;30H[55;215H [50;40H[54;96H[1m[7m8,4[50;40H[?25h[?0c[?25l[?1c[m[55;215Ho[50;40H[55;215H [50;3H[55;1H[1m-- INSERT --[m[1;1HcomparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               
                                                                                                                [50;1H                                                                                                                
  freeDynArray(points);                                                                                         
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               [54;96H[1m[7m9,3 [50;3H[?25h[?0c[?25l[?1c[mi[54;98H[1m[7m4[50;4H[?25h[?0c[?25l[?1c[m[1m[33mif[m[54;98H[1m[7m5[50;5H[?25h[?0c[?25l[?1c[54;98H6[50;6H[?25h[?0c[m[55;1H[K[50;5H[?25l[?1c[55;215H^[[50;5H[55;215H  [50;6H[54;98H[1m[7m5[50;5H[?25h[?0c[?25l[?1c[m[55;215Hd[50;5H[?25h[?0c[?25l[?1c[55;216Hd[50;5H[55;215H  [50;3H  freeDynArray(points);                                                                                         
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               
                                                                                                                [1m[34m~                                                                                                               [m[54;98H[1m[7m3[50;3H[?25h[?0c[?25l[?1c[m[55;215Ho[50;3H[55;215H [51;3H[55;1H[1m-- INSERT --[m[51;3H         
  [1m[33mreturn[m [1m[35m0[m;
}                                                                                                               [54;95H[1m[7m80[51;3H[?25h[?0c[?25l[?1c[mi[54;98H[1m[7m4[51;4H[?25h[?0c[?25l[?1c[m[1m[33mif[m[54;98H[1m[7m5[51;5H[?25h[?0c[?25l[?1c[54;98H6[51;6H[?25h[?0c[?25l[?1c[m([54;98H[1m[7m7[51;7H[?25h[?0c[?25l[?1c[ma[54;98H[1m[7m8[51;8H[?25h[?0c[?25l[?1c[mr[54;98H[1m[7m9[51;9H[?25h[?0c[?25l[?1c[mg[54;98H[1m[7m10[51;10H[?25h[?0c[?25l[?1c[mc[54;99H[1m[7m1[51;11H[?25h[?0c[?25l[?1c[54;99H2[51;12H[?25h[?0c[?25l[?1c[m=[54;99H[1m[7m3[51;13H[?25h[?0c[?25l[?1c[m=[54;99H[1m[7m4[51;14H[?25h[?0c[?25l[?1c[54;99H5[51;15H[?25h[?0c[?25l[?1c[m[1m[35m3[m[54;99H[1m[7m6[51;16H[?25h[?0c[?25l[?1c[m)[51;6H[46m([9C)[m[54;99H[1m[7m7[51;17H[?25h[?0c[?25l[?1c[m[51;6H([9C)[54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[mr[54;99H[1m[7m9[51;19H[?25h[?0c[?25l[?1c[me[54;98H[1m[7m20[51;20H[?25h[?0c[?25l[?1c[mt[54;99H[1m[7m1[51;21H[?25h[?0c[?25l[?1c[mu[54;99H[1m[7m2[51;22H[?25h[?0c[?25l[?1c[mr[54;99H[1m[7m3[51;23H[?25h[?0c[?25l[?1c[m[1m[33mreturn[m[54;99H[1m[7m4[51;24H[?25h[?0c[?25l[?1c[mretur [54;99H[1m[7m3[51;23H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m2[51;22H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m1[51;21H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m0[51;20H[?25h[?0c[?25l[?1c[m [54;98H[1m[7m19[51;19H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[mf[54;99H[1m[7m9[51;19H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[mo[54;99H[1m[7m9[51;19H[?25h[?0c[?25l[?1c[mu[54;98H[1m[7m20[51;20H[?25h[?0c[?25l[?1c[mt[54;99H[1m[7m1[51;21H[?25h[?0c[?25l[?1c[m[1m[37m[41m][m[54;99H[1m[7m2[51;22H[?25h[?0c[?25l[?1c[m[1m[37m[41m][m[54;99H[1m[7m3[51;23H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m2[51;22H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m1[51;21H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m0[51;20H[?25h[?0c[?25l[?1c[m [54;98H[1m[7m19[51;19H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[mf[54;99H[1m[7m9[51;19H[?25h[?0c[?25l[?1c[mc[54;98H[1m[7m20[51;20H[?25h[?0c[?25l[?1c[ml[54;99H[1m[7m1[51;21H[?25h[?0c[?25l[?1c[mo[54;99H[1m[7m2[51;22H[?25h[?0c[?25l[?1c[ms[54;99H[1m[7m3[51;23H[?25h[?0c[?25l[?1c[me[54;99H[1m[7m4[51;24H[?25h[?0c[?25l[?1c[m([54;99H[1m[7m5[51;25H[?25h[?0c[?25l[?1c[ma[54;99H[1m[7m6[51;26H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m5[51;25H[?25h[?0c[?25l[?1c[mi[54;99H[1m[7m6[51;26H[?25h[?0c[?25l[?1c[mt[54;99H[1m[7m7[51;27H[?25h[?0c[?25l[?1c[mu[54;99H[1m[7m8[51;28H[?25h[?0c[?25l[?1c[m)[46m([mitu[46m)[m[54;99H[1m[7m9[51;29H[?25h[?0c[?25l[?1c[m ([54;99H[1m[7m8[51;28H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m7[51;27H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m6[51;26H[?25h[?0c[?25l[?1c[m [54;99H[1m[7m5[51;25H[?25h[?0c[?25l[?1c[mo[54;99H[1m[7m6[51;26H[?25h[?0c[?25l[?1c[mu[54;99H[1m[7m7[51;27H[?25h[?0c[?25l[?1c[mt[54;99H[1m[7m8[51;28H[?25h[?0c[?25l[?1c[m)[46m([mout[46m)[m[54;99H[1m[7m9[51;29H[?25h[?0c[?25l[?1c[m;(out)[54;98H[1m[7m30[51;30H[?25h[?0c[m[55;1H[K[51;29H[?25l[?1c[55;215H^[[51;29H[55;215H  [51;30H[54;98H[1m[7m29[51;29H[?25h[?0c[?25l[?1c[m[55;215H;[51;29H[55;215H [51;29H[?25h[?0c[?25l[?1c[55;215Hw[51;29H[55;215H [52;3H[54;96H[1m[7m1,3 [52;3H[?25h[?0c[?25l[?1c[m[55;215H:[52;3H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 82L, 1942C written[52;3H[54;15H[1m[7m   [52;3H[?25h[?0c[?25l[?1c[m[55;215Hk[52;3H[55;215H [51;3H[54;96H[1m[7m0[51;3H[?25h[?0c[?25l[?1c[m[55;215Hk[51;3H[55;215H [50;3H[54;95H[1m[7m79[50;3H[?25h[?0c[?25l[?1c[m[55;215Hk[50;3H[55;215H [49;3H[54;96H[1m[7m8[49;3H[?25h[?0c[?25l[?1c[m[55;215Hk[49;3H[55;215H [48;3H[54;96H[1m[7m7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hk[48;3H[55;215H [47;3H[54;96H[1m[7m6[47;3H[?25h[?0c[?25l[?1c[m[55;215Hk[47;3H[55;215H [46;3H[44;18H[46m{

[m  [46m}[m[54;96H[1m[7m5[46;3H[?25h[?0c[?25l[?1c[m[55;215Hj[46;3H[55;215H [47;3H[44;18H{

  }[54;96H[1m[7m6[47;3H[?25h[?0c[?25l[?1c[m[55;215Hj[47;3H[55;215H [48;3H[54;96H[1m[7m7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [49;3H[54;96H[1m[7m8[49;3H[?25h[?0c[?25l[?1c[m[55;215H:[49;3H[55;1H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 82L, 1942C written[49;3H[?25h[?0c[?25l[?1c[55;215Hk[49;3H[55;215H [48;3H[54;96H[1m[7m7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hk[48;3H[55;215H [47;3H[54;96H[1m[7m6[47;3H[?25h[?0c[?25l[?1c[m[55;215Hk[47;3H[55;215H [46;3H[44;18H[46m{

[m  [46m}[m[54;96H[1m[7m5[46;3H[?25h[?0c[?25l[?1c[m[55;215Hk[46;3H[55;215H [45;8H[44;18H{

  }[54;96H[1m[7m4,1-8[45;8H[?25h[?0c[?25l[?1c[m[55;215HA[45;8H[55;215H [45;35H[55;1H[1m-- INSERT --[m[55;13H[K[54;98H[1m[7m28-35[45;35H[?25h[?0c[m[55;1H[K[45;34H[?25l[?1c[55;215H^[[45;34H[55;215H  [45;35H[54;99H[1m[7m7-34[45;34H[?25h[?0c[?25l[?1c[m[55;215Hh[45;34H[55;215H [45;33H[45;20H[46m([12C)[m[54;99H[1m[7m6-33[45;33H[?25h[?0c[?25l[?1c[m[55;215Hh[45;33H[55;215H [45;32H[45;20H([12C)[54;99H[1m[7m5-32[45;32H[?25h[?0c[?25l[?1c[m[55;215H:[45;32H[55;215H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[54;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m[1;19H[K[2;1H[1m[34m#include [m[1m[35m<stdio.h>[m[2;113H[K[3;1H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;20H[K[4;1H[1m[34m#include [m[1m[35m<string.h>[m[4;113H[K[5;113H[K[6;8H[1m[32mvoid[m[6;12H[K[7;1HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;113H[K[8;113H[K[9;3H[1m[32mint[m c;[9;9H[K[10;3H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;113H[K[11;3H  [1m[33mif[m (ferror(in)) {[11;113H[K[12;3H    fprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;113H[K[13;5H  exit([1m[35m1[m);[13;15H[K[14;5H}[14;6H[K[15;5H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;113H[K[16;3H    fprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;113H[K[17;3H    exit([1m[35m1[m);[17;15H[K[18;1H    }[18;113H[K[19;3H}[19;113H[K[20;1H}[20;2H[K[21;1H[K[22;1H[1m[36m/** Output number of chars in file specified by single command-line[m[22;113H[K[23;1H[1m[36m *  argument.[m[23;14H[K[24;1H[1m[36m */[m[24;4H[K[25;1H[1m[32mint[m[25;4H[K[26;1Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;35H[K[27;1H[46m{[m[27;5H[K[28;3H[1m[33mif[m (argc != [1m[35m3[m) {[28;20H[K[29;5Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;64H[K[30;5Hexit([1m[35m1[m);[30;13H[K[31;3H}[31;13H[K[32;3H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;113H[K[33;1H  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;113H[K[34;3H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;113H[K[35;1H  [1m[33mif[m (!in) {[35;113H[K[36;1H    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;113H[K[37;1H    exit([1m[35m1[m);[37;113H[K[38;3H}[38;4H[K[39;3H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;36H[K[40;3H[1m[33mif[m (!out) {[40;113H[K[41;3H  fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;113H[K[42;5Hexit([1m[35m1[m);[42;113H[K[43;3H}[43;4H[K[44;3HdoCopy(srcName, in, destName, out);[44;113H[K[45;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;25H[K[46;3H  fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;113H[K[47;3H  exit([1m[35m1[m);[47;13H[K[48;3H}[48;4H[K[49;3H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;26H[K[50;3H  fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;113H[K[51;3H  exit([1m[35m1[m);[51;13H[K[52;3H}[52;4H[K[53;1H  [1m[33mreturn[m [1m[35m0[m;[53;113H[K[54;1H[46m}[m[54;2H[K[55;208H54,1[10CAll[54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;1H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o gen-rand-points.o gen-rand-points.c
gcc   gen-rand-points.o  -lm -o gen-rand-points
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
gcc   stat-points.o dyn-array.o  -lm -o stat-points
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points 
dyn-array.c        dyn-array.o        gen-rand-points.c  .gitignore         point2.h           stat-points        stat-points.o      
dyn-array.h        gen-rand-points    gen-rand-points.o  Makefile           points.dat         stat-points.c      
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points 
usage: ./stat-points BINARY_POINTS_FILE [OUTPUT_FILE]
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points point-[K.dd[Kat [K[K[K[K[Ks.dat out.dat[Ktxt
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ cat out.txt 
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgtr[Kr[K[Krind stat-points[C[C[C[C[C[C[C[C[C[C[C point.dat out.txt 
valgrind: stat-points: command not found
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgrind stat-points point.dat out.txt [C[C[C[C[C[C[C[C[C[1@.[1@/
==15536== Memcheck, a memory error detector
==15536== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==15536== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==15536== Command: ./stat-points point.dat out.txt
==15536== 
cannot read point.dat: No such file or directory
==15536== 
==15536== HEAP SUMMARY:
==15536==     in use at exit: 584 bytes in 2 blocks
==15536==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==15536== 
==15536== LEAK SUMMARY:
==15536==    definitely lost: 0 bytes in 0 blocks
==15536==    indirectly lost: 0 bytes in 0 blocks
==15536==      possibly lost: 0 bytes in 0 blocks
==15536==    still reachable: 584 bytes in 2 blocks
==15536==         suppressed: 0 bytes in 0 blocks
==15536== Rerun with --leak-check=full to see details of leaked memory
==15536== 
==15536== For counts of detected and suppressed errors, rerun with: -v
==15536== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg[Kfg
vim ../lab13_out.txt	(wd: ~/i220a/work/lab13/files/file-copy)
[27m[24m[m[H[J[?25l[?1c[1;1H596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c

Ex4:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t

Ex5:
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1

real    0m0.016s
user    0m0.010s
sys     0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real    0m1.698s
user    0m0.929s
sys     0m0.767s

Ex6:
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./gen-rand-points 100 points.dat
average magnitude = 752.156
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49[55;208H74,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198H^Z[54;1H

[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt  (wd: ~/i220a/work/lab13/files/file-copy)
(wd now: ~/i220a/work/lab13/files/rec-io)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fgvalgrind ./stat-points point.dat out.txt [2P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat out.txt [K./stat-points points.dat out.txt[Kmake[Kvim stat-points.c gen-rand-points.c[3Pstat-points.c [Kvim gen-rand-points.cfg[K./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.datfg[Kvalgrind ./stat-points point.dat out.txt [2P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[2@./[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==15636== Memcheck, a memory error detector
==15636== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==15636== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==15636== Command: ./stat-points point.dat out.txt
==15636== 
^Pcannot read point.dat: No such file or directory
==15636== 
==15636== HEAP SUMMARY:
==15636==     in use at exit: 584 bytes in 2 blocks
==15636==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==15636== 
==15636== LEAK SUMMARY:
==15636==    definitely lost: 0 bytes in 0 blocks
==15636==    indirectly lost: 0 bytes in 0 blocks
==15636==      possibly lost: 0 bytes in 0 blocks
==15636==    still reachable: 584 bytes in 2 blocks
==15636==         suppressed: 0 bytes in 0 blocks
==15636== Rerun with --leak-check=full to see details of leaked memory
==15636== 
==15636== For counts of detected and suppressed errors, rerun with: -v
==15636== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgrind ./stat-points point.dat out.txt [17P./stat-points points.datvalgrind ./stat-points point.dat out.txt [Kfg
vim ../lab13_out.txt	(wd: ~/i220a/work/lab13/files/file-copy)
[27m[24m[m[H[J[?25l[?1c[1;1H596
==8242==
==8242== HEAP SUMMARY:
==8242==     in use at exit: 0 bytes in 0 blocks
==8242==   total heap usage: 3 allocs, 3 frees, 9,768 bytes allocated
==8242==
==8242== All heap blocks were freed -- no leaks are possible
==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c

Ex4:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t

Ex5:
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1

real    0m0.016s
user    0m0.010s
sys     0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real    0m1.698s
user    0m0.929s
sys     0m0.767s

Ex6:
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./gen-rand-points 100 points.dat
average magnitude = 752.156
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49[55;208H74,0-1[8CBot[54;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198Ho[54;1H[55;198H [54;1H
[1m-- INSERT --[m[55;208H[K[55;208H75,1[10CBot[1;54r[54;1H
[1;55r[55;208H[K[55;208H75,1[10CBot[54;1H[?25h[?0c[?25l[?1cE[55;211H2[54;2H[?25h[?0c[?25l[?1cx[55;211H3[54;3H[?25h[?0c[?25l[?1c6[55;211H4[54;4H[?25h[?0c[?25l[?1c[54;3H[K[55;211H3[54;3H[?25h[?0c[?25l[?1c7[55;211H4[54;4H[?25h[?0c[?25l[?1c:[55;211H5[54;5H[?25h[?0c[?25l[?1c[1;54r[54;1H
[1;55r[55;208H[K[55;208H76,1[10CBot[54;1H[?25h[?0c[?25l[?1c[1;54r[1;1H[5M[1;55r[49;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat out.txt
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ cat out.txt
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49[55;208H[K[55;208H81,14[9CBot[54;14H[?25h[?0c[55;1H[K[54;13H[?25l[?1c[55;198H^[[54;13H[55;198H  [54;14H[55;208H81,13[9CBot[54;13H[?25h[?0c[?25l[?1c[55;198Hk[54;13H[55;198H [53;13H[55;209H0[53;13H[?25h[?0c[?25l[?1c[55;198Hk[53;13H[55;198H [52;13H[55;208H79[52;13H[?25h[?0c[?25l[?1c[55;198Hk[52;13H[55;198H [51;13H[55;209H8[51;13H[?25h[?0c[?25l[?1c[55;198Hk[51;13H[55;198H [50;13H[55;209H7[50;13H[?25h[?0c[?25l[?1c[55;198Hk[50;13H[55;198H [49;13H[55;209H6[49;13H[?25h[?0c[?25l[?1c[55;198Hk[49;13H[55;198H [48;4H[55;209H5,4 [48;4H[?25h[?0c[?25l[?1c[55;198Hd[48;4H[?25h[?0c[?25l[?1c[55;199Hd[48;4H[55;198H  [48;1H[48;54r[54;1H
[1;55r[54;1H[1m[34m~                                                                                                                                                                                                                                [m[55;208H[K[55;208H75,1[10CBot[48;1H[?25h[?0c[?25l[?1c[55;198H:[48;1H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 80L, 2850C written[48;1H[55;208H75,1[10CBot[55;208H[K[55;208H75,1[10CBot[48;1H[?25h[?0c[?25l[?1c[55;198H^Z[48;1H[55;1H
[?25h[?0c
[1]+  Stopped                 vim ../lab13_out.txt  (wd: ~/i220a/work/lab13/files/file-copy)
(wd now: ~/i220a/work/lab13/files/rec-io)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fgvalgrind ./stat-points point.dat out.txt [Kjobs
[1]+  Stopped                 vim ../lab13_out.txt  (wd: ~/i220a/work/lab13/files/file-copy)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ls
dyn-array.c  dyn-array.h  dyn-array.o  gen-rand-points	gen-rand-points.c  gen-rand-points.o  Makefile	out.txt  point2.h  points.dat  stat-points  stat-points.c  stat-points.o
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim stat-points.c 
[1;55r[27m[24m[m[H[J[?25l[?1c[55;1H"stat-points.c" 82L, 1942C[2;1H‚ñΩ[6n[2;1H  [1;1H[1;3H}
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  assert(n > [1m[35m0[m);
  [1m[32mdouble[m sum = [1m[35m0[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);
    [1m[32mdouble[m mag = magnitudePoint2(p);
    sum += mag;
  }
  [1m[33mreturn[m sum/n;
}

[1m[32mstatic[m [1m[32mvoid[m
statPoints(DynArray *points, [1m[32mFILE[m *out)
{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[35;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[49;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);[55;208H74,25-32      89%[49;32H[?25h[?0c[?25l[?1c[55;198HG[49;32H[55;198H [54;1H[1;54r[1;1H[3M[1;55r[38;1H[46m{[m[52;3H[1m[33mif[m (argc == [1m[35m3[m) fclose(out);
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;1H[K[55;208H82,1[10CBot[54;1H[?25h[?0c[?25l[?1c[55;198Hk[54;1H[55;198H [53;1H[38;1H{[54;1H}[55;209H1[53;1H[?25h[?0c[?25l[?1c[55;198Hk[53;1H[55;198H [52;1H[55;209H0[52;1H[?25h[?0c[?25l[?1c[55;198Hk[52;1H[55;198H [51;1H[55;208H79[51;1H[?25h[?0c[?25l[?1c[55;198Hj[51;1H[55;198H [52;1H[55;208H80[52;1H[?25h[?0c[?25l[?1c[55;198Hk[52;1H[55;198H [51;1H[55;208H79[51;1H[?25h[?0c[?25l[?1c[55;198H;[51;1H[55;198H [51;1H[?25h[?0c[?25l[?1c[55;198Hw[51;1H[55;198H [51;3H[55;211H3[51;3H[?25h[?0c[?25l[?1c[55;198H:[51;3H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 82L, 1942C written[51;3H[55;208H79,3[10CBot[55;208H[K[55;208H79,3[10CBot[51;3H[?25h[?0c[?25l[?1c[55;198Hj[51;3H[55;198H [52;3H[55;208H80[52;3H[?25h[?0c[?25l[?1c[55;198Hw[52;3H[55;198H [52;6H[46m([9C)[m[55;211H6[52;6H[?25h[?0c[?25l[?1c[55;198Hq[52;6H[?25h[?0c[?25l[?1c[55;199Hk[52;6H


[1mrecording @k[m[55;13H[K[55;208H80,6[10CBot[52;6H[?25h[?0c[?25l[?1c[55;198H^[[52;6H[55;198H  [52;6H[55;198H^[[52;6H[55;198H  [52;6H[?25h[?0c[?25l[?1c[55;198H^[[52;6H[55;198H  [52;6H[55;198H^[[52;6H[55;198H  [52;6H[?25h[?0c[?25l[?1c[55;198Hq[52;6H[55;1H[K[52;6H[55;208H80,6[10CBot[52;6H[?25h[?0c[?25l[?1c[55;198Hk[52;6H[55;198H [51;6H[52;6H([9C)[55;208H79[51;6H[?25h[?0c[?25l[?1c[55;198Hk[51;6H[55;198H [50;6H[55;209H8[50;6H[?25h[?0c[?25l[?1c[55;198Hk[50;6H[55;198H [49;6H[55;209H7[49;6H[?25h[?0c[?25l[?1c[55;198Hk[49;6H[55;198H [48;6H[55;209H6[48;6H[?25h[?0c[?25l[?1c[55;198Hk[48;6H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5,3[47;3H[?25h[?0c[?25l[?1c[55;198Hk[47;3H[55;198H [46;8H[45;18H{

  }[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hj[46;8H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5,3  [47;3H[?25h[?0c[?25l[?1c[55;198Hj[47;3H[55;198H [48;6H[45;18H{

  }[55;209H6,6[48;6H[?25h[?0c[?25l[?1c[55;198Hj[48;6H[55;198H [49;6H[55;209H7[49;6H[?25h[?0c[?25l[?1c[55;198Hj[49;6H[55;198H [50;6H[55;209H8[50;6H[?25h[?0c[?25l[?1c[55;198Hj[50;6H[55;198H [51;6H[55;209H9[51;6H[?25h[?0c[?25l[?1c[55;198Hj[51;6H[55;198H [52;6H[46m([9C)[m[55;208H80[52;6H[?25h[?0c[?25l[?1c[55;198Hj[52;6H[55;198H [53;6H[52;6H([9C)[55;209H1[53;6H[?25h[?0c[?25l[?1c[55;198Hj[53;6H[55;198H [54;1H[38;1H[46m{[54;1H}[m[55;209H2,1[54;1H[?25h[?0c[?25l[?1c[55;198Hk[54;1H[55;198H [53;6H[38;1H{[54;1H}[55;209H1,6[53;6H[?25h[?0c[?25l[?1c[55;198Hk[53;6H[55;198H [52;6H[46m([9C)[m[55;209H0[52;6H[?25h[?0c[?25l[?1c[55;198Hk[52;6H[55;198H [51;6H[52;6H([9C)[55;208H79[51;6H[?25h[?0c[?25l[?1c[55;198Hk[51;6H[55;198H [50;6H[55;209H8[50;6H[?25h[?0c[?25l[?1c[55;198Hk[50;6H[55;198H [49;6H[55;209H7[49;6H[?25h[?0c[?25l[?1c[55;198Hk[49;6H[55;198H [48;6H[55;209H6[48;6H[?25h[?0c[?25l[?1c[55;198Hk[48;6H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5,3[47;3H[?25h[?0c[?25l[?1c[55;198Hk[47;3H[55;198H [46;8H[45;18H{

  }[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hk[46;8H[55;198H [45;6H[46m([9C)[m[55;209H3,6  [45;6H[?25h[?0c[?25l[?1c[55;198Hk[45;6H[55;198H [44;6H[45;6H([9C)[55;209H2[44;6H[?25h[?0c[?25l[?1c[55;198Hk[44;6H[55;198H [43;1H[55;209H1,0-1[43;1H[?25h[?0c[?25l[?1c[55;198Hj[43;1H[55;198H [44;6H[55;209H2,6  [44;6H[?25h[?0c[?25l[?1c[55;198Hj[44;6H[55;198H [45;6H[46m([9C)[m[55;209H3[45;6H[?25h[?0c[?25l[?1c[55;198Hj[45;6H[55;198H [46;8H[45;6H([9C)[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hk[46;8H[55;198H [45;6H[46m([9C)[m[55;209H3,6  [45;6H[?25h[?0c[?25l[?1c[55;198Hj[45;6H[55;198H [46;8H[45;6H([9C)[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hw[46;8H[55;198H [46;9H[55;211H2-9[46;9H[?25h[?0c[?25l[?1c[55;198Hw[46;9H[55;198H [46;13H[55;211H6-13[46;13H[?25h[?0c[?25l[?1c[55;198Hw[46;13H[55;198H [46;15H[55;211H8-15[46;15H[?25h[?0c[?25l[?1c[55;198Hw[46;15H[55;198H [46;20H[46m([12C)[m[55;211H13-20[46;20H[?25h[?0c[?25l[?1c[55;198Hw[46;20H[55;198H [46;21H([12C)[55;212H4-21[46;21H[?25h[?0c[?25l[?1c[55;198Hw[46;21H[55;198H [46;25H[46m[[1C][m[55;212H8-25[46;25H[?25h[?0c[?25l[?1c[55;198Hw[46;25H[55;198H [46;26H[[1C][55;212H9-26[46;26H[?25h[?0c[?25l[?1c[55;198Hw[46;26H[55;198H [46;27H[46m[[1C][m[55;211H20-27[46;27H[?25h[?0c[?25l[?1c[55;198Hw[46;27H[55;198H [46;30H[[1C][55;212H3-30[46;30H[?25h[?0c[?25l[?1c[55;198Hw[46;30H[55;198H [46;31H[55;212H4-31[46;31H[?25h[?0c[?25l[?1c[55;198Hb[46;31H[55;198H [46;30H[55;212H3-30[46;30H[?25h[?0c[?25l[?1c[55;198Hb[46;30H[55;198H [46;27H[46m[[1C][m[55;212H0-27[46;27H[?25h[?0c[?25l[?1c[55;198Hb[46;27H[55;198H [46;26H[[1C][55;211H19-26[46;26H[?25h[?0c[?25l[?1c[55;198Hb[46;26H[55;198H [46;25H[46m[[1C][m[55;212H8-25[46;25H[?25h[?0c[?25l[?1c[55;198Hb[46;25H[55;198H [46;21Hargv[[1C][55;212H4-21[46;21H[?25h[?0c[?25l[?1c[55;198Hb[46;21H[55;198H [46;20H[46m([12C)[m[55;212H3-20[46;20H[?25h[?0c[?25l[?1c[55;198Hj[46;20H[55;198H [47;3H[45;18H[46m{[m[46;20H([12C)
  [46m}[m[55;209H5,3    [47;3H[?25h[?0c[?25l[?1c[55;198Hj[47;3H[55;198H [48;20H[45;18H{

  }[55;209H6,20[48;20H[?25h[?0c[?25l[?1c[55;198Hj[48;20H[55;198H [49;20H[46m[[1C][m[55;209H7[49;20H[?25h[?0c[?25l[?1c[55;198Hj[49;20H[55;198H [50;20H[49;18H[[1C][55;209H8[50;20H[?25h[?0c[?25l[?1c[55;198Hj[50;20H[55;198H [51;20H[55;209H9[51;20H[?25h[?0c[?25l[?1c[55;198Hj[51;20H[55;198H [52;20H[55;208H80[52;20H[?25h[?0c[?25l[?1c[55;198Hj[52;20H[55;198H [53;11H[55;209H1,11[53;11H[?25h[?0c[?25l[?1c[55;198Hj[53;11H[55;198H [54;1H[38;1H[46m{[54;1H}[m[55;209H2,1 [54;1H[?25h[?0c[?25l[?1c[55;198Hj[54;1H[55;198H [54;1H[?25h[?0c[?25l[?1c[55;198Hk[54;1H[55;198H [53;11H[38;1H{[54;1H}[55;209H1,11[53;11H[?25h[?0c[?25l[?1c[55;198Hk[53;11H[55;198H [52;20H[55;209H0,20[52;20H[?25h[?0c[?25l[?1c[55;198Hk[52;20H[55;198H [51;20H[55;208H79[51;20H[?25h[?0c[?25l[?1c[55;198Hk[51;20H[55;198H [50;20H[55;209H8[50;20H[?25h[?0c[?25l[?1c[55;198Hk[50;20H[55;198H [49;20H[46m[[1C][m[55;209H7[49;20H[?25h[?0c[?25l[?1c[55;198Hk[49;20H[55;198H [48;20H[49;18H[[1C][55;209H6[48;20H[?25h[?0c[?25l[?1c[55;198Hj[48;20H[55;198H [49;20H[46m[[1C][m[55;209H7[49;20H[?25h[?0c[?25l[?1c[55;198H^Z[49;20H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ vim stat-points.c ls[Kjobs[2Pfgvalgrind ./stat-points point.dat out.txt 
==16478== Memcheck, a memory error detector
==16478== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16478== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==16478== Command: ./stat-points point.dat out.txt
==16478== 
cannot read point.dat: No such file or directory
==16478== 
==16478== HEAP SUMMARY:
==16478==     in use at exit: 584 bytes in 2 blocks
==16478==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==16478== 
==16478== LEAK SUMMARY:
==16478==    definitely lost: 0 bytes in 0 blocks
==16478==    indirectly lost: 0 bytes in 0 blocks
==16478==      possibly lost: 0 bytes in 0 blocks
==16478==    still reachable: 584 bytes in 2 blocks
==16478==         suppressed: 0 bytes in 0 blocks
==16478== Rerun with --leak-check=full to see details of leaked memory
==16478== 
==16478== For counts of detected and suppressed errors, rerun with: -v
==16478== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgrind ./stat-points point.dat out.txt [C[C[C[C[C[C[C[C[C[1@-[1@-[1@l[1@e[1@a[1@k[1@-[1@c[1@h[1@e[1@c[1@k[1@-[1P[1@=[1@f[1@u[1@l[1@l[1@ 
==16515== Memcheck, a memory error detector
==16515== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16515== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==16515== Command: ./stat-points point.dat out.txt
==16515== 
cannot read point.dat: No such file or directory
==16515== 
==16515== HEAP SUMMARY:
==16515==     in use at exit: 584 bytes in 2 blocks
==16515==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==16515== 
==16515== LEAK SUMMARY:
==16515==    definitely lost: 0 bytes in 0 blocks
==16515==    indirectly lost: 0 bytes in 0 blocks
==16515==      possibly lost: 0 bytes in 0 blocks
==16515==    still reachable: 584 bytes in 2 blocks
==16515==         suppressed: 0 bytes in 0 blocks
==16515== Reachable blocks (those to which a pointer was found) are not shown.
==16515== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==16515== 
==16515== For counts of detected and suppressed errors, rerun with: -v
==16515== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgrind --leak-check=full ./stat-points point.dat out.txt [C[1@ [C[1@-[1P[1@-[1@-[1@s[1@h[1@o[1@w[1@-[1@l[1@e[1@a[1@k[1@-[1@k[1@i[1@n[1@d[1@s[1@=[1@a[1@l[1@l
==16643== Memcheck, a memory error detector
==16643== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16643== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==16643== Command: ./stat-points point.dat out.txt
==16643== 
cannot read point.dat: No such file or directory
==16643== 
==16643== HEAP SUMMARY:
==16643==     in use at exit: 584 bytes in 2 blocks
==16643==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==16643== 
==16643== 32 bytes in 1 blocks are still reachable in loss record 1 of 2
==16643==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==16643==    by 0x109616: newDynArray (dyn-array.c:20)
==16643==    by 0x109596: main (stat-points.c:76)
==16643== 
==16643== 552 bytes in 1 blocks are still reachable in loss record 2 of 2
==16643==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==16643==    by 0x4A6E0FA: __fopen_internal (iofopen.c:65)
==16643==    by 0x109588: main (stat-points.c:74)
==16643== 
==16643== LEAK SUMMARY:
==16643==    definitely lost: 0 bytes in 0 blocks
==16643==    indirectly lost: 0 bytes in 0 blocks
==16643==      possibly lost: 0 bytes in 0 blocks
==16643==    still reachable: 584 bytes in 2 blocks
==16643==         suppressed: 0 bytes in 0 blocks
==16643== 
==16643== For counts of detected and suppressed errors, rerun with: -v
==16643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;1H[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  assert(n > [1m[35m0[m);
  [1m[32mdouble[m sum = [1m[35m0[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);
    [1m[32mdouble[m mag = magnitudePoint2(p);
    sum += mag;
  }
  [1m[33mreturn[m sum/n;
}

[1m[32mstatic[m [1m[32mvoid[m
statPoints(DynArray *points, [1m[32mFILE[m *out)
{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[32;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[46;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[46m[[m[1m[35m1[m[46m][m, points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) fclose(out);
  [1m[33mreturn[m [1m[35m0[m;
}[55;208H77,20[9CBot[49;20H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198H/[49;20H[55;198H[K[55;1H/[?25h[?0c[?25l[?1c[55;1H[K[49;20H[55;208H77,20[9CBot[49;20H[?25h[?0c[?25l[?1c[55;198H;[49;20H[55;198H [49;20H[?25h[?0c[?25l[?1c[55;198H7[49;20H[?25h[?0c[?25l[?1c[55;199H4[49;20H[?25h[?0c[?25l[?1c[55;200H^M[49;20H[55;198H    [54;1H[38;1H[46m{[m[49;18H[[1C][54;1H[46m}[m[55;208H82,1 [54;1H[?25h[?0c[?25l[?1c[55;198H;[54;1H[55;198H [54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;198H[K[55;1H:[?25h[?0c7[?25l[?1c[?25h[?0c4[?25l[?1c[?25h[?0c[?25l[?1c[46;9H[38;1H{[54;1H}[55;208H74,2-9[8CBot[46;9H[?25h[?0c[?25l[?1c[55;198H:[46;9H[55;1H[K[55;1H:[?25h[?0c7[?25l[?1c[?25h[?0c6[?25l[?1c[?25h[?0c[?25l[?1c[48;3H[55;208H76,3[10CBot[48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5[47;3H[?25h[?0c[?25l[?1c[55;198Hk[47;3H[55;198H [46;8H[45;18H{

  }[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hj[46;8H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5,3  [47;3H[?25h[?0c[?25l[?1c[55;198Hj[47;3H[55;198H [48;3H[45;18H{

  }[55;209H6[48;3H[?25h[?0c[?25l[?1c[55;198Hj[48;3H[55;198H [49;3H[55;209H7[49;3H[?25h[?0c[?25l[?1c[55;198Hj[49;3H[55;198H [50;3H[55;209H8[50;3H[?25h[?0c[?25l[?1c[55;198Hj[50;3H[55;198H [51;3H[55;209H9[51;3H[?25h[?0c[?25l[?1c[55;198Hj[51;3H[55;198H [52;3H[55;208H80[52;3H[?25h[?0c[?25l[?1c[55;198Hk[52;3H[55;198H [51;3H[55;208H79[51;3H[?25h[?0c[?25l[?1c[55;198Hk[51;3H[55;198H [50;3H[55;209H8[50;3H[?25h[?0c[?25l[?1c[55;198Hk[50;3H[55;198H [49;3H[55;209H7[49;3H[?25h[?0c[?25l[?1c[55;198Hk[49;3H[55;198H [48;3H[55;209H6[48;3H[?25h[?0c[?25l[?1c[55;198Hk[48;3H[55;198H [47;3H[45;18H[46m{

[m  [46m}[m[55;209H5[47;3H[?25h[?0c[?25l[?1c[55;198Hk[47;3H[55;198H [46;8H[45;18H{

  }[55;209H4,1-8[46;8H[?25h[?0c[?25l[?1c[55;198Hw[46;8H[55;198H [46;9H[55;211H2-9[46;9H[?25h[?0c[?25l[?1c[55;198Hw[46;9H[55;198H [46;13H[55;211H6-13[46;13H[?25h[?0c[?25l[?1c[55;198Hw[46;13H[55;198H [46;15H[55;211H8-15[46;15H[?25h[?0c[?25l[?1c[55;198Hw[46;15H[55;198H [46;20H[46m([12C)[m[55;211H13-20[46;20H[?25h[?0c[?25l[?1c[55;198Hw[46;20H[55;198H [46;21H([12C)[55;212H4-21[46;21H[?25h[?0c[?25l[?1c[55;198Hb[46;21H[55;198H [46;20H[46m([12C)[m[55;212H3-20[46;20H[?25h[?0c[?25l[?1c[55;198Hb[46;20H[55;198H [46;15Hfopen([12C)[55;211H8-15 [46;15H[?25h[?0c[?25l[?1c[55;198Hb[46;15H[55;198H [46;13H[55;211H6-13[46;13H[?25h[?0c[?25l[?1c[55;198H^W[46;13H[?25h[?0c[?25l[?1c[55;200Hv[46;13H[55;198H[K[45;13H[1;1HcomparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[67C[7m|[m
{                                            [67C[7m|[m
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[61C[7m|[m
}                                                  [61C[7m|[m
 [111C[7m|[m
[1m[32mstatic[m [1m[32mdouble[m[99C[7m|[m
averagePoints([1m[32mconst[m DynArray *points)[75C[7m|[m
{                                    [75C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  assert(n > [1m[35m0[m);                          [70C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i[6Ci < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);                [60C[7m|[m
    sum += mag;                     [76C[7m|[m
  }            [97C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}              [97C[7m|[m
 [111C[7m|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{                                      [73C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {                            [70C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m[27;13Hax[46Cn - [1m[35m1[m));[44C[7m|[m[28;12Haverage = averagePoints(points);                         [44C[7m|[m[29;12Hmedian = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,  [43C[7m|[m
            min, average, median, max);                            [45C[7m|[m
  }[9C                           [73C[7m|[m
}  [109C[7m|[m
 [111C[7m|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{                                 [78C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);                                                                 [35C[7m|[m
  }         [100C[7m|[m
   [109C[7m|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m
  }                               [78C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);                   [63C[7m|[m
  stat[7Cpoints, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);                          [63C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) fclose(out);[83C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;                  [83C[7m|[m
}          [101C[7m|[m
[1m[7mstat-points.c                                                                                 74,6-13        Bot [m[1;114HcomparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[2;114H{[3;116H[1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[4;114H}[6;114H[1m[32mstatic[m [1m[32mdouble[m[7;114HaveragePoints([1m[32mconst[m DynArray *points)[8;114H{[9;116H[1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[10;116Hassert(n > [1m[35m0[m);[11;116H[1m[32mdouble[m sum = [1m[35m0[m;[12;116H[1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[13;118H[1m[32mconst[m Point2 *p = getElementDynArray(points, i);[14;118H[1m[32mdouble[m mag = magnitudePoint2(p);[15;118Hsum += mag;[16;116H}[17;116H[1m[33mreturn[m sum/n;[18;114H}[20;114H[1m[32mstatic[m [1m[32mvoid[m[21;114HstatPoints(DynArray *points, [1m[32mFILE[m *out)[22;114H{[23;116HsortDynArray(points, comparePoint2);[24;116H[1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[25;116H[1m[33mif[m (n > [1m[35m0[m) {[26;118H[1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[27;118H[1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[28;118H[1m[32mdouble[m average = averagePoints(points);[29;118H[1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[30;118Hfprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[31;126Hmin, average, median, max);[32;116H}[33;114H}[35;114H[1m[32mint[m[36;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[37;114H{[38;116H[1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[39;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[40;118Hexit([1m[35m1[m);[41;116H}[43;116H[1m[32mFILE[m *out;[44;116H[1m[33mif[m (argc == [1m[35m3[m) {[45;122Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[46;116H}[47;116HDynArray *points = newDynArray([1m[33msizeof[m(Point2));[48;116HreadPoints(argv[[1m[35m1[m], points);[49;116HstatPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[50;116HfreeDynArray(points);[51;116H[1m[33mif[m (argc == [1m[35m3[m) fclose(out);[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7mstat-points.c                                                                                 74,6-13        Bot[45;13H[?25h[?0c[?25l[?1c[m[55;215H^W[45;13H[?25h[?0c[?25l[?1c[55;217Hl[45;13H[55;215H   [45;126H[54;1H[7mstat-points.c                                                                                 74,6-13        Bot [m[1m[7mstat-points.c                                                                                 74,6-13        Bot[45;126H[?25h[?0c[?25l[?1c[m[55;215H:[45;126H[55;1H[K[55;1H:[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0c...[?25l[?1cMakefile...[55;4H[K[55;4H[54;1H[1m[7mMakefile  dyn-array.c  dyn-array.h  gen-rand-points  gen-rand-points.c  out.txt  point2.h  points.dat  stat-points  stat-points.c  dyn-array.o  gen-rand-points.o  stat-points.o[31C       [8C   [m[55;4H...[54;1H[30m[43mMakefile[m
:e Makefile[?25h[?0c[54;1H[7mstat-points.c                                                                                 [?25l[?1c74,6-13        Bot [m[1C[1m[7mtat-points.c                                                  [31C74,6-13[8CBot[55;12H[m.[?25h[?0c[?25l[?1c[55;1H[K[45;126H[?25h[?0c[?25l[?1c[55;215H~@k[45;126H[55;215H   [45;125H[54;211H[1m[7m5-12[45;125H[?25h[?0c[?25l[?1c[m[55;215H:[45;125H[55;215H[K[55;1H:[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0c.[?25l[?1c[?25h[?0c.[?25l[?1c[?25h[?0c/[?25l[?1c[?25h[?0c...[?25l[?1cfile-char-count/...[55;7H[K[55;7H[54;1H[1m[7mfile-char-count/  file-copy/  lab13_log.txt  lab13_out.txt  no-buffer-copy/  rec-io/  stdin-char-count/                       [81C       [8C   [m[55;7H...[54;1H[30m[43mfile-char-count/[m[55;7Hfile-char-count/[?25h[?0c...[54;1H[1m[7mfile-char-count/[m[2C[30m[43mfile-copy/[?25l[?1c[m[55;13Hopy/[55;17H[K[55;17H[?25h[?0c[54;1H[7mstat-points.c                                                                                 [?25l[?1c74,6-13        Bot [m[1m[7mstat-points.c[81C74,5-12[8CBot[55;17H[m/[?25h[?0c...[?25l[?1cMakefile...[55;18H[K[55;18H[54;1H[1m[7mMakefile  file-copy  file-copy.c  t                                                                                           [81C       [8C   [m[55;18H...[54;1H[30m[43mMakefile[m[55;18HMakefile[?25h[?0c[54;1H[7mstat-points.c                                                                                 [?25l[?1c74,6-13        Bot [m[1m[7mstat-points.c[81C74,5-12[8CBot[m[55;1H[K[45;125H[?25h[?0c[?25l[?1c[55;215H~@k[45;125H[55;215H   [45;124H[54;211H[1m[7m4-11[45;124H[?25h[?0c[?25l[?1c[m[55;215H;[45;124H[55;215H [45;124H[?25h[?0c[?25l[?1c[55;215H:[45;124H[55;215H[K[55;1H:[?25h[?0c.[?25l[?1c[?25h[?0c.[?25l[?1c[?25h[?0c/[?25l[?1c[?25h[?0c[?25l[?1c[55;4H[K[55;4H[?25h[?0c[?25l[?1c[55;3H[K[55;3H[?25h[?0c[?25l[?1c[55;2H[K[55;2H[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0c.[?25l[?1c[?25h[?0c.[?25l[?1c[?25h[?0c/[?25l[?1c[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c[55;7H[K[55;7H[?25h[?0cf[?25l[?1c[?25h[?0ci[?25l[?1c[?25h[?0c...[?25l[?1cle-char-count/...[55;9H[K[55;9H[54;1H[1m[7mfile-char-count/  file-copy/                                                                                                  [81C       [8C   [m[55;9H...[54;1H[30m[43mfile-char-count/[m[55;9Hle-char-count/[?25h[?0c...[54;1H[1m[7mfile-char-count/[m[2C[30m[43mfile-copy/[?25l[?1c[m[55;13Hopy/[55;17H[K[55;17H[?25h[?0c[54;1H[7mstat-points.c                                                                                 [?25l[?1c74,6-13        Bot [m[1m[7mstat-points.c[81C74,4-11[8CBot[55;17H[m/[?25h[?0c[?25l[?1c[55;17H[K[55;17H[?25h[?0c...[?25l[?1cMakefile...[55;17H[K[55;17H[54;1H[1m[7mMakefile  file-copy  file-copy.c  t                                                                                           [81C       [8C   [m[55;17H...[54;1H[30m[43mMakefile[m[55;17HMakefile[?25h[?0c...[54;1H[1m[7mMakefile[m[2C[30m[43mfile-copy[?25l[?1c[m[55;17Hfile-copy[55;26H[K[55;26H[?25h[?0c...[54;11H[1m[7mfile-copy[m[2C[30m[43mfile-copy.c[?25l[?1c[m[55;27Hc[55;28H[K[55;28H[?25h[?0c[54;1H[7mstat-points.c                                                                                 [?25l[?1c74,6-13        Bot [m[1m[7mstat-points.c[81C74,4-11[8CBot[55;1H[m"../file-copy/file-copy.c" 54L, 1321C[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[1;132H[K[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[3;133H[K[4;114H[K[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[7;115H[K[8;114H  [1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[9;148H[K[10;116H  [1m[33mif[m (ferror(in)) {[11;116H    fprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;116H    exit([1m[35m1[m);[12;129H[K[13;118H}[13;119H[K[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[14;145H[K[15;118H  fprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;116H    exit([1m[35m1[m);[17;116H  }[17;119H[K[18;114H  }[19;114H}[20;114H[K[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[23;117H[K[24;114H[1m[32mint[m[24;117H[K[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H[46m{[m[26;118H[K[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[27;132H[K[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[29;126H[K[30;116H}[30;118H[K[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[31;146H[K[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;114H  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;114H    exit([1m[35m1[m);[36;126H[K[37;114H  }[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[39;127H[K[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;116H  exit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;120Hfclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;116H  exit([1m[35m1[m);[47;116H}[47;117H[K[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;139H[K[49;116H  fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;116H  exit([1m[35m1[m);[50;126H[K[51;116H}[51;117H[K[53;114H[46m}[m[54;114H[1m[7m../file-copy/file-copy.c[70C54,1   [53;114H[?25h[?0c[?25l[?1c[m[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215H^W[53;114H[?25h[?0c[?25l[?1c[55;217Hl[53;114H[55;215H   [53;114H[?25h[?0c[?25l[?1c[55;215Hj[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hl[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hk[53;114H[55;215H [52;114H[26;114H{[53;114H}[54;209H[1m[7m3[52;114H[?25h[?0c[?25l[?1c[m[55;215Hj[52;114H[55;215H [53;114H[26;114H[46m{[53;114H}[m[54;209H[1m[7m4[53;114H[?25h[?0c[?25l[?1c[m[55;215Hk[53;114H[55;215H [52;114H[26;114H{[53;114H}[54;209H[1m[7m3[52;114H[?25h[?0c[?25l[?1c[m[55;215Hk[52;114H[55;215H [51;114H[54;209H[1m[7m2[51;114H[?25h[?0c[?25l[?1c[m[55;215Hk[51;114H[55;215H [50;114H[54;209H[1m[7m1[50;114H[?25h[?0c[?25l[?1c[m[55;215Hk[50;114H[55;215H [49;114H[54;209H[1m[7m0[49;114H[?25h[?0c[?25l[?1c[m[55;215Hk[49;114H[55;215H [48;114H[54;208H[1m[7m49[48;114H[?25h[?0c[?25l[?1c[m[55;215Hk[48;114H[55;215H [47;114H[54;209H[1m[7m8[47;114H[?25h[?0c[?25l[?1c[m[55;215Hk[47;114H[55;215H [46;114H[54;209H[1m[7m7[46;114H[?25h[?0c[?25l[?1c[m[55;215Hk[46;114H[55;215H [45;114H[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hk[45;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215Hk[44;114H[55;215H [43;114H[54;209H[1m[7m4[43;114H[?25h[?0c[?25l[?1c[m[55;215Hk[43;114H[55;215H [42;114H[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hk[42;114H[55;215H [41;114H[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hk[41;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hk[40;114H[55;215H [39;114H[54;209H[1m[7m0[39;114H[?25h[?0c[?25l[?1c[m[55;215Hk[39;114H[55;215H [38;114H[54;208H[1m[7m39[38;114H[?25h[?0c[?25l[?1c[m[55;215Hk[38;114H[55;215H [37;114H[54;209H[1m[7m8[37;114H[?25h[?0c[?25l[?1c[m[55;215Hj[37;114H[55;215H [38;114H[54;209H[1m[7m9[38;114H[?25h[?0c[?25l[?1c[m[55;215Hj[38;114H[55;215H [39;114H[54;208H[1m[7m40[39;114H[?25h[?0c[?25l[?1c[m[55;215HV[39;114H[55;215H1[39;114H [7m [m[1m[7m[33mif[m[7m (!out) { [m[55;1H[1m-- VISUAL LINE --[m[55;18H[K[55;215H1[39;114H[?25h[?0c[?25l[?1c[55;215Hj[39;114H[55;215H2[40;114H[39;114H[7m [40;115H   fprintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot write [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, destName, strerror(errno)); [m[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hj[40;114H[55;215H3[41;114H[40;114H[7m [41;115H   exit([m[1m[7m[35m1[m[7m); [m[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hj[41;114H[55;215H4[42;114H[41;114H[7m [42;115H } [m[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hy[42;114H[39;114H  [1m[33mif[m (!out) {[39;127H[K[40;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[40;186H[K[41;114H    exit([1m[35m1[m);[41;126H[K[42;115H }[42;117H[K[55;1H[K[55;1H4 lines yanked[39;114H[54;209H[1m[7m0[39;114H[?25h[?0c[?25l[?1c[m[55;215H^W[39;114H[?25h[?0c[?25l[?1c[55;217Hh[39;114H[55;215H   [45;13H[54;1H[1m[7mstat-points.c                                                                                 74,6-13        Bot [m[7m../file-copy/file-copy.c                                                                      40,1           Bot[45;13H[?25h[?0c[?25l[?1c[m[55;215Hj[45;13H[55;215H [46;3H[44;18H[46m{

[m  [46m}[m[54;96H[1m[7m5,3   [46;3H[?25h[?0c[?25l[?1c[m[55;215Hk[46;3H[55;215H [45;13H[44;18H{

  }[54;96H[1m[7m4,6-13[45;13H[?25h[?0c[?25l[?1c[m[55;215Ho[45;13H[55;215H [46;9H[55;1H[1m-- INSERT --[m[55;13H[K[46;1H                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) fclose(out);                                                                                   
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     [54;15H[1m[7m[+][78C5,2-9 [8C96%[46;9H[?25h[?0c[m[55;1H[K[46;1H[?25l[?1c[55;215H^[[46;1H[55;215H  [46;9H[54;98H[1m[7m0-1[46;1H[?25h[?0c[?25l[?1c[m[55;215Hp[46;1H[55;1H4 more lines[55;215H[K[47;3H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  [47;3H[1m[33mif[m (!out) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }[55;1H[K[55;1H4 more lines[54;96H[1m[7m6,3  [9C85[47;3H[?25h[?0c[?25l[?1c[m[55;215Hk[47;3H[55;215H [46;1H[54;96H[1m[7m5,0-1[46;1H[?25h[?0c[?25l[?1c[m[55;215Hd[46;1H[?25h[?0c[?25l[?1c[55;216Hd[46;1H[55;215H  [46;3H  [1m[33mif[m (!out) {                                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                        
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
                                                                                                                  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[55;1H[K[54;98H[1m[7m3  [10C7[46;3H[?25h[?0c[?25l[?1c[m[55;215H^V[46;3H[55;215H1x1[46;3H[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x1[46;3H[?25h[?0c[?25l[?1c[55;215Hj  [46;3H[55;215H2x1[47;3H[46;3H[1m[7m[33mi[m[54;96H[1m[7m6[47;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [47;3H[55;215H3x1[48;3H[47;3H[7m [m[54;96H[1m[7m7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [48;3H[55;215H4x1[48;3H[1;1H{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
  [1m[7m[33mi[m[1m[33mf[m (!out) {                                                                                                   
  [7m [m fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                        
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
                                                                                                                [45;13H[46m{[m

  [7m [m
  [46m}[m[53;3HfreeDynArray(points);[55;215H[K[55;215H4x1[48;3H[54;96H[1m[7m8[13C90[48;3H[?25h[?0c[?25l[?1c[m[55;215HI  [48;3H[45;3H[1m[33mi[m
   
   [55;1H[K[45;3H[55;1H[1m-- INSERT --[m[45;13H{[48;3H}[54;96H[1m[7m5[45;3H[?25h[?0c[?25l[?1c[m      [1m[33mif[m (!out) {[54;98H[1m[7m4-9[45;9H[?25h[?0c[m[55;1H[K[45;8H[?25l[?1c[55;215H^[[45;8H[55;215H  [45;9H
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
          exit([1m[35m1[m);
        }[54;98H[1m[7m3-8[45;8H[?25h[?0c[?25l[?1c[m[55;215Hj[45;8H[55;215H [46;8H[54;96H[1m[7m6[46;8H[?25h[?0c[?25l[?1c[m[55;215Hj[46;8H[55;215H [47;8H[54;96H[1m[7m7[47;8H[?25h[?0c[?25l[?1c[m[55;215Hj[47;8H[55;215H [48;8H[54;96H[1m[7m8[48;8H[?25h[?0c[?25l[?1c[m[55;215Hj[48;8H[55;215H [48;3H[1;1H  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                  
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
                                                                                                                [42;18H[46m{[48;3H}[m[53;3H[1m[33mif[m (argc == [1m[35m3[m) fclose(out);[54;96H[1m[7m9,3  [10C3[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;8H[1;1H}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) [46m{[m                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                  
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  [46m}[m                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) fclose(out);                                                                                   
                                                                                                                [41;18H{[47;3H}[53;3H[1m[33mreturn[m [1m[35m0[m;[54;95H[1m[7m80,8[12C6[48;8H[?25h[?0c[?25l[?1c[m[55;215Hj[48;8H[55;215H [48;8H[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                  
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) fclose(out);                                                                                   
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
                                                                                                                }[54;96H[1m[7m1[13CBot[48;8H[?25h[?0c[?25l[?1c[m[55;215Hj[48;8H[55;215H [49;8H[54;96H[1m[7m2[49;8H[?25h[?0c[?25l[?1c[m[55;215Hj[49;8H[55;215H [50;8H[54;96H[1m[7m3[50;8H[?25h[?0c[?25l[?1c[m[55;215Hj[50;8H[55;215H [51;8H[54;96H[1m[7m4[51;8H[?25h[?0c[?25l[?1c[m[55;215Hj[51;8H[55;215H [52;8H[54;96H[1m[7m5[52;8H[?25h[?0c[?25l[?1c[m[55;215Hj[52;8H[55;215H [53;1H[33;1H[46m{[53;1H}[m[54;96H[1m[7m6,1[53;1H[?25h[?0c[?25l[?1c[m[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hk[53;1H[55;215H [52;8H[33;1H{[53;1H}[54;96H[1m[7m5,8[52;8H[?25h[?0c[?25l[?1c[m[55;215Hk[52;8H[55;215H [51;8H[54;96H[1m[7m4[51;8H[?25h[?0c[?25l[?1c[m[55;215Hk[51;8H[55;215H [50;8H[54;96H[1m[7m3[50;8H[?25h[?0c[?25l[?1c[m[55;215Hk[50;8H[55;215H [49;8H[54;96H[1m[7m2[49;8H[?25h[?0c[?25l[?1c[m[55;215Hk[49;8H[55;215H [48;8H[54;96H[1m[7m1[48;8H[?25h[?0c[?25l[?1c[m[55;215Hk[48;8H[55;215H [47;8H[54;96H[1m[7m0[47;8H[?25h[?0c[?25l[?1c[m[55;215Hk[47;8H[55;215H [46;3H[40;18H[46m{[46;3H}[m[54;95H[1m[7m79,3[46;3H[?25h[?0c[?25l[?1c[m[55;215Hk[46;3H[55;215H [45;8H[40;18H{[46;3H}[54;96H[1m[7m8,3-8[45;8H[?25h[?0c[?25l[?1c[m[55;215Hk[45;8H[55;215H [44;8H[54;96H[1m[7m7[44;8H[?25h[?0c[?25l[?1c[m[55;215Hk[44;8H[55;215H [43;8H[54;96H[1m[7m6[43;8H[?25h[?0c[?25l[?1c[m[55;215Hw[43;8H[55;215H [43;11H[54;98H[1m[7m6-11[43;11H[?25h[?0c[?25l[?1c[m[55;215Hw[43;11H[55;215H [43;18H[46m([58C)[m[54;98H[1m[7m13-18[43;18H[?25h[?0c[?25l[?1c[m[55;215Hw[43;18H[55;215H [43;19H([58C)[54;99H[1m[7m4-19[43;19H[?25h[?0c[?25l[?1c[m[55;215Hw[43;19H[55;215H [43;25H[54;98H[1m[7m20-25[43;25H[?25h[?0c[?25l[?1c[m[55;215Hw[43;25H[55;215H [43;27H[54;99H[1m[7m2-27[43;27H[?25h[?0c[?25l[?1c[m[55;215Hw[43;27H[55;215H [43;28H[54;99H[1m[7m3-28[43;28H[?25h[?0c[?25l[?1c[m[55;215Hw[43;28H[55;215H [43;35H[54;98H[1m[7m30-35[43;35H[?25h[?0c[?25l[?1c[m[55;215Hw[43;35H[55;215H [43;41H[54;99H[1m[7m6-41[43;41H[?25h[?0c[?25l[?1c[m[55;215Hw[43;41H[55;215H [43;42H[54;99H[1m[7m7-42[43;42H[?25h[?0c[?25l[?1c[m[55;215Hw[43;42H[55;215H [43;43H[54;99H[1m[7m8-43[43;43H[?25h[?0c[?25l[?1c[m[55;215Hw[43;43H[55;215H [43;45H[54;98H[1m[7m40-45[43;45H[?25h[?0c[?25l[?1c[m[55;215Hw[43;45H[55;215H [43;46H[54;99H[1m[7m1-46[43;46H[?25h[?0c[?25l[?1c[m[55;215Hw[43;46H[55;215H [43;47H[54;99H[1m[7m2-47[43;47H[?25h[?0c[?25l[?1c[m[55;215Hw[43;47H[55;215H [43;48H[54;99H[1m[7m3-48[43;48H[?25h[?0c[?25l[?1c[m[55;215Hw[43;48H[55;215H [43;49H[54;99H[1m[7m4-49[43;49H[?25h[?0c[?25l[?1c[m[55;215Hw[43;49H[55;215H [43;52H[54;99H[1m[7m7-52[43;52H[?25h[?0c[?25l[?1c[m[55;215Hw[43;52H[55;215H [43;60H[54;98H[1m[7m55-60[43;60H[?25h[?0c[?25l[?1c[m[55;215Hb[43;60H[55;215H [43;52H[54;98H[1m[7m47-52[43;52H[?25h[?0c[?25l[?1c[m[55;215Hc[43;52H[?25h[?0c[?25l[?1c[55;216Hw[43;52H[55;215H  [43;52H[55;1H[1m-- INSERT --[m[43;52H, strerror(errno));        [43;52H[?25h[?0c[?25l[?1ca, strerror(errno));[54;99H[1m[7m8-53[43;53H[?25h[?0c[?25l[?1c[mr, strerror(errno));[54;99H[1m[7m9-54[43;54H[?25h[?0c[?25l[?1c[mg, strerror(errno));[54;98H[1m[7m50-55[43;55H[?25h[?0c[?25l[?1c[mc, strerror(errno));[54;99H[1m[7m1-56[43;56H[?25h[?0c[?25l[?1c[m, strerror(errno)); [54;99H[1m[7m0-55[43;55H[?25h[?0c[?25l[?1c[mv, strerror(errno));[54;99H[1m[7m1-56[43;56H[?25h[?0c[?25l[?1c[mp, strerror(errno));[54;99H[1m[7m2-57[43;57H[?25h[?0c[?25l[?1c[m, strerror(errno)); [54;99H[1m[7m1-56[43;56H[?25h[?0c[?25l[?1c[m[, strerror(errno)[1m[37m[41m);[44;18H;[m[54;99H[1m[7m2-57[43;57H[?25h[?0c[?25l[?1c[m[1m[35m2[m, strerror(errno)[1m[37m[41m);[m[54;99H[1m[7m3-58[43;58H[?25h[?0c[?25l[?1c[m], strerror(errno));[44;18H;[43;56H[46m[[1C][m[54;99H[1m[7m4-59[43;59H[?25h[?0c[m[55;1H[K[43;58H[?25l[?1c[55;215H^[[43;58H[55;215H  [43;59H[54;99H[1m[7m3-58[43;58H[?25h[?0c[?25l[?1c[m[55;215Hw[43;58H[55;215H [43;61H[[1C][54;99H[1m[7m6-61[43;61H[?25h[?0c[?25l[?1c[m[55;215Hw[43;61H[55;215H [43;69H[46m([merrno[46m)[m[54;98H[1m[7m64-69[43;69H[?25h[?0c[?25l[?1c[m[55;215H:[43;69H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 86L, 2049C written[43;69H[54;15H[1m[7m   [43;69H[?25h[?0c[?25l[?1c[m[55;215HG[43;69H[55;215H [53;1H[33;1H[46m{[m[43;69H(errno)[53;1H[46m}[m[54;95H[1m[7m86,1    [53;1H[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[33;1H{[53;1H}[54;96H[1m[7m5[52;1H[?25h[?0c[?25l[?1c[m[55;215Hk[52;1H[55;215H [51;1H[54;96H[1m[7m4[51;1H[?25h[?0c[?25l[?1c[m[55;215Hw[51;1H[55;215H [51;3H[54;98H[1m[7m3[51;3H[?25h[?0c[?25l[?1c[m[55;215Hw[51;3H[55;215H [51;6H[46m([9C)[m[54;98H[1m[7m6[51;6H[?25h[?0c[?25l[?1c[m[55;215Hw[51;6H[55;215H [51;7H([9C)[54;98H[1m[7m7[51;7H[?25h[?0c[?25l[?1c[m[55;215Hw[51;7H[55;215H [51;12H[54;98H[1m[7m12[51;12H[?25h[?0c[?25l[?1c[m[55;215Hw[51;12H[55;215H [51;15H[54;99H[1m[7m5[51;15H[?25h[?0c[?25l[?1c[m[55;215Hw[51;15H[55;215H [51;16H[51;6H[46m([9C)[m[54;99H[1m[7m6[51;16H[?25h[?0c[?25l[?1c[m[55;215Hw[51;16H[55;215H [51;18H[51;6H([9C)[54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[m[55;215Hk[51;18H[55;215H [50;18H[54;96H[1m[7m3[50;18H[?25h[?0c[?25l[?1c[m[55;215Hj[50;18H[55;215H [51;18H[54;96H[1m[7m4[51;18H[?25h[?0c[?25l[?1c[m[55;215Hi[51;18H[55;215H [51;18H[55;1H[1m-- INSERT --[m[55;13H[K[51;18H[?25h[?0c[?25l[?1cPfclose(out);[54;15H[1m[7m[+][81C9[51;19H[?25h[?0c[m[55;1H[K[51;18H[?25l[?1c[55;215H^[[51;18H[55;215H  [51;19H[54;99H[1m[7m8[51;18H[?25h[?0c[?25l[?1c[m[55;215Hr[51;18H[?25h[?0c[?25l[?1c[55;216H{[51;18H[55;215H  [51;18H[46m{

}[51;18H[?25h[?0c[?25l[?1c[m[55;215Ho[51;18H[55;215H [51;11H[55;1H[1m-- INSERT --[m[1;1H[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) [46m{[mfclose(out);                                                                                  
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
[46m}[m                                                                                                               
                                                                                                                [51;3H         
[46m [m [1m[33mreturn[m [1m[35m0[m;
}[50;18H{

 [54;96H[1m[7m5,4-11[51;11H[?25h[?0c[?25l[?1c[m  }[50;18H[46m{
[m  [46m}[m[54;99H[1m[7m   [51;4H[?25h[?0c[m[55;1H[K[51;3H[?25l[?1c[55;215H^[[51;3H[55;215H  [51;4H[54;98H[1m[7m3[51;3H[?25h[?0c[?25l[?1c[m[55;215Hk[51;3H[55;215H [50;3H[15C{
  }[54;96H[1m[7m4[50;3H[?25h[?0c[?25l[?1c[m[55;215Hw[50;3H[55;215H [50;6H[46m([9C)[m[54;98H[1m[7m6[50;6H[?25h[?0c[?25l[?1c[m[55;215Hw[50;6H[55;215H [50;7H([9C)[54;98H[1m[7m7[50;7H[?25h[?0c[?25l[?1c[m[55;215Hw[50;7H[55;215H [50;12H[54;98H[1m[7m12[50;12H[?25h[?0c[?25l[?1c[m[55;215Hw[50;12H[55;215H [50;15H[54;99H[1m[7m5[50;15H[?25h[?0c[?25l[?1c[m[55;215Hw[50;15H[55;215H [50;16H[50;6H[46m([9C)[m[54;99H[1m[7m6[50;16H[?25h[?0c[?25l[?1c[m[55;215Hw[50;16H[55;215H [50;18H[50;6H([9C) [46m{
[m  [46m}[m[54;99H[1m[7m8[50;18H[?25h[?0c[?25l[?1c[m[55;215Hl[50;18H[55;215H [50;19H{
  }[54;99H[1m[7m9[50;19H[?25h[?0c[?25l[?1c[m[55;215Hi[50;19H[55;215H [50;19H[55;1H[1m-- INSERT --[50;19H[?25h[?0c[?25l[?1c[m[1;1HaveragePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {fclose(out);                                                                                  
  }                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               
                                                                                                                [50;1H                                                                                                                
  }                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               [49;19H            [50;11Hfclose(out);[54;96H[1m[7m5,4-11[50;11H[?25h[?0c[m[55;1H[K[50;10H[?25l[?1c[55;215H^[[50;10H[55;215H  [50;11H[54;98H[1m[7m3-10[50;10H[?25h[?0c[?25l[?1c[m[55;215Hl[50;10H[55;215H [50;11H[54;98H[1m[7m4-11[50;11H[?25h[?0c[?25l[?1c[m[55;215Hi[50;11H[55;215H [50;11H[55;1H[1m-- INSERT --[50;11H[?25h[?0c[?25l[?1c[mfclose(out); [54;98H[1m[7m3-10[50;10H[?25h[?0c[?25l[?1c[mfclose(out); [54;98H[1m[7m2-9 [50;9H[?25h[?0c[?25l[?1c[mfclose(out);        [54;98H[1m[7m1  [50;1H[?25h[?0c[?25l[?1c[m[49;1Hfclose(out);                                                                                                    
  }                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               
                                                                                                                [49;1H  [1m[33mif[m (argc == [1m[35m3[m) {fclose(out);[53;1H[1m[34m~                                                                                                               [m[49;18H[46m{
[m  [46m}[m[54;96H[1m[7m4,19[49;19H[?25h[?0c[m[55;1H[K[49;18H[?25l[?1c[55;215H^[[49;18H[55;215H  [49;19H[54;99H[1m[7m8[49;18H[?25h[?0c[?25l[?1c[m[55;215Hl[49;18H[55;215H [49;19H{
  }[54;99H[1m[7m9[49;19H[?25h[?0c[?25l[?1c[m[55;215Hd[49;19H[?25h[?0c[?25l[?1c[55;216H$[49;19H[55;215H  [49;18H[46m{[m            
  [46m}[m[54;99H[1m[7m8[49;18H[?25h[?0c[?25l[?1c[m[55;215H^W[49;18H[?25h[?0c[?25l[?1c[55;217Hl[49;18H[55;215H   [39;114H[54;1H[7mstat-points.c [+]                                                                             84,18          Bot [m[1m[7m../file-copy/file-copy.c                                                                      40,1           Bot[39;114H[?25h[?0c[?25l[?1c[m[55;215Hj[39;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hk[40;114H[55;215H [39;114H[54;209H[1m[7m0[39;114H[?25h[?0c[?25l[?1c[m[55;215Hj[39;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hj[40;114H[55;215H [41;114H[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hj[41;114H[55;215H [42;114H[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hj[42;114H[55;215H [43;114H[54;209H[1m[7m4[43;114H[?25h[?0c[?25l[?1c[m[55;215Hj[43;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215HV[44;114H[55;215H1[44;114H [7m [m[1m[7m[33mif[m[7m (fclose(in) != [m[1m[7m[35m0[m[7m) { [m[55;1H[1m-- VISUAL LINE --[m[55;215H[K[55;215H1[44;114H[?25h[?0c[?25l[?1c[55;215Hj[44;114H[55;215H2[45;114H[44;114H[7m [45;115H   fprintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot close [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, srcName, strerror(errno)); [m[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hj[45;114H[55;215H3[46;114H[45;114H[7m [46;115H   exit([m[1m[7m[35m1[m[7m); [m[54;209H[1m[7m7[46;114H[?25h[?0c[?25l[?1c[m[55;215Hj[46;114H[55;215H4[47;114H[46;114H[7m [47;115H } [m[54;209H[1m[7m8[47;114H[?25h[?0c[?25l[?1c[m[55;215H^[[47;114H[55;215H4 [47;114H[55;216H^[[47;114H[55;215H   [47;114H[44;114H  [1m[33mif[m (fclose(in) != [1m[35m0[m) {[44;138H[K[45;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[45;185H[K[46;114H    exit([1m[35m1[m);[46;126H[K[47;115H }[47;117H[K[55;1H[K[47;114H[?25h[?0c[?25l[?1c[55;215Hj[47;114H[55;215H [48;114H[54;209H[1m[7m9[48;114H[?25h[?0c[?25l[?1c[m[55;215Hj[48;114H[55;215H [49;114H[54;208H[1m[7m50[49;114H[?25h[?0c[?25l[?1c[m[55;215Hk[49;114H[55;215H [48;114H[54;208H[1m[7m49[48;114H[?25h[?0c[?25l[?1c[m[55;215HV[48;114H[55;215H1[48;114H [7m [m[1m[7m[33mif[m[7m (fclose(out) != [m[1m[7m[35m0[m[7m) { [m[55;1H[1m-- VISUAL LINE --[m[55;215H[K[55;215H1[48;114H[?25h[?0c[?25l[?1c[55;215Hj[48;114H[55;215H2[49;114H[48;114H[7m [49;115H   fprintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot close [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, destName, strerror(errno)); [m[54;208H[1m[7m50[49;114H[?25h[?0c[?25l[?1c[m[55;215Hj[49;114H[55;215H3[50;114H[49;114H[7m [50;115H   exit([m[1m[7m[35m1[m[7m); [m[54;209H[1m[7m1[50;114H[?25h[?0c[?25l[?1c[m[55;215Hj[50;114H[55;215H4[51;114H[50;114H[7m [51;115H } [m[54;209H[1m[7m2[51;114H[?25h[?0c[?25l[?1c[m[55;215Hy[51;114H[48;114H  [1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;139H[K[49;114H    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[49;186H[K[50;114H    exit([1m[35m1[m);[50;126H[K[51;115H }[51;117H[K[55;1H[K[55;1H4 lines yanked[48;114H[54;208H[1m[7m49[48;114H[?25h[?0c[?25l[?1c[m[55;215H^W[48;114H[?25h[?0c[?25l[?1c[55;217Hh[48;114H[55;215H   [49;18H[54;1H[1m[7mstat-points.c [+]                                                                             84,18          Bot [m[7m../file-copy/file-copy.c                                                                      49,1           Bot[49;18H[?25h[?0c[?25l[?1c[m[55;215Hk[49;18H[55;215H [48;18H[49;18H{
  }[54;96H[1m[7m3[48;18H[?25h[?0c[?25l[?1c[m[55;215Hj[48;18H[55;215H [49;18H[46m{
[m  [46m}[m[54;96H[1m[7m4[49;18H[?25h[?0c[?25l[?1c[m[55;215Hp[49;18H[55;3Hmore lines[55;13H[K[48;3H[1;1H  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) [46m{[m                                                                                              
  [46m}[m                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
}                                                                                                               
[1m[34m~                                                                                                               [m
                                                                                                                
                                                                                                                [48;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  [46m}[m                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     [47;18H{
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
    exit([1m[35m1[m);
  }
  }[55;1H[K[55;1H4 more lines[54;96H[1m[7m5,3 [10C97%[48;3H[?25h[?0c[?25l[?1c[m[55;215H^V[48;3H[55;215H1x1[48;3H[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x1[48;3H[?25h[?0c[?25l[?1c[55;215Hj  [48;3H[55;215H2x1[48;3H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
  [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                       
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));                                        
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  }                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     
                                                                                                                [47;3H[1m[7m[33mi[m[53;1H}[55;215H[K[55;215H2x1[48;3H[54;96H[1m[7m6[13CBot[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [48;3H[55;215H3x1[49;3H[48;3H[7m [m[54;96H[1m[7m7[49;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [49;3H[55;215H4x1[50;3H[47;25H[46m{[m

  [7m [m
  [46m}[m[54;96H[1m[7m8[50;3H[?25h[?0c[?25l[?1c[m[55;215HI  [50;3H[47;3H[1m[33mi[m
   
   [55;1H[K[47;3H[55;1H[1m-- INSERT --[m[47;25H{[50;3H}[54;96H[1m[7m5[47;3H[?25h[?0c[?25l[?1c[m      [1m[33mif[m (fclose(out) != [1m[35m0[m) {[54;98H[1m[7m4-9[47;9H[?25h[?0c[m[55;1H[K[47;8H[?25l[?1c[55;215H^[[47;8H[55;215H  [47;9H
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));
          exit([1m[35m1[m);
        }[54;98H[1m[7m3-8[47;8H[?25h[?0c[?25l[?1c[m[55;215H:[47;8H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 91L, 2162C written[47;8H[54;15H[1m[7m   [47;8H[?25h[?0c[?25l[?1c[m[55;215H^Z[47;8H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
[01m[Kstat-points.c:[m[K In function ‚Äò[01m[Kmain[m[K‚Äô:
[01m[Kstat-points.c:86:47:[m[K [01;31m[Kerror: [m[K‚Äò[01m[KdestName[m[K‚Äô undeclared (first use in this function); did you mean ‚Äò[01m[Krename[m[K‚Äô?
      fprintf(stderr, "cannot close %s: %s\n", [01;31m[KdestName[m[K, strerror(errno));
                                               [01;31m[K^~~~~~~~[m[K
                                               [32m[Krename[m[K
[01m[Kstat-points.c:86:47:[m[K [01;36m[Knote: [m[Keach undeclared identifier is reported only once for each function it appears in
make: *** [<builtin>: stat-points.o] Error 1
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);[82C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[34C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
}[111C[7m|[m
[1m[7mstat-points.c                                                                                 85,3-8         Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      49,1           Bot[47;8H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hj[47;8H[55;215H [48;8H[54;96H[1m[7m6[48;8H[?25h[?0c[?25l[?1c[m[55;215Hk[48;8H[55;215H [47;8H[54;96H[1m[7m5[47;8H[?25h[?0c[?25l[?1c[m[55;215Hj[47;8H[55;215H [48;8H[54;96H[1m[7m6[48;8H[?25h[?0c[?25l[?1c[m[55;215HA[48;8H[55;215H [48;79H[55;1H[1m-- INSERT --[m[54;98H[1m[7m74-79[48;79H[?25h[?0c[m[55;1H[K[48;78H[?25l[?1c[55;215H^[[48;78H[55;215H  [48;79H[54;99H[1m[7m3-78[48;78H[?25h[?0c[?25l[?1c[m[55;215Hb[48;78H[55;215H [48;76H[46m([merrno[46m)[m[54;99H[1m[7m1-76[48;76H[?25h[?0c[?25l[?1c[m[55;215Hb[48;76H[55;215H [48;71H(errno)[54;98H[1m[7m66-71[48;71H[?25h[?0c[?25l[?1c[m[55;215Hb[48;71H[55;215H [48;70H[46m([merrno[46m)[m[54;99H[1m[7m5-70[48;70H[?25h[?0c[?25l[?1c[m[55;215Hb[48;70H[55;215H [48;62H[8C(errno)[54;98H[1m[7m57-62[48;62H[?25h[?0c[?25l[?1c[m[55;215Hb[48;62H[55;215H [48;60H[54;99H[1m[7m5-60[48;60H[?25h[?0c[?25l[?1c[m[55;215Hb[48;60H[55;215H [48;52H[54;98H[1m[7m47-52[48;52H[?25h[?0c[?25l[?1c[m[55;215Hc[48;52H[?25h[?0c[?25l[?1c[55;216Hw[48;52H[55;215H  [48;52H[55;1H[1m-- INSERT --[m[48;52H, strerror(errno));        [54;15H[1m[7m[+][48;52H[?25h[?0c[?25l[?1c[ma, strerror(errno));[54;99H[1m[7m8-53[48;53H[?25h[?0c[?25l[?1c[mr, strerror(errno));[54;99H[1m[7m9-54[48;54H[?25h[?0c[?25l[?1c[mg, strerror(errno));[54;98H[1m[7m50-55[48;55H[?25h[?0c[?25l[?1c[mv, strerror(errno));[54;99H[1m[7m1-56[48;56H[?25h[?0c[?25l[?1c[m[, strerror(errno)[1m[37m[41m);[49;18H;[m[54;99H[1m[7m2-57[48;57H[?25h[?0c[?25l[?1c[m[1m[35m2[m, strerror(errno)[1m[37m[41m);[m[54;99H[1m[7m3-58[48;58H[?25h[?0c[?25l[?1c[m], strerror(errno));[49;18H;[48;56H[46m[[1C][m[54;99H[1m[7m4-59[48;59H[?25h[?0c[m[55;1H[K[48;58H[?25l[?1c[55;215H^[[48;58H[55;215H  [48;59H[54;99H[1m[7m3-58[48;58H[?25h[?0c[?25l[?1c[m[55;215H:[48;58H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 91L, 2161C written[48;58H[54;15H[1m[7m   [48;58H[?25h[?0c[?25l[?1c[m[55;215H^Z[48;58H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
gcc   stat-points.o dyn-array.o  -lm -o stat-points
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make[2Pfgmake[2Pfgvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt [22P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[22@--show-leak-kinds=all [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
==17317== Memcheck, a memory error detector
==17317== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==17317== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==17317== Command: ./stat-points point.dat out.txt
==17317== 
cannot read point.dat: No such file or directory
==17317== 
==17317== HEAP SUMMARY:
==17317==     in use at exit: 584 bytes in 2 blocks
==17317==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==17317== 
==17317== 32 bytes in 1 blocks are still reachable in loss record 1 of 2
==17317==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==17317==    by 0x1096A3: newDynArray (dyn-array.c:20)
==17317==    by 0x1095DE: main (stat-points.c:80)
==17317== 
==17317== 552 bytes in 1 blocks are still reachable in loss record 2 of 2
==17317==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==17317==    by 0x4A6E0FA: __fopen_internal (iofopen.c:65)
==17317==    by 0x109588: main (stat-points.c:74)
==17317== 
==17317== LEAK SUMMARY:
==17317==    definitely lost: 0 bytes in 0 blocks
==17317==    indirectly lost: 0 bytes in 0 blocks
==17317==      possibly lost: 0 bytes in 0 blocks
==17317==    still reachable: 584 bytes in 2 blocks
==17317==         suppressed: 0 bytes in 0 blocks
==17317== 
==17317== For counts of detected and suppressed errors, rerun with: -v
==17317== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ d[Kfg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);[82C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[46m[[m[1m[35m2[m[46m][m, strerror(errno));[35C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
}[111C[7m|[m
[1m[7mstat-points.c                                                                                 86,53-58       Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      49,1           Bot[48;58H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hk[48;58H[55;215H [47;31H[46m{[m[48;56H[[1C][50;9H[46m}[m[54;96H[1m[7m5,26-31[47;31H[?25h[?0c[?25l[?1c[m[55;215Hk[47;31H[55;215H [46;18H[46m{[m[47;31H{[50;9H}
  [46m}[m[54;96H[1m[7m4,18   [46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;23H[46;18H{[51;3H}[54;96H[1m[7m3,23[45;23H[?25h[?0c[?25l[?1c[m[55;215Hk[45;23H[55;215H [44;49H[54;96H[1m[7m2,49[44;49H[?25h[?0c[?25l[?1c[m[55;215Hk[44;49H[55;215H [43;30H[54;96H[1m[7m1,30[43;30H[?25h[?0c[?25l[?1c[m[55;215Hk[43;30H[55;215H [42;49H[54;96H[1m[7m0,49[42;49H[?25h[?0c[?25l[?1c[m[55;215Hk[42;49H[55;215H [41;3H[35;18H[46m{[41;3H}[m[54;95H[1m[7m79,3 [41;3H[?25h[?0c[?25l[?1c[m[55;215Hk[41;3H[55;215H [40;9H[35;18H{[37;19H[46m{[40;9H}[m
  }[54;96H[1m[7m8,4-9[40;9H[?25h[?0c[?25l[?1c[m[55;215Hk[40;9H[55;215H [39;18H[37;19H{[40;9H}[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hk[39;18H[55;215H [38;58H[46m[[1C][m[54;96H[1m[7m6,53-5[38;58H[?25h[?0c[?25l[?1c[m[55;215Hk[38;58H[55;215H [37;19H[46m{[m[38;56H[[1C][40;9H[46m}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hj[37;19H[55;215H [38;58H[37;19H{[38;56H[46m[[1C][m[40;9H}[54;96H[1m[7m6,53-58[38;58H[?25h[?0c[?25l[?1c[m[55;215Hj[38;58H[55;215H [39;18H[38;56H[[1C][54;96H[1m[7m7,13-1[39;18H[?25h[?0c[?25l[?1c[m[55;215Hk[39;18H[55;215H [38;58H[46m[[1C][m[54;96H[1m[7m6,53-5[38;58H[?25h[?0c[?25l[?1c[m[55;215Hk[38;58H[55;215H [37;19H[46m{[m[38;56H[[1C][40;9H[46m}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215H;[37;19H[55;215H [37;19H[?25h[?0c[?25l[?1c[55;215H:[37;19H[55;215H[K[55;1H:[?25h[?0c7[?25l[?1c[?25h[?0c4[?25l[?1c[?25h[?0c[?25l[?1c[36;9H[37;19H{[40;9H}[54;96H[1m[7m4,2-9  [36;9H[?25h[?0c[?25l[?1c[m[55;215Hw[36;9H[55;215H [36;13H[54;98H[1m[7m6-13[36;13H[?25h[?0c[?25l[?1c[m[55;215Hw[36;13H[55;215H [36;15H[54;98H[1m[7m8-15[36;15H[?25h[?0c[?25l[?1c[m[55;215Hb[36;15H[55;215H [36;13H[54;98H[1m[7m6-13[36;13H[?25h[?0c[?25l[?1c[m[55;215Hb[36;13H[55;215H [36;9H[54;98H[1m[7m2-9 [36;9H[?25h[?0c[?25l[?1c[m[55;215H^W[36;9H[?25h[?0c[?25l[?1c[55;217Hl[36;9H[55;215H   [48;114H[54;1H[7mstat-points.c                                                                                 74,2-9         Bot [m[1m[7m../file-copy/file-copy.c                                                                      49,1           Bot[48;114H[?25h[?0c[?25l[?1c[m[55;215Hk[48;114H[55;215H [47;114H[54;209H[1m[7m8[47;114H[?25h[?0c[?25l[?1c[m[55;215Hk[47;114H[55;215H [46;114H[54;209H[1m[7m7[46;114H[?25h[?0c[?25l[?1c[m[55;215Hk[46;114H[55;215H [45;114H[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hk[45;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215Hk[44;114H[55;215H [43;114H[54;209H[1m[7m4[43;114H[?25h[?0c[?25l[?1c[m[55;215Hk[43;114H[55;215H [42;114H[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hk[42;114H[55;215H [41;114H[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hk[41;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hk[40;114H[55;215H [39;114H[54;209H[1m[7m0[39;114H[?25h[?0c[?25l[?1c[m[55;215Hk[39;114H[55;215H [38;114H[54;208H[1m[7m39[38;114H[?25h[?0c[?25l[?1c[m[55;215Hk[38;114H[55;215H [37;114H[54;209H[1m[7m8[37;114H[?25h[?0c[?25l[?1c[m[55;215Hk[37;114H[55;215H [36;114H[54;209H[1m[7m7[36;114H[?25h[?0c[?25l[?1c[m[55;215Hk[36;114H[55;215H [35;114H[54;209H[1m[7m6[35;114H[?25h[?0c[?25l[?1c[m[55;215Hk[35;114H[55;215H [34;114H[54;209H[1m[7m5[34;114H[?25h[?0c[?25l[?1c[m[55;215Hk[34;114H[55;215H [33;114H[54;209H[1m[7m4[33;114H[?25h[?0c[?25l[?1c[m[55;215H^W[33;114H[?25h[?0c[?25l[?1c[55;217Hh[33;114H[55;215H   [36;9H[54;1H[1m[7mstat-points.c                                                                                 74,2-9         Bot [m[7m../file-copy/file-copy.c                                                                      34,1           Bot[36;9H[?25h[?0c[?25l[?1c[m[55;215H^W[36;9H[?25h[?0c[?25l[?1c[55;217Hl[36;9H[55;215H   [33;114H[54;1H[7mstat-points.c                                                                                 74,2-9         Bot [m[1m[7m../file-copy/file-copy.c                                                                      34,1           Bot[33;114H[?25h[?0c[?25l[?1c[m[55;215H^W[33;114H[?25h[?0c[?25l[?1c[55;217Hh[33;114H[55;215H   [36;9H[54;1H[1m[7mstat-points.c                                                                                 74,2-9         Bot [m[7m../file-copy/file-copy.c                                                                      34,1           Bot[36;9H[?25h[?0c[?25l[?1c[m[55;215Hj[36;9H[55;215H [37;9H[54;96H[1m[7m5,4[37;9H[?25h[?0c[?25l[?1c[m[55;215Hj[37;9H[55;215H [38;9H[54;96H[1m[7m6[38;9H[?25h[?0c[?25l[?1c[m[55;215Hj[38;9H[55;215H [39;9H[54;96H[1m[7m7[39;9H[?25h[?0c[?25l[?1c[m[55;215Hj[39;9H[55;215H [40;9H[37;19H[46m{[40;9H}[m[54;96H[1m[7m8[40;9H[?25h[?0c[?25l[?1c[m[55;215Hj[40;9H[55;215H [41;3H[35;18H[46m{[m[37;19H{[40;9H}
  [46m}[m[54;96H[1m[7m9,3  [41;3H[?25h[?0c[?25l[?1c[m[55;215Hj[41;3H[55;215H [42;9H[35;18H{[41;3H}[54;95H[1m[7m80,9[42;9H[?25h[?0c[?25l[?1c[m[55;215Hj[42;9H[55;215H [43;9H[54;96H[1m[7m1[43;9H[?25h[?0c[?25l[?1c[m[55;215Hj[43;9H[55;215H [44;9H[54;96H[1m[7m2[44;9H[?25h[?0c[?25l[?1c[m[55;215Hj[44;9H[55;215H [45;9H[54;96H[1m[7m3[45;9H[?25h[?0c[?25l[?1c[m[55;215Hj[45;9H[55;215H [46;9H[54;96H[1m[7m4[46;9H[?25h[?0c[?25l[?1c[m[55;215Hj[46;9H[55;215H [47;9H[54;96H[1m[7m5,4-9[47;9H[?25h[?0c[?25l[?1c[m[55;215Hk[47;9H[55;215H [46;9H[54;96H[1m[7m4,9  [46;9H[?25h[?0c[?25l[?1c[m[55;215Hb[46;9H[55;215H [46;7H[54;98H[1m[7m7[46;7H[?25h[?0c[?25l[?1c[m[55;215H^W[46;7H[?25h[?0c[?25l[?1c[55;217Hl[46;7H[55;215H   [33;114H[54;1H[7mstat-points.c                                                                                 84,7           Bot [m[1m[7m../file-copy/file-copy.c                                                                      34,1           Bot[33;114H[?25h[?0c[?25l[?1c[m[55;215Hk[33;114H[55;215H [32;114H[54;209H[1m[7m3[32;114H[?25h[?0c[?25l[?1c[m[55;215Hk[32;114H[55;215H [31;114H[54;209H[1m[7m2[31;114H[?25h[?0c[?25l[?1c[m[55;215Hk[31;114H[55;215H [30;114H[54;209H[1m[7m1[30;114H[?25h[?0c[?25l[?1c[m[55;215Hk[30;114H[55;215H [29;114H[54;209H[1m[7m0[29;114H[?25h[?0c[?25l[?1c[m[55;215Hk[29;114H[55;215H [28;114H[54;208H[1m[7m29[28;114H[?25h[?0c[?25l[?1c[m[55;215Hk[28;114H[55;215H [27;114H[54;209H[1m[7m8[27;114H[?25h[?0c[?25l[?1c[m[55;215Hk[27;114H[55;215H [26;114H[46m{[53;114H}[m[54;209H[1m[7m7[26;114H[?25h[?0c[?25l[?1c[m[55;215Hj[26;114H[55;215H [27;114H[26;114H{[53;114H}[54;209H[1m[7m8[27;114H[?25h[?0c[?25l[?1c[m[55;215HG[27;114H[55;215H [53;114H[26;114H[46m{[53;114H}[m[54;208H[1m[7m54[53;114H[?25h[?0c[?25l[?1c[m[55;215HG[53;114H[55;215H [53;114H[?25h[?0c[?25l[?1c[55;215Hk[53;114H[55;215H [52;114H[26;114H{[53;114H}[54;209H[1m[7m3[52;114H[?25h[?0c[?25l[?1c[m[55;215Hk[52;114H[55;215H [51;114H[54;209H[1m[7m2[51;114H[?25h[?0c[?25l[?1c[m[55;215Hk[51;114H[55;215H [50;114H[54;209H[1m[7m1[50;114H[?25h[?0c[?25l[?1c[m[55;215Hk[50;114H[55;215H [49;114H[54;209H[1m[7m0[49;114H[?25h[?0c[?25l[?1c[m[55;215Hk[49;114H[55;215H [48;114H[54;208H[1m[7m49[48;114H[?25h[?0c[?25l[?1c[m[55;215Hk[48;114H[55;215H [47;114H[54;209H[1m[7m8[47;114H[?25h[?0c[?25l[?1c[m[55;215Hk[47;114H[55;215H [46;114H[54;209H[1m[7m7[46;114H[?25h[?0c[?25l[?1c[m[55;215Hk[46;114H[55;215H [45;114H[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hk[45;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215Hk[44;114H[55;215H [43;114H[54;209H[1m[7m4[43;114H[?25h[?0c[?25l[?1c[m[55;215Hk[43;114H[55;215H [42;114H[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hk[42;114H[55;215H [41;114H[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hk[41;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hk[40;114H[55;215H [39;114H[54;209H[1m[7m0[39;114H[?25h[?0c[?25l[?1c[m[55;215Hk[39;114H[55;215H [38;114H[54;208H[1m[7m39[38;114H[?25h[?0c[?25l[?1c[m[55;215H^W[38;114H[?25h[?0c[?25l[?1c[55;217Hh[38;114H[55;215H   [46;7H[54;1H[1m[7mstat-points.c                                                                                 84,7           Bot [m[7m../file-copy/file-copy.c                                                                      39,1           Bot[46;7H[?25h[?0c[?25l[?1c[m[55;215H^W[46;7H[?25h[?0c[?25l[?1c[55;217Hl[46;7H[55;215H   [38;114H[54;1H[7mstat-points.c                                                                                 84,7           Bot [m[1m[7m../file-copy/file-copy.c                                                                      39,1           Bot[38;114H[?25h[?0c[?25l[?1c[m[55;215Hk[38;114H[55;215H [37;114H[54;209H[1m[7m8[37;114H[?25h[?0c[?25l[?1c[m[55;215Hk[37;114H[55;215H [36;114H[54;209H[1m[7m7[36;114H[?25h[?0c[?25l[?1c[m[55;215Hk[36;114H[55;215H [35;114H[54;209H[1m[7m6[35;114H[?25h[?0c[?25l[?1c[m[55;215Hk[35;114H[55;215H [34;114H[54;209H[1m[7m5[34;114H[?25h[?0c[?25l[?1c[m[55;215Hk[34;114H[55;215H [33;114H[54;209H[1m[7m4[33;114H[?25h[?0c[?25l[?1c[m[55;215Hk[33;114H[55;215H [32;114H[54;209H[1m[7m3[32;114H[?25h[?0c[?25l[?1c[m[55;215Hk[32;114H[55;215H [31;114H[54;209H[1m[7m2[31;114H[?25h[?0c[?25l[?1c[m[55;215Hj[31;114H[55;215H [32;114H[54;209H[1m[7m3[32;114H[?25h[?0c[?25l[?1c[m[55;215Hj[32;114H[55;215H [33;114H[54;209H[1m[7m4[33;114H[?25h[?0c[?25l[?1c[m[55;215Hj[33;114H[55;215H [34;114H[54;209H[1m[7m5[34;114H[?25h[?0c[?25l[?1c[m[55;215Hj[34;114H[55;215H [35;114H[54;209H[1m[7m6[35;114H[?25h[?0c[?25l[?1c[m[55;215Hj[35;114H[55;215H [36;114H[54;209H[1m[7m7[36;114H[?25h[?0c[?25l[?1c[m[55;215Hj[36;114H[55;215H [37;114H[54;209H[1m[7m8[37;114H[?25h[?0c[?25l[?1c[m[55;215Hj[37;114H[55;215H [38;114H[54;209H[1m[7m9[38;114H[?25h[?0c[?25l[?1c[m[55;215Hj[38;114H[55;215H [39;114H[54;208H[1m[7m40[39;114H[?25h[?0c[?25l[?1c[m[55;215Hj[39;114H[55;215H [40;114H[54;209H[1m[7m1[40;114H[?25h[?0c[?25l[?1c[m[55;215Hj[40;114H[55;215H [41;114H[54;209H[1m[7m2[41;114H[?25h[?0c[?25l[?1c[m[55;215Hj[41;114H[55;215H [42;114H[54;209H[1m[7m3[42;114H[?25h[?0c[?25l[?1c[m[55;215Hj[42;114H[55;215H [43;114H[54;209H[1m[7m4[43;114H[?25h[?0c[?25l[?1c[m[55;215Hj[43;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215Hj[44;114H[55;215H [45;114H[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hj[45;114H[55;215H [46;114H[54;209H[1m[7m7[46;114H[?25h[?0c[?25l[?1c[m[55;215Hk[46;114H[55;215H [45;114H[54;209H[1m[7m6[45;114H[?25h[?0c[?25l[?1c[m[55;215Hk[45;114H[55;215H [44;114H[54;209H[1m[7m5[44;114H[?25h[?0c[?25l[?1c[m[55;215H^W[44;114H[?25h[?0c[?25l[?1c[55;217Hh[44;114H[55;215H   [46;7H[54;1H[1m[7mstat-points.c                                                                                 84,7           Bot [m[7m../file-copy/file-copy.c                                                                      45,1           Bot[46;7H[?25h[?0c[?25l[?1c[m[55;215Hk[46;7H[55;215H [45;7H[54;96H[1m[7m3[45;7H[?25h[?0c[?25l[?1c[m[55;215Hk[45;7H[55;215H [44;7H[54;96H[1m[7m2[44;7H[?25h[?0c[?25l[?1c[m[55;215Hk[44;7H[55;215H [43;7H[54;96H[1m[7m1[43;7H[?25h[?0c[?25l[?1c[m[55;215Hk[43;7H[55;215H [42;7H[54;96H[1m[7m0[42;7H[?25h[?0c[?25l[?1c[m[55;215Hk[42;7H[55;215H [41;3H[35;18H[46m{[41;3H}[m[54;95H[1m[7m79,3[41;3H[?25h[?0c[?25l[?1c[m[55;215Hk[41;3H[55;215H [40;8H[35;18H{[41;3H}[54;96H[1m[7m8,3-8[40;8H[?25h[?0c[?25l[?1c[m[55;215Hk[40;8H[55;215H [39;8H[54;96H[1m[7m7[39;8H[?25h[?0c[?25l[?1c[m[55;215Hk[39;8H[55;215H [38;8H[54;96H[1m[7m6[38;8H[?25h[?0c[?25l[?1c[m[55;215Hk[38;8H[55;215H [37;8H[54;96H[1m[7m5[37;8H[?25h[?0c[?25l[?1c[m[55;215Hk[37;8H[55;215H [36;8H[54;96H[1m[7m4,1[36;8H[?25h[?0c[?25l[?1c[m[55;215Hk[36;8H[55;215H [35;7H[54;96H[1m[7m3,7  [35;7H[?25h[?0c[?25l[?1c[m[55;215Hj[35;7H[55;215H [36;8H[54;96H[1m[7m4,1-8[36;8H[?25h[?0c[?25l[?1c[m[55;215Hk[36;8H[55;215H [35;7H[54;96H[1m[7m3,7  [35;7H[?25h[?0c[?25l[?1c[m[55;215Hk[35;7H[55;215H [34;7H[54;96H[1m[7m2[34;7H[?25h[?0c[?25l[?1c[m[55;215Hj[34;7H[55;215H [35;7H[54;96H[1m[7m3[35;7H[?25h[?0c[?25l[?1c[m[55;215Hj[35;7H[55;215H [36;8H[54;96H[1m[7m4,1-8[36;8H[?25h[?0c[?25l[?1c[m[55;215Hw[36;8H[55;215H [36;9H[54;98H[1m[7m2-9[36;9H[?25h[?0c[?25l[?1c[m[55;215Hw[36;9H[55;215H [36;13H[54;98H[1m[7m6-13[36;13H[?25h[?0c[?25l[?1c[m[55;215Hw[36;13H[55;215H [36;15H[54;98H[1m[7m8-15[36;15H[?25h[?0c[?25l[?1c[m[55;215Hw[36;15H[55;215H [36;20H[46m([12C)[m[54;98H[1m[7m13-20[36;20H[?25h[?0c[?25l[?1c[m[55;215Hw[36;20H[55;215H [36;21H([12C)[54;99H[1m[7m4-21[36;21H[?25h[?0c[?25l[?1c[m[55;215Hw[36;21H[55;215H [36;25H[46m[[1C][m[54;99H[1m[7m8-25[36;25H[?25h[?0c[?25l[?1c[m[55;215Hw[36;25H[55;215H [36;26H[[1C][54;99H[1m[7m9-26[36;26H[?25h[?0c[?25l[?1c[m[55;215Hw[36;26H[55;215H [36;27H[46m[[1C][m[54;98H[1m[7m20-27[36;27H[?25h[?0c[?25l[?1c[m[55;215Hw[36;27H[55;215H [36;30H[[1C][54;99H[1m[7m3-30[36;30H[?25h[?0c[?25l[?1c[m[55;215Hj[36;30H[55;215H [37;19H[46m{[40;9H}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hj[37;19H[55;215H [38;30H[37;19H{[40;9H}[54;96H[1m[7m6,25-30[38;30H[?25h[?0c[?25l[?1c[m[55;215Hj[38;30H[55;215H [39;18H[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hj[39;18H[55;215H [40;9H[37;19H[46m{[40;9H}[m[54;96H[1m[7m8,4-9  [40;9H[?25h[?0c[?25l[?1c[m[55;215Hj[40;9H[55;215H [41;3H[35;18H[46m{[m[37;19H{[40;9H}
  [46m}[m[54;96H[1m[7m9,3  [41;3H[?25h[?0c[?25l[?1c[m[55;215Hj[41;3H[55;215H [42;30H[35;18H{[41;3H}[54;95H[1m[7m80,30[42;30H[?25h[?0c[?25l[?1c[m[55;215Hj[42;30H[55;215H [43;30H[54;96H[1m[7m1[43;30H[?25h[?0c[?25l[?1c[m[55;215Hj[43;30H[55;215H [44;30H[54;96H[1m[7m2[44;30H[?25h[?0c[?25l[?1c[m[55;215Hj[44;30H[55;215H [45;23H[54;96H[1m[7m3,23[45;23H[?25h[?0c[?25l[?1c[m[55;215Hj[45;23H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18[46;18H[?25h[?0c[?25l[?1c[m[55;215Hj[46;18H[55;215H [47;30H[46;18H{[51;3H}[54;96H[1m[7m5,25-30[47;30H[?25h[?0c[?25l[?1c[m[55;215Hj[47;30H[55;215H [48;30H[54;96H[1m[7m6[48;30H[?25h[?0c[?25l[?1c[m[55;215Hj[48;30H[55;215H [49;18H[54;96H[1m[7m7,13-18[49;18H[?25h[?0c[?25l[?1c[m[55;215Hj[49;18H[55;215H [50;9H[47;31H[46m{[50;9H}[m[54;96H[1m[7m8,4-9  [50;9H[?25h[?0c[?25l[?1c[m[55;215Hj[50;9H[55;215H [51;3H[46;18H[46m{[m[47;31H{[50;9H}
  [46m}[m[54;96H[1m[7m9,3  [51;3H[?25h[?0c[?25l[?1c[m[55;215Hj[51;3H[55;215H [52;11H[46;18H{[51;3H}[54;95H[1m[7m90,11[52;11H[?25h[?0c[?25l[?1c[m[55;215Hj[52;11H[55;215H [53;1H[28;1H[46m{[53;1H}[m[54;96H[1m[7m1,1 [53;1H[?25h[?0c[?25l[?1c[m[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215Hj[53;1H[55;215H [53;1H[?25h[?0c[?25l[?1c[55;215H^Z[53;1H


[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fgvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt 
==18118== Memcheck, a memory error detector
==18118== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==18118== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==18118== Command: ./stat-points point.dat out.txt
==18118== 
cannot read point.dat: No such file or directory
==18118== 
==18118== HEAP SUMMARY:
==18118==     in use at exit: 584 bytes in 2 blocks
==18118==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==18118== 
==18118== 32 bytes in 1 blocks are still reachable in loss record 1 of 2
==18118==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==18118==    by 0x1096A3: newDynArray (dyn-array.c:20)
==18118==    by 0x1095DE: main (stat-points.c:80)
==18118== 
==18118== 552 bytes in 1 blocks are still reachable in loss record 2 of 2
==18118==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==18118==    by 0x4A6E0FA: __fopen_internal (iofopen.c:65)
==18118==    by 0x109588: main (stat-points.c:74)
==18118== 
==18118== LEAK SUMMARY:
==18118==    definitely lost: 0 bytes in 0 blocks
==18118==    indirectly lost: 0 bytes in 0 blocks
==18118==      possibly lost: 0 bytes in 0 blocks
==18118==    still reachable: 584 bytes in 2 blocks
==18118==         suppressed: 0 bytes in 0 blocks
==18118== 
==18118== For counts of detected and suppressed errors, rerun with: -v
==18118== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
[46m{[m[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);[82C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
[46m}[m[111C[7m|[m
[1m[7mstat-points.c                                                                                 91,1           Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      45,1           Bot[53;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;11H[28;1H{[53;1H}[54;96H[1m[7m0,11[52;11H[?25h[?0c[?25l[?1c[m[55;215Hk[52;11H[55;215H [51;3H[46;18H[46m{[51;3H}[m[54;95H[1m[7m89,3 [51;3H[?25h[?0c[?25l[?1c[m[55;215Hk[51;3H[55;215H [50;9H[46;18H{[47;31H[46m{[50;9H}[m
  }[54;96H[1m[7m8,4-9[50;9H[?25h[?0c[?25l[?1c[m[55;215Hk[50;9H[55;215H [49;18H[47;31H{[50;9H}[54;96H[1m[7m7,13-18[49;18H[?25h[?0c[?25l[?1c[m[55;215Hk[49;18H[55;215H [48;30H[54;96H[1m[7m6,25-30[48;30H[?25h[?0c[?25l[?1c[m[55;215Hk[48;30H[55;215H [47;30H[54;96H[1m[7m5[47;30H[?25h[?0c[?25l[?1c[m[55;215Hk[47;30H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18   [46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;23H[46;18H{[51;3H}[54;96H[1m[7m3,23[45;23H[?25h[?0c[?25l[?1c[m[55;215Hk[45;23H[55;215H [44;30H[54;96H[1m[7m2,30[44;30H[?25h[?0c[?25l[?1c[m[55;215Hk[44;30H[55;215H [43;30H[54;96H[1m[7m1[43;30H[?25h[?0c[?25l[?1c[m[55;215Hk[43;30H[55;215H [42;30H[54;96H[1m[7m0[42;30H[?25h[?0c[?25l[?1c[m[55;215Hk[42;30H[55;215H [41;3H[35;18H[46m{[41;3H}[m[54;95H[1m[7m79,3 [41;3H[?25h[?0c[?25l[?1c[m[55;215Hk[41;3H[55;215H [40;9H[35;18H{[37;19H[46m{[40;9H}[m
  }[54;96H[1m[7m8,4-9[40;9H[?25h[?0c[?25l[?1c[m[55;215Hk[40;9H[55;215H [39;18H[37;19H{[40;9H}[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hk[39;18H[55;215H [38;30H[54;96H[1m[7m6,25-30[38;30H[?25h[?0c[?25l[?1c[m[55;215Hk[38;30H[55;215H [37;19H[46m{[40;9H}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hk[37;19H[55;215H [36;30H[37;19H{[40;9H}[54;96H[1m[7m4,23-30[36;30H[?25h[?0c[?25l[?1c[m[55;215Hk[36;30H[55;215H [35;18H[46m{[41;3H}[m[54;96H[1m[7m3,18   [35;18H[?25h[?0c[?25l[?1c[m[55;215Hk[35;18H[55;215H [34;12H[35;18H{[41;3H}[54;96H[1m[7m2,12[34;12H[?25h[?0c[?25l[?1c[m[55;215Hk[34;12H[55;215H [33;1H[54;96H[1m[7m1,0-1[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [32;3H[29;29H[46m{[32;3H}[m[54;96H[1m[7m0,3  [32;3H[?25h[?0c[?25l[?1c[m[55;215Hk[32;3H[55;215H [31;12H[29;29H{[32;3H}[54;95H[1m[7m69,12[31;12H[?25h[?0c[?25l[?1c[m[55;215Hk[31;12H[55;215H [30;30H[54;96H[1m[7m8,30[30;30H[?25h[?0c[?25l[?1c[m[55;215Hk[30;30H[55;215H [29;29H[46m{[32;3H}[m[54;96H[1m[7m7,29[29;29H[?25h[?0c[?25l[?1c[m[55;215Hk[29;29H[55;215H [28;1H[46m{[m[29;29H{[32;3H}[53;1H[46m}[m[54;96H[1m[7m6,1 [28;1H[?25h[?0c[?25l[?1c[m[55;215Hk[28;1H[55;215H [27;30H
{[53;1H}[54;96H[1m[7m5,30[27;30H[?25h[?0c[?25l[?1c[m[55;215Hk[27;30H[55;215H [26;3H[54;96H[1m[7m4,3 [26;3H[?25h[?0c[?25l[?1c[m[55;215Hk[26;3H[55;215H [25;1H[54;96H[1m[7m3,0-1[25;1H[?25h[?0c[?25l[?1c[m[55;215Hk[25;1H[55;215H [24;1H[13;1H[46m{[24;1H}[m[54;96H[1m[7m2,1  [24;1H[?25h[?0c[?25l[?1c[m[13;1H{[16;14H[46m{[23;3H}[m
}[54;96H[1m[7m1,3[23;3H[?25h[?0c[?25l[?1c[m[16;14H{[23;3H}[54;96H[1m[7m0,30[22;30H[?25h[?0c[?25l[?1c[54;95H59[21;30H[?25h[?0c[?25l[?1c[54;96H8[20;30H[?25h[?0c[?25l[?1c[54;96H7[19;30H[?25h[?0c[?25l[?1c[54;96H6[18;30H[?25h[?0c[?25l[?1c[m[55;215Hk[18;30H[55;215H [17;30H[54;96H[1m[7m5[17;30H[?25h[?0c[?25l[?1c[m[55;215Hk[17;30H[55;215H [16;14H[46m{[23;3H}[m[54;96H[1m[7m4,14[16;14H[?25h[?0c[?25l[?1c[m[55;215Hk[16;14H[55;215H [15;30H[16;14H{[23;3H}[54;96H[1m[7m3,30[15;30H[?25h[?0c[?25l[?1c[m[55;215Hk[15;30H[55;215H [14;30H[54;96H[1m[7m2[14;30H[?25h[?0c[?25l[?1c[m[13;1H[46m{[24;1H}[m[54;96H[1m[7m1,1 [13;1H[?25h[?0c[?25l[?1c[m{[24;1H}[54;96H[1m[7m0,30[12;30H[?25h[?0c[?25l[?1c[54;95H49,11[11;11H[?25h[?0c[?25l[?1c[54;96H8,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hk[10;1H[55;215H [9;1H[54;96H[1m[7m7,1  [9;1H[?25h[?0c[?25l[?1c[m[55;215Hk[9;1H[55;215H [8;15H[54;96H[1m[7m6,15[8;15H[?25h[?0c[?25l[?1c[m[55;215Hk[8;15H[55;215H [7;3H[3;31H[46m{[7;3H}[m[54;96H[1m[7m5,3 [7;3H[?25h[?0c[?25l[?1c[m[55;215Hk[7;3H[55;215H [6;15H[3;31H{[7;3H}[54;96H[1m[7m4,15[6;15H[?25h[?0c[?25l[?1c[m[55;215Hk[6;15H[55;215H [6;30H[1;1H                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  [1m[33mreturn[m [1m[35m0[m;                                                                                                     [1;3H[1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;96H[1m[7m3,30[10C97%[6;30H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             [1;1H{[54;96H[1m[7m2[14C4[6;30H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       [1;1HaveragePoints([1m[32mconst[m DynArray *points)[54;96H[1m[7m1[14C2[6;30H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              [1;1H[1m[32mstatic[m [1m[32mdouble[m[54;96H[1m[7m0,17[10C89[6;17H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   [54;95H[1m[7m39,16[11C6[6;16H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {                                                                                 [1;1H}[54;96H[1m[7m8,30[11C4[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;1H[1;1H                                                                                                                
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              [1;3H[1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[6;1H[46m{[16;1H}[m[54;96H[1m[7m7,1 [11C1[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;30H[1;1H                                                                                                                
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
[46m{[m                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
[46m}[m                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               
  freeDynArray(points);                                                                                         [1;1H{[7;1H{[17;1H}[54;96H[1m[7m6,30[10C78[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;13H[1;1H                                                                                                                
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);                                                               [1;1HcomparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[54;96H[1m[7m5,13[11C6[6;13H[?25h[?0c[?25l[?1c[m[55;215Hk[6;13H[55;215H [6;1H[1;1H                                                                                                                
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               
  readPoints(argv[[1m[35m1[m], points);                                                                                  [1;1H[1m[32mstatic[m [1m[32mint[m[54;96H[1m[7m4,0-1[10C3[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;1H[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));                                                               [4;1H[46m{

}[m[54;96H[1m[7m3,1  [10C1[6;1H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
[46m{[m                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
[46m}[m                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       
  }                                                                                                             [1;1H}[5;1H{

}[54;96H[1m[7m2,30[10C68[6;30H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              
        }                                                                                                       [1;3H}[6;1H[46m{

}[m[54;96H[1m[7m1,1 [11C5[6;1H[?25h[?0c[?25l[?1c[m[1;1H                                                                                                                
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
[46m{[m                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
[46m}[m                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   
          exit([1m[35m1[m);                                                                                              [1;5Hexit([1m[35m1[m);[7;1H{

}[54;96H[1m[7m0,30[11C3[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;10H[1;1H                                                                                                                
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             
          fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));                                   [1;5Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[54;95H[1m[7m29,1[12C0[6;10H[?25h[?0c[?25l[?1c[m[55;215Hk[6;10H[55;215H [6;1H[1;1H                                                                                                                
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              
        [1m[33mif[m (!out) {                                                                                             [1;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;96H[1m[7m8,0-1[9C57[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;1H[1;1H                                                                                                                
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                                                                              [1;3H}[54;96H[1m[7m7,1  [10C5[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;3H[1;1H                                                                                                                
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    
  [1m[33mif[m (argc == [1m[35m3[m) {                                                                                              [1;5HaddElementDynArray(points, &point2);[3;24H[46m{[6;3H}[m[54;96H[1m[7m6,3[12C2[6;3H[?25h[?0c[?25l[?1c[m[55;215Hk[6;3H[55;215H [6;12H[1;1H                                                                                                                
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) [46m{[m                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  [46m}[m                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                
  [1m[32mFILE[m *out;                                                                                                    [1;3H[1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {[4;24H{[7;3H}[54;96H[1m[7m5,12[11C0[6;12H[?25h[?0c[?25l[?1c[m[55;215Hk[6;12H[55;215H [6;30H[1;1H                                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
                                                                                                                [1;3HPoint2 point2;[54;96H[1m[7m4,30[10C47[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;24H[1;1H                                                                                                                
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             [1;3H}[6;24H[46m{[9;3H}[m[54;96H[1m[7m3,24[11C4[6;24H[?25h[?0c[?25l[?1c[m[55;215Hk[6;24H[55;215H [6;3H[1;1H                                                                                                                
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) [46m{[m                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  [46m}[m                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   
    exit([1m[35m1[m);                                                                                                    [1;5Hexit([1m[35m1[m);[4;54H[46m{

[m  [46m}[m[7;24H{[10;3H}[54;96H[1m[7m2,3 [11C2[6;3H[?25h[?0c[?25l[?1c[m[55;215Hk[6;3H[55;215H [6;30H[1;1H                                                                                                                
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) [46m{[m                                                          
    addElementDynArray(points, &point2);                                                                        
  [46m}[m                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);                                   [1;5Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[5;54H{

  }[54;96H[1m[7m1,30[10C39[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;30H[1;1H                                                                                                                
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   [1;3H[1m[33mif[m (!in) {[54;96H[1m[7m0[14C6[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;16H[1;1H                                                                                                                
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
{                                                                                                               [1;3H[1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);[54;95H[1m[7m19,16[11C4[6;16H[?25h[?0c[?25l[?1c[m[55;215Hk[6;16H[55;215H [6;3H[1;1H                                                                                                                
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              [1;1H{[3;12H[46m{[6;3H}[m[54;96H[1m[7m8,3 [11C1[6;3H[?25h[?0c[?25l[?1c[m[55;215Hk[6;3H[55;215H [6;12H[1;1H                                                                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) [46m{[m                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  [46m}[m                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             [1;1HreadPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)[4;12H{[7;3H}[54;96H[1m[7m7,12[10C28[6;12H[?25h[?0c[?25l[?1c[m[55;215Hk[6;12H[55;215H [6;30H[1;1H                                                                                                                
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                [1;1H[1m[32mstatic[m [1m[32mvoid[m[54;96H[1m[7m6,30[11C6[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;12H[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               [6;12H[46m{[9;3H}[m[54;96H[1m[7m5,12[11C3[6;12H[?25h[?0c[?25l[?1c[m[55;215Hk[6;12H[55;215H [6;30H[1;1H                                                                                                                
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) [46m{[m                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  [46m}[m                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             [1;1H[1m[34m#include [m[1m[35m"point2.h"[m[7;12H{[10;3H}[54;96H[1m[7m4,30[11C1[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;1H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         [1;1H[1m[34m#include [m[1m[35m"dyn-array.h"[m[6;1H[46m{[20;1H}[m[54;96H[1m[7m3,1 [10C18[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;30H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
[46m{[m                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
[46m}[m                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             [7;1H{[21;1H}[54;96H[1m[7m2,30[11C5[6;30H[?25h[?0c[?25l[?1c[m[55;215Hk[6;30H[55;215H [6;11H[1;1H                                                                                                                
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           [1;1H[1m[34m#include [m[1m[35m<string.h>[m[54;96H[1m[7m1,11[11C3[6;11H[?25h[?0c[?25l[?1c[m[55;215Hk[6;11H[55;215H [6;1H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m<string.h>[m                                                                                             
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     [1;1H[1m[34m#include [m[1m[35m<stdio.h>[m[54;96H[1m[7m0,0-1[10C0[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;19H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m<stdio.h>[m                                                                                              
[1m[34m#include [m[1m[35m<string.h>[m                                                                                             
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            [1;1H[1m[34m#include [m[1m[35m<stdlib.h>[m[54;95H[1m[7m9,19  [9C 7[6;19H[?25h[?0c[?25l[?1c[m[55;215Hk[6;19H[55;215H [6;22H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m<stdlib.h>[m                                                                                             
[1m[34m#include [m[1m[35m<stdio.h>[m                                                                                              
[1m[34m#include [m[1m[35m<string.h>[m                                                                                             
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                [1;1H[1m[34m#include [m[1m[35m<math.h>[m[54;95H[1m[7m8,22[12C5[6;22H[?25h[?0c[?25l[?1c[m[55;215Hk[6;22H[55;215H [6;1H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m<math.h>[m                                                                                               
[1m[34m#include [m[1m[35m<stdlib.h>[m                                                                                             
[1m[34m#include [m[1m[35m<stdio.h>[m                                                                                              
[1m[34m#include [m[1m[35m<string.h>[m                                                                                             
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  [1;1H[1m[34m#include [m[1m[35m<errno.h>[m[54;95H[1m[7m7,0-1[11C2[6;1H[?25h[?0c[?25l[?1c[m[55;215Hk[6;1H[55;215H [6;19H[1;1H                                                                                                                
[1m[34m#include [m[1m[35m<errno.h>[m                                                                                              
[1m[34m#include [m[1m[35m<math.h>[m                                                                                               
[1m[34m#include [m[1m[35m<stdlib.h>[m                                                                                             
[1m[34m#include [m[1m[35m<stdio.h>[m                                                                                              
[1m[34m#include [m[1m[35m<string.h>[m                                                                                             
                                                                                                                
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                                                                          
[1m[34m#include [m[1m[35m"point2.h"[m                                                                                             
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)                                                                
{                                                                                                               
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                                                                               
  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m[54;95H[1m[7m6,19 [10CTop[6;19H[?25h[?0c[?25l[?1c[m[55;215HG[6;19H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [16;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[54;95H[1m[7m91,1[11CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215H/[53;1H[55;215H[K[55;1H/[?25h[?0cf[?25l[?1c[1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = [7mf[mopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m14,14[10CTop[m[55;1H[K[55;1H/f[?25h[?0cr[?25l[?1c[1;1H  [1m[33mif[m (!in) {                                                                                                    
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [6;10H[7mfr[m[40;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[46;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[54;95H[1m[7m20,10[10C36%[m[55;1H[K[55;1H/fr[?25h[?0ce[?25l[?1c[6;12H[7me[55;5H[?25h[?0c[me[?25l[?1c[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));                                                
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));                                            
    [1m[32mdouble[m average = averagePoints(points);                                                                     
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));                                           
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,                                             
            min, average, median, max);                                                                         
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mint[m                                                                                                             
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])                                                                              
[46m{[m                                                                                                               
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {                                                                                   
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [30;5Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  [7mfree[mDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[54;95H[1m[7m83,3 [10CBot[m[55;1H[K[55;1H/free[?25h[?0c[?25l[?1c[1m[31msearch hit BOTTOM, continuing at TOP[45;3H[m[28;1H{[45;3Hfree[53;1H}[45;3H[?25h[?0c[?25l[?1c[55;215Hn[45;3H[55;1H/free[55;6H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m/free[55;6H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[45;3H[?25h[?0c[?25l[?1c[m[55;215HN[45;3H[55;1H?free[55;6H[K[55;1H[1m[31msearch hit TOP, continuing at BOTTOM[m?free[55;6H[K[55;1H[1m[31msearch hit TOP, continuing at BOTTOM[45;3H[?25h[?0c[?25l[?1c[m[55;215Hg[45;3H[?25h[?0c[?25l[?1c[55;215H [45;3H[55;215Hgg[45;3H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[55;1H[K[54;95H[1m[7m1,1 [11CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[27;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215H^W[18;1H[?25h[?0c[?25l[?1c[55;217Hs[18;1H[55;215H   [9;1H[1;1H                   
[1m[32mstatic[m [1m[32mvoid[m       
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{                  
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {       
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);          
  }                
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);        
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {         
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);                                                         
  }         
}  
                
[1m[32mstatic[m [1m[32mint[m                                            
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{  
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}                                                                     
            
[1m[32mstatic[m [1m[32mdouble[m
[1m[7mstat-points.c                                                                                 18,1           13%[m[29;8H[1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)

  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);                  
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m); 
  }                                  
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }              
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {       
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);                        
  }            
}  
               
[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{          
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}
                                      
[1m[32mstatic[m [1m[32mdouble[m                             
[7mstat-points.c                                                                                 18,1           13% [9;1H[?25h[?0c[?25l[?1c[m[55;215H^W[9;1H[?25h[?0c[?25l[?1c[55;217Hj[9;1H[55;215H   [36;1H[27;1H[7mstat-points.c                                                                                 18,1           13%[m[54;1H[1m[7mstat-points.c                                                                                 18,1           13% [36;1H[?25h[?0c[?25l[?1c[m[55;215H:[36;1H[55;215H[K[55;1H:[?25h[?0ce[?25l[?1c[?25h[?0c[?25l[?1c [?25h[?0cd[?25l[?1c[?25h[?0c...[?25l[?1cyn-array.c...[55;5H[K[55;5H[54;1H[1m[7mdyn-array.c  dyn-array.h  dyn-array.o[57C    [11C                                                                                                                    [m[55;5H...[54;1H[30m[43mdyn-array.c[m
:e dyn-array.c[?25h[?0c[54;1H[1m[7mstat-points.c                        [?25l[?1c[57C18,1[11C13%[m[1C[7m../file-copy/file-copy.c                                                                      45,1           Bot[55;1H[m"dyn-array.c" 94L, 2470C[28;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m                             
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m              
            
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                               
            
[1m[32mstruct[m DynArray {
  [1m[32msize_t[m elementSize;  [1m[36m/** size of a base element */[m
  [1m[32msize_t[m index;        [1m[36m/** index of next free element */[m
  [1m[32msize_t[m size;         [1m[36m/** max number of elements for current elements[] */[m
  [1m[32mchar[m *elements;      [1m[36m/** storage for elements */[m
};                      
                                                                      
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m
DynArray *
newDynArray([1m[32msize_t[m elementSize)
{
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));
  [1m[33mif[m (!dynArray) {                           
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);                                       
  }
  dynArray->elementSize = elementSize;
  [1m[33mreturn[m dynArray;
[1m[7mdyn-array.c  [82C,1 [11CTop[28;1H[?25h[?0c[?25l[?1c[m[55;215HG[28;1H[55;215H [53;1H[28;1H      realloc(dynArray->elements, size*dynArray->elementSize);
    [1m[33mif[m (!dynArray->elements) {
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
      exit([1m[35m1[m);    
    }              
    dynArray->size = size;
  }                   
  assert(dynArray->index < dynArray->size);
  dynArray->index++;
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);
}              [8C                                 
              [9C                                                    
[1m[36m/** Return # of elements stored in dynArray */[m    
[1m[32mconst[m [1m[32msize_t[m
nElementsDynArray([1m[32mconst[m DynArray *dynArray)
{                                                                           
  [1m[33mreturn[m dynArray->index;
}                              
 
[1m[36m/** Sort dynArray by provided comparison function */[m
[1m[32mvoid[m              
sortDynArray(DynArray *dynArray,                                    
             [1m[32mint[m (*cmp)([1m[32mconst[m [1m[32mvoid[m *element1, [1m[32mconst[m [1m[32mvoid[m *element2))
[46m{[m  
  qsort(dynArray->elements, dynArray->index, dynArray->elementSize, cmp);
[46m}[m                 [54;95H[1m[7m94,1[11CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[51;1H{

}[54;96H[1m[7m3[52;1H[?25h[?0c[?25l[?1c[m[55;215Hk[52;1H[55;215H [51;1H[46m{

}[m[54;96H[1m[7m2[51;1H[?25h[?0c[?25l[?1c[m[55;215Hk[51;1H[55;215H [50;1H
{

}[54;96H[1m[7m1[50;1H[?25h[?0c[?25l[?1c[m[55;215Hk[50;1H[55;215H [49;1H[54;96H[1m[7m0[49;1H[?25h[?0c[?25l[?1c[m[55;215Hk[49;1H[55;215H [48;1H[54;95H[1m[7m89[48;1H[?25h[?0c[?25l[?1c[m[55;215Hk[48;1H[55;215H [47;1H[54;96H[1m[7m8[47;1H[?25h[?0c[?25l[?1c[m[55;215Hk[47;1H[55;215H [46;1H[54;96H[1m[7m7,0-1[46;1H[?25h[?0c[?25l[?1c[m[55;215Hk[46;1H[55;215H [45;1H[43;1H[46m{

}[m[54;96H[1m[7m6,1  [45;1H[?25h[?0c[?25l[?1c[m[55;215Hk[45;1H[55;215H [44;1H[43;1H{

}[54;96H[1m[7m5[44;1H[?25h[?0c[?25l[?1c[m[55;215Hk[44;1H[55;215H [43;1H[46m{

}[m[54;96H[1m[7m4[43;1H[?25h[?0c[?25l[?1c[m[55;215Hk[43;1H[55;215H [42;1H
{

}[54;96H[1m[7m3[42;1H[?25h[?0c[?25l[?1c[m[55;215Hk[42;1H[55;215H [41;1H[54;96H[1m[7m2[41;1H[?25h[?0c[?25l[?1c[m[55;215Hk[41;1H[55;215H [40;1H[54;96H[1m[7m1[40;1H[?25h[?0c[?25l[?1c[m[55;215Hk[40;1H[55;215H [39;1H[54;96H[1m[7m0,0-1[39;1H[?25h[?0c[?25l[?1c[m[55;215Hk[39;1H[55;215H [38;1H[54;95H[1m[7m79,1  [38;1H[?25h[?0c[?25l[?1c[m[55;215Hk[38;1H[55;215H [37;1H[54;96H[1m[7m8[37;1H[?25h[?0c[?25l[?1c[m[55;215Hk[37;1H[55;215H [36;1H[54;96H[1m[7m7[36;1H[?25h[?0c[?25l[?1c[m[55;215Hk[36;1H[55;215H [35;1H[54;96H[1m[7m6[35;1H[?25h[?0c[?25l[?1c[m[55;215Hk[35;1H[55;215H [34;1H[54;96H[1m[7m5[34;1H[?25h[?0c[?25l[?1c[m[55;215Hk[34;1H[55;215H [33;1H[54;96H[1m[7m4[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            
[1m[32mvoid[m                                                                                                            
sortDynArray(DynArray *dynArray,                                                                                
             [1m[32mint[m (*cmp)([1m[32mconst[m [1m[32mvoid[m *element1, [1m[32mconst[m [1m[32mvoid[m *element2))                                            
{                                                                                                               
  qsort(dynArray->elements, dynArray->index, dynArray->elementSize, cmp);                                       [28;5HdynArray->elements =[55;1H[K[54;96H[1m[7m3[13C98%[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            
[1m[32mvoid[m                                                                                                            
sortDynArray(DynArray *dynArray,                                                                                
             [1m[32mint[m (*cmp)([1m[32mconst[m [1m[32mvoid[m *element1, [1m[32mconst[m [1m[32mvoid[m *element2))                                            
{                                                                                                               [28;5H[1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;[54;96H[1m[7m2[14C7[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            
[1m[32mvoid[m                                                                                                            
sortDynArray(DynArray *dynArray,                                                                                
             [1m[32mint[m (*cmp)([1m[32mconst[m [1m[32mvoid[m *element1, [1m[32mconst[m [1m[32mvoid[m *element2))                                            [28;3H[1m[33mif[m (dynArray->index >= dynArray->size) {[54;96H[1m[7m1[14C5[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            
[1m[32mvoid[m                                                                                                            
sortDynArray(DynArray *dynArray,                                                                                [28;3H[1m[32menum[m { INIT_SIZE = [1m[35m4[m };[54;96H[1m[7m0[14C4[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            
[1m[32mvoid[m                                                                                                            [28;1H{[54;95H[1m[7m69[14C2[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                
[1m[36m/** Sort dynArray by provided comparison function */[m                                                            [28;1HaddElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)[54;96H[1m[7m8[14C1[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               
                                                                                                                [28;1H[1m[32mvoid[m *[54;96H[1m[7m7[13C89[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
[1m[32mvoid[m *                                                                                                          
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       
}                                                                                                               [28;1H[1m[36m */[m[54;96H[1m[7m6[14C8[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
[1m[36m */[m                                                                                                             
[1m[32mvoid[m *                                                                                                          
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               
  [1m[33mreturn[m dynArray->index;                                                                                       [28;1H[1m[36m *  added element.[m[54;96H[1m[7m5[14C6[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
[1m[36m *  added element.[m                                                                                              
[1m[36m */[m                                                                                                             
[1m[32mvoid[m *                                                                                                          
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     
{                                                                                                               [28;1H[1m[36m/** Add element to end of dynArray.  Return pointer to newly[m[33;1H[46m{[48;1H}[m[54;96H[1m[7m4[14C5[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
[1m[36m/** Add element to end of dynArray.  Return pointer to newly[m                                                    
[1m[36m *  added element.[m                                                                                              
[1m[36m */[m                                                                                                             
[1m[32mvoid[m *                                                                                                          
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
[46m{[m                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
[46m}[m                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
nElementsDynArray([1m[32mconst[m DynArray *dynArray)                                                                     [34;1H{[49;1H}[54;96H[1m[7m3[14C3[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [33;1H[28;1H                                                                                                                
                                                                                                                
[1m[36m/** Add element to end of dynArray.  Return pointer to newly[m                                                    
[1m[36m *  added element.[m                                                                                              
[1m[36m */[m                                                                                                             
[1m[32mvoid[m *                                                                                                          
addElementDynArray(DynArray *dynArray, [1m[32mconst[m [1m[32mvoid[m *element)                                                     
{                                                                                                               
  [1m[32menum[m { INIT_SIZE = [1m[35m4[m };                                                                                       
  [1m[33mif[m (dynArray->index >= dynArray->size) {                                                                      
    [1m[32mconst[m [1m[32msize_t[m size = (dynArray->size > [1m[35m0[m) ? dynArray->size*[1m[35m2[m : INIT_SIZE;                                    
    dynArray->elements =                                                                                        
      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    [54;96H[1m[7m2[14C2[33;1H[?25h[?0c[?25l[?1c[m[55;215HG[33;1H[55;215H [53;1H[28;1H      realloc(dynArray->elements, size*dynArray->elementSize);                                                  
    [1m[33mif[m (!dynArray->elements) {                                                                                  
      fprintf([1m[35mstderr[m, [1m[35m"dynArray realloc() failed: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                      
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    dynArray->size = size;                                                                                      
  }                                                                                                             
  assert(dynArray->index < dynArray->size);                                                                     
  dynArray->index++;                                                                                            
  [1m[33mreturn[m setElementDynArray(dynArray, dynArray->index - [1m[35m1[m, element);                                            
}                                                                                                               
                                                                                                                
[1m[36m/** Return # of elements stored in dynArray */[m                                                                  
[1m[32mconst[m [1m[32msize_t[m                                                                                                    
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [42;1HnElementsDynArray([1m[32mconst[m DynArray *dynArray)
{
  [1m[33mreturn[m dynArray->index;
}

[1m[36m/** Sort dynArray by provided comparison function */[m
[1m[32mvoid[m
sortDynArray(DynArray *dynArray,[50;14H[1m[32mint[m (*cmp)([1m[32mconst[m [1m[32mvoid[m *element1, [1m[32mconst[m [1m[32mvoid[m *element2))
[46m{[m
  qsort(dynArray->elements, dynArray->index, dynArray->elementSize, cmp);
[46m}[m[54;95H[1m[7m94[13CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215H/[53;1H[55;215H[K[55;1H/[?25h[?0cf[?25l[?1c[28;1H[1m[34m#include [m[1m[35m<errno.h>[m                                            
[1m[34m#include [m[1m[35m<assert.h>[m           
[1m[34m#include [m[1m[35m<stdlib.h>[m                                                       
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m
                          
[1m[34m#include [m[1m[35m"dyn-array.h"[m
                                           
[1m[32mstruct[m DynArray {   
  [1m[32msize_t[m elementSize;  [1m[36m/** size o[m[1m[7m[36mf[m[1m[36m a base element */[m                
  [1m[32msize_t[m index;[8C[1m[36m/** index of next free element */[m
  [1m[32msize_t[m size;[9C[1m[36m/** max number of elements for current elements[] */[m
  [1m[32mchar[m *elements;      [1m[36m/** storage for elements */[m
};          
                                           
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m
DynArray *               
newDynArray([1m[32msize_t[m elementSize)
{
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray)); 
  [1m[33mif[m (!dynArray) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    exit([1m[35m1[m);                                                        
  }
  dynArray->elementSize = elementSize;                                   
  [1m[33mreturn[m dynArray;[54;95H[1m[7m10,34[10CTop
[m/f[?25h[?0cr[?25l[?1c[37;34H[1m[36mf[m[38;42H[1m[7m[36mfr[m[54;96H[1m[7m1,42
[m/fr[?25h[?0ce[?25l[?1c[38;44H[1m[7m[36me[55;5H[?25h[?0c[me[?25l[?1c[38;45H[1m[7m[36me[55;6H[?25h[?0c[?25l[?1c[m[1m[31msearch hit BOTTOM, continuing at TOP[38;42H[m[1m[36mfree[?25h[?0c[?25l[?1c[m[55;215Hn[38;42H[55;1H/free[55;6H[K[55;1H[48;5H[28;1H[1m[32mstruct[m DynArray {                                                                                               
  [1m[32msize_t[m elementSize;  [1m[36m/** size of a base element */[m                                                            
  [1m[32msize_t[m index;        [1m[36m/** index of next free element */[m                                                        
  [1m[32msize_t[m size;         [1m[36m/** max number of elements for current elements[] */[m                                     
  [1m[32mchar[m *elements;      [1m[36m/** storage for elements */[m                                                              
};                                                                                                              
                                                                                                                
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [46;1H}

[1m[36m/** free all resources used by dynArray */[m
[1m[32mvoid[m
freeDynArray(DynArray *dynArray)
{
  free(dynArray->elements);
  free(dynArray);[55;1H[K[54;95H[1m[7m29,5 [10C11%[48;5H[?25h[?0c[?25l[?1c[m[55;215Hn[48;5H[55;1H/free[55;215H[K[55;1H[48;1H[28;1H  [1m[32msize_t[m index;        [1m[36m/** index of next free element */[m                                                        
  [1m[32msize_t[m size;         [1m[36m/** max number of elements for current elements[] */[m                                     
  [1m[32mchar[m *elements;      [1m[36m/** storage for elements */[m                                                              
};                                                                                                              
                                                                                                                
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
                                                                                                                
                                                                                                                [52;1H}[55;1H[K[54;95H[1m[7m31,1[12C4[48;1H[?25h[?0c[?25l[?1c[m[55;215Hn[48;1H[55;1H/free[55;215H[K[55;1H[48;3H[28;1H  [1m[32mchar[m *elements;      [1m[36m/** storage for elements */[m                                                              
};                                                                                                              
                                                                                                                
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
                                                                                                                [1m[36m/** Return &dynArray[i].  Element i must exist.  */[m[55;1H[K[54;96H[1m[7m3,3[12C7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;3H[28;1H};                                                                                                              
                                                                                                                
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
                                                                                                                [1m[32mvoid[m *[54;96H[1m[7m4[14C9[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;1H[28;1H                                                                                                                
[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
                                                                                                                [45;1H[46m{


}[m[53;1HgetElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)[54;96H[1m[7m5,1[11C20[48;1H[?25h[?0c[?25l[?1c[m[55;215Hj[48;1H[55;215H [48;1H[28;1H[1m[36m/** return newly allocated dynamic array for elements of size elementSize */[m                                    
DynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
[46m{[m                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
[46m}[m                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
                                                                                                                [44;1H{


}[53;1H{[54;96H[1m[7m6,0-1[10C2[48;1H[?25h[?0c[?25l[?1c[m[55;215Hj[48;1H[55;215H [48;1H[28;1HDynArray *                                                                                                      
newDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
                                                                                                                  assert(i < dynArray->index);[54;96H[1m[7m7[14C3[48;1H[?25h[?0c[?25l[?1c[m[55;215Hj[48;1H[55;215H [48;3H[28;1HnewDynArray([1m[32msize_t[m elementSize)                                                                                 
{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
                                                                                                                  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;[54;96H[1m[7m8,3  [10C5[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;3H[28;1H{                                                                                                               
  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
                                                                                                                }[54;96H[1m[7m9[14C6[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;3H[28;1H  DynArray *dynArray = calloc([1m[35m1[m, [1m[33msizeof[m(DynArray));                                                             
  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
}                                                                                                               
                                                                                                                [54;95H[1m[7m40[14C7[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;1H[28;1H  [1m[33mif[m (!dynArray) {                                                                                              
    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
}                                                                                                               
                                                                                                                
                                                                                                                [48;1H[46m{


}[m

[1m[36m/** Set dynArray[i] to *element.  Element i must exist.  Return[m[54;96H[1m[7m1,1[12C9[48;1H[?25h[?0c[?25l[?1c[m[55;215Hj[48;1H[55;215H [48;3H[28;1H    fprintf([1m[35mstderr[m, [1m[35m"cannot alloc DynArray: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));                                            
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
[46m{[m                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
[46m}[m                                                                                                               
                                                                                                                
[1m[36m/** Set dynArray[i] to *element.  Element i must exist.  Return[m                                                 
                                                                                                                [47;1H{


}


[1m[36m * pointer to set element.[m[54;96H[1m[7m2,3[11C30[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;3H[28;1H    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
}                                                                                                               
                                                                                                                
[1m[36m/** Set dynArray[i] to *element.  Element i must exist.  Return[m                                                 
[1m[36m * pointer to set element.[m                                                                                      
                                                                                                                [1m[36m */[m[54;96H[1m[7m3[14C2[48;3H[?25h[?0c[?25l[?1c[m[55;215Hj[48;3H[55;215H [48;1H[28;1H  }                                                                                                             
  dynArray->elementSize = elementSize;                                                                          
  [1m[33mreturn[m dynArray;                                                                                              
}                                                                                                               
                                                                                                                
[1m[36m/** free all resources used by dynArray */[m                                                                      
[1m[32mvoid[m                                                                                                            
freeDynArray(DynArray *dynArray)                                                                                
{                                                                                                               
  free(dynArray->elements);                                                                                     
  free(dynArray);                                                                                               
}                                                                                                               
                                                                                                                
                                                                                                                
[1m[36m/** Return &dynArray[i].  Element i must exist.  */[m                                                             
[1m[32mvoid[m *                                                                                                          
getElementDynArray([1m[32mconst[m DynArray *dynArray, [1m[32mint[m i)                                                             
{                                                                                                               
  assert(i < dynArray->index);                                                                                  
  [1m[33mreturn[m dynArray->elements + i*dynArray->elementSize;                                                          
}                                                                                                               
                                                                                                                
[1m[36m/** Set dynArray[i] to *element.  Element i must exist.  Return[m                                                 
[1m[36m * pointer to set element.[m                                                                                      
[1m[36m */[m                                                                                                             
                                                                                                                [45;1H[46m{


}[m[53;1H[1m[32mvoid[m *[54;96H[1m[7m4,1[12C3[48;1H[?25h[?0c[?25l[?1c[m[55;215H:[48;1H[55;215H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[17;1H[1;1H[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m                             
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m              
            
[1m[34m#include [m[1m[35m"dyn-array.h"[m                                               
[1m[34m#include [m[1m[35m"point2.h"[m
   
[1m[32mstatic[m [1m[32mvoid[m     
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)      
{                                       
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);[14;7H!in) {            [15;29H[1m[35mread [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno)); 


  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }                                          
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}            
                                                                                                                
[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{                 
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}
                                          
[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)

  [1m[32mconst[m [1m[32mint[m n = nE[7CDynArray(points);
  assert(n > [1m[35m0[m); 
  [1m[32mdouble[m sum = [1m[35m0[m;
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);
    [1m[32mdouble[m mag = magnitudePoint2(p);               
    sum += mag;
  }                                                
  [1m[33mreturn[m sum/n;
}                             
                                                      
[1m[32mstatic[m [1m[32mvoid[m
statPoints(DynArray *points, [1m[32mFILE[m *out)
{                                                              
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {
[1m[7mstat-points.c[81C18[13C 2[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m9[18;1H[?25h[?0c[?25l[?1c[m[55;215HG[18;1H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  [1m[33mif[m (n > [1m[35m0[m) {                                                                                                  
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [17;5H[1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;1H[K[54;95H[1m[7m91[13CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[28;1H{[53;1H}[54;96H[1m[7m0[52;1H[?25h[?0c[?25l[?1c[m[55;215Hk[52;1H[55;215H [51;1H[54;95H[1m[7m89[51;1H[?25h[?0c[?25l[?1c[m[55;215Hk[51;1H[55;215H [50;1H[54;96H[1m[7m8[50;1H[?25h[?0c[?25l[?1c[m[55;215Hk[50;1H[55;215H [49;1H[54;96H[1m[7m7[49;1H[?25h[?0c[?25l[?1c[m[55;215Hk[49;1H[55;215H [48;1H[54;96H[1m[7m6[48;1H[?25h[?0c[?25l[?1c[m[55;215Hw[48;1H[55;215H [48;11H[54;98H[1m[7m6-11[48;11H[?25h[?0c[?25l[?1c[m[55;215Hw[48;11H[55;215H [48;18H[46m([57C)[m[54;98H[1m[7m13-18[48;18H[?25h[?0c[?25l[?1c[m[55;215Hw[48;18H[55;215H [48;19H([57C)[54;99H[1m[7m4-19[48;19H[?25h[?0c[?25l[?1c[m[55;215Hk[48;19H[55;215H [47;19H[46m([mout[46m)[m[54;96H[1m[7m5[47;19H[?25h[?0c[?25l[?1c[m[55;215Hw[47;19H[55;215H [47;20H(out)[54;99H[1m[7m5-20[47;20H[?25h[?0c[?25l[?1c[m[55;215Hw[47;20H[55;215H [47;23H[46m([mout[46m)[m[54;99H[1m[7m8-23[47;23H[?25h[?0c[?25l[?1c[m[55;215Hw[47;23H[55;215H [47;25H(out)[54;98H[1m[7m20-25[47;25H[?25h[?0c[?25l[?1c[m[55;215Hw[47;25H[55;215H [47;28H[54;99H[1m[7m3-28[47;28H[?25h[?0c[?25l[?1c[m[55;215Hw[47;28H[55;215H [47;29H[47;12H[46m([16C)[m[54;99H[1m[7m4-29[47;29H[?25h[?0c[?25l[?1c[m[55;215Hb[47;29H[55;215H [47;28H[47;12H([16C)[54;99H[1m[7m3-28[47;28H[?25h[?0c[?25l[?1c[m[55;215Hb[47;28H[55;215H [47;25H[54;99H[1m[7m0-25[47;25H[?25h[?0c[?25l[?1c[m[55;215Hb[47;25H[55;215H [47;23H[46m([mout[46m)[m[54;98H[1m[7m18-23[47;23H[?25h[?0c[?25l[?1c[m[55;215Hb[47;23H[55;215H [47;20H(out)[54;99H[1m[7m5-20[47;20H[?25h[?0c[?25l[?1c[m[55;215H:[47;20H[55;215H[K[55;1H:[?25h[?0c[?25l[?1c[55;1H[K[47;20H[?25h[?0c[?25l[?1c[55;215Hk[47;20H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18   [46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;20H[46;18H{[51;3H}[54;96H[1m[7m3,20[45;20H[?25h[?0c[?25l[?1c[m[55;215Hk[45;20H[55;215H [44;20H[54;96H[1m[7m2[44;20H[?25h[?0c[?25l[?1c[m[55;215Hj[44;20H[55;215H [45;20H[54;96H[1m[7m3[45;20H[?25h[?0c[?25l[?1c[m[55;215Hj[45;20H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18[46;18H[?25h[?0c[?25l[?1c[m[55;215Hj[46;18H[55;215H [47;20H[46;18H{[51;3H}[54;96H[1m[7m5,15-20[47;20H[?25h[?0c[?25l[?1c[m[55;215Hj[47;20H[55;215H [48;20H[54;96H[1m[7m6[48;20H[?25h[?0c[?25l[?1c[m[55;215Hj[48;20H[55;215H [49;18H[54;96H[1m[7m7,13-18[49;18H[?25h[?0c[?25l[?1c[m[55;215Hk[49;18H[55;215H [48;20H[54;96H[1m[7m6,15-20[48;20H[?25h[?0c[?25l[?1c[m[55;215Hk[48;20H[55;215H [47;20H[54;96H[1m[7m5[47;20H[?25h[?0c[?25l[?1c[m[55;215Hk[47;20H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18   [46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;20H[46;18H{[51;3H}[54;96H[1m[7m3,20[45;20H[?25h[?0c[?25l[?1c[m[55;215Hk[45;20H[55;215H [44;20H[54;96H[1m[7m2[44;20H[?25h[?0c[?25l[?1c[m[55;215Hj[44;20H[55;215H [45;20H[54;96H[1m[7m3[45;20H[?25h[?0c[?25l[?1c[m[55;215Hj[45;20H[55;215H [46;18H[46m{[51;3H}[m[54;96H[1m[7m4,18[46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;20H[46;18H{[51;3H}[54;96H[1m[7m3,20[45;20H[?25h[?0c[?25l[?1c[m[55;215Hk[45;20H[55;215H [44;20H[54;96H[1m[7m2[44;20H[?25h[?0c[?25l[?1c[m[55;215Hk[44;20H[55;215H [43;20H[46m[[1C][m[54;96H[1m[7m1[43;20H[?25h[?0c[?25l[?1c[m[55;215Hk[43;20H[55;215H [42;20H[43;18H[[1C][54;96H[1m[7m0[42;20H[?25h[?0c[?25l[?1c[m[55;215Hk[42;20H[55;215H [41;3H[35;18H[46m{[41;3H}[m[54;95H[1m[7m79,3 [41;3H[?25h[?0c[?25l[?1c[m[55;215Hk[41;3H[55;215H [40;9H[35;18H{[37;19H[46m{[40;9H}[m
  }[54;96H[1m[7m8,4-9[40;9H[?25h[?0c[?25l[?1c[m[55;215Hk[40;9H[55;215H [39;18H[37;19H{[40;9H}[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hk[39;18H[55;215H [38;20H[54;96H[1m[7m6,15-20[38;20H[?25h[?0c[?25l[?1c[m[55;215Hk[38;20H[55;215H [37;19H[46m{[40;9H}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hk[37;19H[55;215H [36;20H[46m([12C)[m[37;19H{[40;9H}[54;96H[1m[7m4,13-20[36;20H[?25h[?0c[?25l[?1c[m[55;215Hk[36;20H[55;215H [35;18H[46m{[m[36;20H([12C)[41;3H[46m}[m[54;96H[1m[7m3,18   [35;18H[?25h[?0c[?25l[?1c[m[55;215Hk[35;18H[55;215H [34;12H[35;18H{[41;3H}[54;96H[1m[7m2,12[34;12H[?25h[?0c[?25l[?1c[m[55;215Hk[34;12H[55;215H [33;1H[54;96H[1m[7m1,0-1[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [32;3H[29;29H[46m{[32;3H}[m[54;96H[1m[7m0,3  [32;3H[?25h[?0c[?25l[?1c[m[55;215Hk[32;3H[55;215H [31;12H[29;29H{[32;3H}[54;95H[1m[7m69,12[31;12H[?25h[?0c[?25l[?1c[m[55;215Hk[31;12H[55;215H [30;20H[54;96H[1m[7m8,20[30;20H[?25h[?0c[?25l[?1c[m[55;215Hk[30;20H[55;215H [29;20H[54;96H[1m[7m7[29;20H[?25h[?0c[?25l[?1c[m[55;215Hk[29;20H[55;215H [28;1H[46m{[53;1H}[m[54;96H[1m[7m6,1 [28;1H[?25h[?0c[?25l[?1c[m[55;215Hk[28;1H[55;215H [27;20H
{[53;1H}[54;96H[1m[7m5,20[27;20H[?25h[?0c[?25l[?1c[m[55;215H/[27;20H[55;215H[K[55;1H/[?25h[?0cc[?25l[?1c[27;22H[1m[7m[32mc[m[54;99H[1m[7m2
[m/c[?25h[?0cl[?25l[?1c[27;22H[1m[32mc[m[47;14H[7mcl[m[54;95H[1m[7m85,9-14
[m/cl[?25h[?0co[?25l[?1c[47;16H[7mo[55;5H[?25h[?0c[ms[?25l[?1c[47;17H[7ms[55;6H[?25h[?0c[me[?25l[?1c[47;18H[7me[55;7H[?25h[?0c[?25l[?1c[47;14H[mclose[?25h[?0c[?25l[?1c[55;215Hg[47;14H[?25h[?0c[?25l[?1c[55;215H [47;14H[55;215Hgg[47;14H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[55;1H[K[54;95H[1m[7m1,1    [8CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hk[1;1H[55;215H [1;1H[?25h[?0c[?25l[?1c[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[27;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hj[18;1H[55;215H [19;1H[54;96H[1m[7m9[19;1H[?25h[?0c[?25l[?1c[m[55;215Hj[19;1H[55;215H [20;1H[54;95H[1m[7m20[20;1H[?25h[?0c[?25l[?1c[m[55;215Hj[20;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215HG[21;1H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [16;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[54;95H[1m[7m9[14CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[28;1H{[53;1H}[54;96H[1m[7m0[52;1H[?25h[?0c[?25l[?1c[m[55;215Hk[52;1H[55;215H [51;1H[54;95H[1m[7m89[51;1H[?25h[?0c[?25l[?1c[m[55;215Hk[51;1H[55;215H [50;1H[54;96H[1m[7m8[50;1H[?25h[?0c[?25l[?1c[m[55;215Hk[50;1H[55;215H [49;1H[54;96H[1m[7m7[49;1H[?25h[?0c[?25l[?1c[m[55;215Hk[49;1H[55;215H [48;1H[54;96H[1m[7m6[48;1H[?25h[?0c[?25l[?1c[m[55;215Hk[48;1H[55;215H [47;1H[54;96H[1m[7m5[47;1H[?25h[?0c[?25l[?1c[m[55;215Hk[47;1H[55;215H [46;1H[54;96H[1m[7m4[46;1H[?25h[?0c[?25l[?1c[m[55;215Hk[46;1H[55;215H [45;1H[54;96H[1m[7m3[45;1H[?25h[?0c[?25l[?1c[m[55;215Hw[45;1H[55;215H [45;3H[54;98H[1m[7m3[45;3H[?25h[?0c[?25l[?1c[m[55;215Hw[45;3H[55;215H [45;15H[46m([mpoints[46m)[m[54;98H[1m[7m15[45;15H[?25h[?0c[?25l[?1c[m[55;215Hw[45;15H[55;215H [45;16H(points)[54;99H[1m[7m6[45;16H[?25h[?0c[?25l[?1c[m[55;215Hj[45;16H[55;215H [46;16H[46;6H[46m([9C)[m[54;96H[1m[7m4[46;16H[?25h[?0c[?25l[?1c[m[55;215Hb[46;16H[55;215H [46;15H[46;6H([9C)[54;99H[1m[7m5[46;15H[?25h[?0c[?25l[?1c[m[55;215Hb[46;15H[55;215H [46;12H[54;99H[1m[7m2[46;12H[?25h[?0c[?25l[?1c[m[55;215Hj[46;12H[55;215H [47;12H[46m([16C)[m[54;96H[1m[7m5,7-12[47;12H[?25h[?0c[?25l[?1c[m[55;215Hj[47;12H[55;215H [48;12H[47;12H([16C)[54;96H[1m[7m6[48;12H[?25h[?0c[?25l[?1c[m[55;215Hw[48;12H[55;215H [48;18H[46m([57C)[m[54;98H[1m[7m13-18[48;18H[?25h[?0c[?25l[?1c[m[55;215Hw[48;18H[55;215H [48;19H([57C)[54;99H[1m[7m4-19[48;19H[?25h[?0c[?25l[?1c[m[55;215Hw[48;19H[55;215H [48;25H[54;98H[1m[7m20-25[48;25H[?25h[?0c[?25l[?1c[m[55;215Hw[48;25H[55;215H [48;27H[54;99H[1m[7m2-27[48;27H[?25h[?0c[?25l[?1c[m[55;215Hw[48;27H[55;215H [48;28H[54;99H[1m[7m3-28[48;28H[?25h[?0c[?25l[?1c[m[55;215Hw[48;28H[55;215H [48;35H[54;98H[1m[7m30-35[48;35H[?25h[?0c[?25l[?1c[m[55;215Hw[48;35H[55;215H [48;41H[54;99H[1m[7m6-41[48;41H[?25h[?0c[?25l[?1c[m[55;215H:[48;41H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 91L, 2161C written[48;41H[?25h[?0c[?25l[?1c[55;215Hw[48;41H[55;215H [48;42H[54;99H[1m[7m7-42[48;42H[?25h[?0c[?25l[?1c[m[55;215Hw[48;42H[55;215H [48;43H[54;99H[1m[7m8-43[48;43H[?25h[?0c[?25l[?1c[m[55;215Hw[48;43H[55;215H [48;45H[54;98H[1m[7m40-45[48;45H[?25h[?0c[?25l[?1c[m[55;215Hw[48;45H[55;215H [48;46H[54;99H[1m[7m1-46[48;46H[?25h[?0c[?25l[?1c[m[55;215Hw[48;46H[55;215H [48;47H[54;99H[1m[7m2-47[48;47H[?25h[?0c[?25l[?1c[m[55;215Hw[48;47H[55;215H [48;48H[54;99H[1m[7m3-48[48;48H[?25h[?0c[?25l[?1c[m[55;215Hw[48;48H[55;215H [48;49H[54;99H[1m[7m4-49[48;49H[?25h[?0c[?25l[?1c[m[55;215Hw[48;49H[55;215H [48;52H[54;99H[1m[7m7-52[48;52H[?25h[?0c[?25l[?1c[m[55;215Hw[48;52H[55;215H [48;56H[46m[[1C][m[54;98H[1m[7m51-56[48;56H[?25h[?0c[?25l[?1c[m[55;215Hw[48;56H[55;215H [48;57H[[1C][54;99H[1m[7m2-57[48;57H[?25h[?0c[?25l[?1c[m[55;215Hw[48;57H[55;215H [48;58H[46m[[1C][m[54;99H[1m[7m3-58[48;58H[?25h[?0c[?25l[?1c[m[55;215Hw[48;58H[55;215H [48;61H[[1C][54;99H[1m[7m6-61[48;61H[?25h[?0c[?25l[?1c[m[55;215H^Z[48;61H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fgvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cfg[Kvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt 
==19051== Memcheck, a memory error detector
==19051== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==19051== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==19051== Command: ./stat-points point.dat out.txt
==19051== 
cannot read point.dat: No such file or directory
==19051== 
==19051== HEAP SUMMARY:
==19051==     in use at exit: 584 bytes in 2 blocks
==19051==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==19051== 
==19051== 32 bytes in 1 blocks are still reachable in loss record 1 of 2
==19051==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==19051==    by 0x1096A3: newDynArray (dyn-array.c:20)
==19051==    by 0x1095DE: main (stat-points.c:80)
==19051== 
==19051== 552 bytes in 1 blocks are still reachable in loss record 2 of 2
==19051==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==19051==    by 0x4A6E0FA: __fopen_internal (iofopen.c:65)
==19051==    by 0x109588: main (stat-points.c:74)
==19051== 
==19051== LEAK SUMMARY:
==19051==    definitely lost: 0 bytes in 0 blocks
==19051==    indirectly lost: 0 bytes in 0 blocks
==19051==      possibly lost: 0 bytes in 0 blocks
==19051==    still reachable: 584 bytes in 2 blocks
==19051==         suppressed: 0 bytes in 0 blocks
==19051== 
==19051== For counts of detected and suppressed errors, rerun with: -v
==19051== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);[82C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
}[111C[7m|[m
[1m[7mstat-points.c                                                                                 86,56-61       Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      45,1           Bot[48;61H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hk[48;61H[55;215H [47;31H[46m{[50;9H}[m[54;96H[1m[7m5,26-3[47;31H[?25h[?0c[?25l[?1c[m[55;215Hk[47;31H[55;215H [46;18H[46m{[m[47;31H{[50;9H}
  [46m}[m[54;96H[1m[7m4,18   [46;18H[?25h[?0c[?25l[?1c[m[55;215Hk[46;18H[55;215H [45;23H[46;18H{[51;3H}[54;96H[1m[7m3,23[45;23H[?25h[?0c[?25l[?1c[m[55;215Hk[45;23H[55;215H [44;49H[54;96H[1m[7m2,49[44;49H[?25h[?0c[?25l[?1c[m[55;215Hk[44;49H[55;215H [43;30H[54;96H[1m[7m1,30[43;30H[?25h[?0c[?25l[?1c[m[55;215Hk[43;30H[55;215H [42;49H[54;96H[1m[7m0,49[42;49H[?25h[?0c[?25l[?1c[m[55;215Hk[42;49H[55;215H [41;3H[35;18H[46m{[41;3H}[m[54;95H[1m[7m79,3 [41;3H[?25h[?0c[?25l[?1c[m[55;215Hk[41;3H[55;215H [40;9H[35;18H{[37;19H[46m{[40;9H}[m
  }[54;96H[1m[7m8,4-9[40;9H[?25h[?0c[?25l[?1c[m[55;215Hk[40;9H[55;215H [39;18H[37;19H{[40;9H}[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hk[39;18H[55;215H [38;61H[54;96H[1m[7m6,56-61[38;61H[?25h[?0c[?25l[?1c[m[55;215Hk[38;61H[55;215H [37;19H[46m{[40;9H}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hk[37;19H[55;215H [36;34H[37;19H{[40;9H}[54;96H[1m[7m4,27-34[36;34H[?25h[?0c[?25l[?1c[m[55;215Hk[36;34H[55;215H [35;18H[46m{[41;3H}[m[54;96H[1m[7m3,18   [35;18H[?25h[?0c[?25l[?1c[m[55;215Hj[35;18H[55;215H [36;34H[35;18H{[41;3H}[54;96H[1m[7m4,27-34[36;34H[?25h[?0c[?25l[?1c[m[55;215Hk[36;34H[55;215H [35;18H[46m{[41;3H}[m[54;96H[1m[7m3,18   [35;18H[?25h[?0c[?25l[?1c[m[55;215Hk[35;18H[55;215H [34;12H[35;18H{[41;3H}[54;96H[1m[7m2,12[34;12H[?25h[?0c[?25l[?1c[m[55;215Hk[34;12H[55;215H [33;1H[54;96H[1m[7m1,0-1[33;1H[?25h[?0c[?25l[?1c[m[55;215Hk[33;1H[55;215H [32;3H[29;29H[46m{[32;3H}[m[54;96H[1m[7m0,3  [32;3H[?25h[?0c[?25l[?1c[m[55;215Hk[32;3H[55;215H [31;12H[29;29H{[32;3H}[54;95H[1m[7m69,12[31;12H[?25h[?0c[?25l[?1c[m[55;215Hj[31;12H[55;215H [32;3H[29;29H[46m{[32;3H}[m[54;95H[1m[7m70,3 [32;3H[?25h[?0c[?25l[?1c[m[55;215Hj[32;3H[55;215H [33;1H[29;29H{[32;3H}[54;96H[1m[7m1,0-1[33;1H[?25h[?0c[?25l[?1c[m[55;215Hj[33;1H[55;215H [34;12H[54;96H[1m[7m2,12 [34;12H[?25h[?0c[?25l[?1c[m[55;215Hj[34;12H[55;215H [35;18H[46m{[41;3H}[m[54;96H[1m[7m3,18[35;18H[?25h[?0c[?25l[?1c[m[55;215Hj[35;18H[55;215H [36;34H[35;18H{[41;3H}[54;96H[1m[7m4,27-34[36;34H[?25h[?0c[?25l[?1c[m[55;215Hj[36;34H[55;215H [37;19H[46m{[40;9H}[m[54;96H[1m[7m5,14-19[37;19H[?25h[?0c[?25l[?1c[m[55;215Hj[37;19H[55;215H [38;61H[37;19H{[40;9H}[54;96H[1m[7m6,56-61[38;61H[?25h[?0c[?25l[?1c[m[55;215Hj[38;61H[55;215H [39;18H[54;96H[1m[7m7,13-18[39;18H[?25h[?0c[?25l[?1c[m[55;215Hj[39;18H[55;215H [40;9H[37;19H[46m{[40;9H}[m[54;96H[1m[7m8,4-9  [40;9H[?25h[?0c[?25l[?1c[m[55;215Hj[40;9H[55;215H [41;3H[35;18H[46m{[m[37;19H{[40;9H}
  [46m}[m[54;96H[1m[7m9,3  [41;3H[?25h[?0c[?25l[?1c[m[55;215Hj[41;3H[55;215H [42;49H[35;18H{[41;3H}[54;95H[1m[7m80,49[42;49H[?25h[?0c[?25l[?1c[m[55;215Hj[42;49H[55;215H [43;30H[54;96H[1m[7m1,30[43;30H[?25h[?0c[?25l[?1c[m[55;215Hg[43;30H[?25h[?0c[?25l[?1c[55;215H [43;30H[55;215Hgg[43;30H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m1,1  [10CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[27;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hj[18;1H[55;215H [19;1H[54;96H[1m[7m9[19;1H[?25h[?0c[?25l[?1c[m[55;215Hj[19;1H[55;215H [20;1H[54;95H[1m[7m20[20;1H[?25h[?0c[?25l[?1c[m[55;215Hj[20;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hj[21;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hj[22;1H[55;215H [23;1H[54;96H[1m[7m3[23;1H[?25h[?0c[?25l[?1c[m[55;215Hj[23;1H[55;215H [24;1H[54;96H[1m[7m4[24;1H[?25h[?0c[?25l[?1c[m[55;215Hw[24;1H[55;215H [24;5H[54;98H[1m[7m5[24;5H[?25h[?0c[?25l[?1c[m[55;215Hw[24;5H[55;215H [24;12H[46m([56C)[m[54;98H[1m[7m12[24;12H[?25h[?0c[?25l[?1c[m[55;215Hw[24;12H[55;215H [24;13H([56C)[54;99H[1m[7m3[24;13H[?25h[?0c[?25l[?1c[m[55;215Hk[24;13H[55;215H [23;13H[46m([min[46m)[m[54;96H[1m[7m3[23;13H[?25h[?0c[?25l[?1c[m[55;215Hb[23;13H[55;215H [23;7Hfclose(in)[54;98H[1m[7m7 [23;7H[?25h[?0c[?25l[?1c[m[55;215HV[23;7H[55;215H1[23;7H[7m  [m[1m[7m[33mif[m[7m ([mf[7mclose(in) != [m[1m[7m[35m0[m[7m) { [m[55;1H[1m-- VISUAL LINE --[m[55;215H[K[55;215H1[23;7H[?25h[?0c[?25l[?1c[55;215Hj[23;7H[55;215H2[24;7H[23;7H[7mf
    fp[mr[7mintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot close [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, inName, strerror(errno)); [m[54;96H[1m[7m4[24;7H[?25h[?0c[?25l[?1c[m[55;215Hj[24;7H[55;215H3[25;7H[24;7H[7mr
    ex[mi[7mt([m[1m[7m[35m1[m[7m); [m[54;96H[1m[7m5[25;7H[?25h[?0c[?25l[?1c[m[55;215Hj[25;7H[55;215H4[26;4H[25;7H[7mi
  }[m[54;96H[1m[7m6,4[26;4H[?25h[?0c[?25l[?1c[m[55;215Hy[26;4H[23;1H  [1m[33mif[m (fclose(in) != [1m[35m0[m) { 
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno)); 
    exit([1m[35m1[m); 
  }[55;1H[K[55;1H4 lines yanked[23;1H[54;96H[1m[7m3,1[23;1H[?25h[?0c[?25l[?1c[m[55;215Hk[23;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hk[22;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hk[21;1H[55;215H [20;1H[54;96H[1m[7m0[20;1H[?25h[?0c[?25l[?1c[m[55;215Hk[20;1H[55;215H [19;1H[54;95H[1m[7m19[19;1H[?25h[?0c[?25l[?1c[m[55;215Hk[19;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hk[18;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hk[17;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hp[16;1H[55;3Hmore lines[55;13H[K[17;3H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     [17;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }[54;15H[1m[7m[+][78C7,3[m[55;1H[K[55;1H4 more lines[17;3H[?25h[?0c[?25l[?1c[55;215H^V[17;3H[55;215H1x1[17;3H[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x1[17;3H[?25h[?0c[?25l[?1c[55;215Hj  [17;3H[55;215H2x1[18;3H[17;3H[1m[7m[33mi[m[54;96H[1m[7m8[18;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [18;3H[55;215H3x1[19;3H[18;3H[7m [m[54;96H[1m[7m9[19;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [19;3H[55;215H4x1[20;3H[17;24H[46m{[m

  [7m [m
  [46m}[m[54;95H[1m[7m20[20;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [20;3H[55;215H5x1[21;3H[17;24H{[20;3H[7m}[m[54;96H[1m[7m1[21;3H[?25h[?0c[?25l[?1c[m[55;215Hk  [21;3H[55;215H4x1[20;3H[17;24H[46m{[20;3H}[m[54;96H[1m[7m0[20;3H[?25h[?0c[?25l[?1c[m[55;215HI  [20;3H[17;3H[1m[33mi[m
   
   [55;1H[K[17;3H[55;1H[1m-- INSERT --[m[17;24H{[20;3H}[54;95H[1m[7m17[17;3H[?25h[?0c[?25l[?1c[m      [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m4-9[17;9H[?25h[?0c[m[55;1H[K[17;8H[?25l[?1c[55;215H^[[17;8H[55;215H  [17;9H
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
          exit([1m[35m1[m);
        }[54;98H[1m[7m3-8[17;8H[?25h[?0c[?25l[?1c[m[55;215H^V[17;8H[55;215H1x6[17;8H  [7m     [m[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x6[17;8H[?25h[?0c[?25l[?1c[55;215Hh  [17;8H[55;215H1x7[17;2H[6C[7m [m[54;98H[1m[7m2  [17;2H[?25h[?0c[?25l[?1c[m[55;215Hl  [17;2H[55;215H1x6[17;3H [54;98H[1m[7m3[17;3H[?25h[?0c[?25l[?1c[m[55;215Hl  [17;3H[55;215H1x7[17;9H  [7m [m[54;98H[1m[7m4-9[17;9H[?25h[?0c[?25l[?1c[m[55;215Hh  [17;9H[55;215H1x6[17;3H [54;98H[1m[7m3  [17;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [17;3H[55;215H2x6[18;8H[17;3H[7m 
[m  [7m     [m[54;96H[1m[7m8,3-8[18;8H[?25h[?0c[?25l[?1c[m[55;215Hj  [18;8H[55;215H3x6[19;8H[18;8H[7m 
[m  [7m     [m[54;96H[1m[7m9[19;8H[?25h[?0c[?25l[?1c[m[55;215Hj  [19;8H[55;215H4x6[20;8H[19;8H[7m 
[m  [7m     [m[54;95H[1m[7m20[20;8H[?25h[?0c[?25l[?1c[m[55;215Hx  [20;8H[55;215H [17;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {      
    fprintf([1m[35mstderr[m, [1m[35m"cannot close[m[1C[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));      
    exit([1m[35m1[m);      
  }      [55;1H[K[54;95H[1m[7m17,3  [17;3H[?25h[?0c[?25l[?1c[m[55;215Hl[17;3H[55;215H [17;4H[54;98H[1m[7m4[17;4H[?25h[?0c[?25l[?1c[m[55;215Hh[17;4H[55;215H [17;3H[54;98H[1m[7m3[17;3H[?25h[?0c[?25l[?1c[m[55;215H^V[17;3H[55;215H1x1[17;3H[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x1[17;3H[?25h[?0c[?25l[?1c[55;215Hj  [17;3H[55;215H2x1[18;3H[17;3H[1m[7m[33mi[m[54;96H[1m[7m8[18;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [18;3H[55;215H3x1[19;3H[18;3H[7m [m[54;96H[1m[7m9[19;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [19;3H[55;215H4x1[20;3H[17;24H[46m{[m

  [7m [m
  [46m}[m[54;95H[1m[7m20[20;3H[?25h[?0c[?25l[?1c[m[55;215HI  [20;3H[17;3H[1m[33mi[m
   
   [55;1H[K[17;3H[55;1H[1m-- INSERT --[m[17;24H{[20;3H}[54;95H[1m[7m17[17;3H[?25h[?0c[?25l[?1c[m [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m4[17;4H[?25h[?0c[?25l[?1c[m [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m5[17;5H[?25h[?0c[m[55;1H[K[17;4H[?25l[?1c[55;215H^[[17;4H[55;215H  [17;5H
      fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
      exit([1m[35m1[m);
    }[54;98H[1m[7m3[17;3H[?25h[?0c[?25l[?1c[m[55;215H:[17;3H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 95L, 2282C written[17;3H[54;15H[1m[7m   [17;3H[?25h[?0c[?25l[?1c[m[55;215HG[17;3H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [12;1HstatPoints(DynArray *points, [1m[32mFILE[m *out)
{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;1H[K[54;95H[1m[7m95,1[11CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215H:[53;1H[55;215H[K[55;1H:[?25h[?0c [?25l[?1c[53;1H[?25h[?0c[?25l[?1c[55;215Hg[53;1H[?25h[?0c[?25l[?1c[55;215H [53;1H[55;215Hgg[53;1H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    [1m[33mif[m (fclose(in) != [1m[35m0[m) {[18;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[19;7Hexit([1m[35m1[m);
    }
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m1,1 [11CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[31;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[31;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hj[18;1H[55;215H [19;1H[54;96H[1m[7m9[19;1H[?25h[?0c[?25l[?1c[m[55;215Hj[19;1H[55;215H [20;1H[54;95H[1m[7m20[20;1H[?25h[?0c[?25l[?1c[m[55;215Hj[20;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hj[21;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hj[22;1H[55;215H [23;1H[54;96H[1m[7m3[23;1H[?25h[?0c[?25l[?1c[m[55;215Hj[23;1H[55;215H [24;1H[54;96H[1m[7m4[24;1H[?25h[?0c[?25l[?1c[m[55;215Hj[24;1H[55;215H [25;1H[54;96H[1m[7m5[25;1H[?25h[?0c[?25l[?1c[m[55;215Hj[25;1H[55;215H [26;1H[54;96H[1m[7m6[26;1H[?25h[?0c[?25l[?1c[m[55;215Hj[26;1H[55;215H [27;1H[54;96H[1m[7m7[27;1H[?25h[?0c[?25l[?1c[m[55;215Hj[27;1H[55;215H [28;1H[54;96H[1m[7m8[28;1H[?25h[?0c[?25l[?1c[m[55;215Hj[28;1H[55;215H [29;1H[54;96H[1m[7m9[29;1H[?25h[?0c[?25l[?1c[m[55;215Hk[29;1H[55;215H [28;1H[54;96H[1m[7m8[28;1H[?25h[?0c[?25l[?1c[m[55;215Hk[28;1H[55;215H [27;1H[54;96H[1m[7m7[27;1H[?25h[?0c[?25l[?1c[m[55;215Hw[27;1H[55;215H [27;3H[54;98H[1m[7m3[27;3H[?25h[?0c[?25l[?1c[m[55;215Hw[27;3H[55;215H [27;6H[46m([15C)[m[54;98H[1m[7m6[27;6H[?25h[?0c[?25l[?1c[m[55;215Hw[27;6H[55;215H [27;7H([15C)[54;98H[1m[7m7[27;7H[?25h[?0c[?25l[?1c[m[55;215Hw[27;7H[55;215H [27;13H[46m([min[46m)[m[54;98H[1m[7m13[27;13H[?25h[?0c[?25l[?1c[m[55;215Hw[27;13H[55;215H [27;14H(in)[54;99H[1m[7m4[27;14H[?25h[?0c[?25l[?1c[m[55;215Hw[27;14H[55;215H [27;16H[46m([min[46m)[m[54;99H[1m[7m6[27;16H[?25h[?0c[?25l[?1c[m[55;215Hw[27;16H[55;215H [27;18H(in)[54;99H[1m[7m8[27;18H[?25h[?0c[?25l[?1c[m[55;215Hw[27;18H[55;215H [27;21H[54;98H[1m[7m21[27;21H[?25h[?0c[?25l[?1c[m[55;215Hk[27;21H[55;215H [26;3H[24;54H[46m{

[m  [46m}[m[54;96H[1m[7m6,3 [26;3H[?25h[?0c[?25l[?1c[m[55;215Hk[26;3H[55;215H [25;21H[24;54H{

  }[54;96H[1m[7m5,21[25;21H[?25h[?0c[?25l[?1c[m[55;215Hk[25;21H[55;215H [24;21H[54;96H[1m[7m4[24;21H[?25h[?0c[?25l[?1c[m[55;215Hk[24;21H[55;215H [23;16H[54;96H[1m[7m3,16[23;16H[?25h[?0c[?25l[?1c[m[55;215Hk[23;16H[55;215H [22;3H[15;12H[46m{[22;3H}[m[54;96H[1m[7m2,3 [22;3H[?25h[?0c[?25l[?1c[m[55;215Hk[22;3H[55;215H [21;12H[15;12H{[22;3H}[54;96H[1m[7m1,12[21;12H[?25h[?0c[?25l[?1c[m[55;215Hk[21;12H[55;215H [20;5H[17;26H[46m{[20;5H}[m[54;96H[1m[7m0,5 [20;5H[?25h[?0c[?25l[?1c[m[55;215HG[20;5H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);   
  [1m[32mdouble[m sum = [1m[35m0[m; 
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);
    [1m[32mdouble[m mag = magnitudePoint2(p);
    sum += mag;    
  }
  [1m[33mreturn[m sum/n;       
}                  


stat[7CDynArray *points, [1m[32mFILE[m *out)         

  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {                                                       
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));    
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,
   [9Cmin, average, median, max);
  }             
}                                                     
                                        
[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m                                                                     
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }
          
  [1m[32mFILE[m *out;                                 
  [1m[33mif[m (argc == [1m[35m3[m) {
        out = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);                 
 [7C[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));
          exit([1m[35m1[m);
        }                            
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);        
  [1m[33mif[m (argc == [1m[35m3[m) {                                  
        [1m[33mif[m (fclose(out) != [1m[35m0[m) {     
          fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));
   [7Cexit([1m[35m1[m);
        }      
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m          [54;95H[1m[7m95,1[11CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215H^Z[53;1H


[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
gcc   stat-points.o dyn-array.o  -lm -o stat-points
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make[2Pfgvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt 
==19345== Memcheck, a memory error detector
==19345== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==19345== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==19345== Command: ./stat-points point.dat out.txt
==19345== 
cannot read point.dat: No such file or directory
==19345== Invalid read of size 4
==19345==    at 0x4A6D7E4: fclose@@GLIBC_2.2.5 (iofclose.c:48)
==19345==    by 0x1092C9: readPoints (stat-points.c:17)
==19345==    by 0x10964A: main (stat-points.c:85)
==19345==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19345== 
==19345== 
==19345== Process terminating with default action of signal 11 (SIGSEGV)
==19345==  Access not within mapped region at address 0x0
==19345==    at 0x4A6D7E4: fclose@@GLIBC_2.2.5 (iofclose.c:48)
==19345==    by 0x1092C9: readPoints (stat-points.c:17)
==19345==    by 0x10964A: main (stat-points.c:85)
==19345==  If you believe this happened as a result of a stack
==19345==  overflow in your program's main thread (unlikely but
==19345==  possible), you can try to increase the size of the
==19345==  main thread stack using the --main-stacksize= flag.
==19345==  The main thread stack size used in this run was 8388608.
==19345== 
==19345== HEAP SUMMARY:
==19345==     in use at exit: 584 bytes in 2 blocks
==19345==   total heap usage: 3 allocs, 1 frees, 1,136 bytes allocated
==19345== 
==19345== 32 bytes in 1 blocks are still reachable in loss record 1 of 2
==19345==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==19345==    by 0x1096F1: newDynArray (dyn-array.c:20)
==19345==    by 0x10962C: main (stat-points.c:84)
==19345== 
==19345== 552 bytes in 1 blocks are still reachable in loss record 2 of 2
==19345==    at 0x483577F: malloc (vg_replace_malloc.c:299)
==19345==    by 0x4A6E0FA: __fopen_internal (iofopen.c:65)
==19345==    by 0x1095D6: main (stat-points.c:78)
==19345== 
==19345== LEAK SUMMARY:
==19345==    definitely lost: 0 bytes in 0 blocks
==19345==    indirectly lost: 0 bytes in 0 blocks
==19345==      possibly lost: 0 bytes in 0 blocks
==19345==    still reachable: 584 bytes in 2 blocks
==19345==         suppressed: 0 bytes in 0 blocks
==19345== 
==19345== For counts of detected and suppressed errors, rerun with: -v
==19345== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
[46m{[m[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], points);[82C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
[46m}[m[111C[7m|[m
[1m[7mstat-points.c                                                                                 95,1           Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      45,1           Bot[53;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[28;1H{[53;1H}[54;96H[1m[7m4[52;1H[?25h[?0c[?25l[?1c[m[55;215Hg[52;1H[?25h[?0c[?25l[?1c[55;215H [52;1H[55;215Hgg[52;1H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    [1m[33mif[m (fclose(in) != [1m[35m0[m) {[18;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[19;7Hexit([1m[35m1[m);
    }
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m1,1 [11CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[31;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[31;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hj[18;1H[55;215H [19;1H[54;96H[1m[7m9[19;1H[?25h[?0c[?25l[?1c[m[55;215Hj[19;1H[55;215H [20;1H[54;95H[1m[7m20[20;1H[?25h[?0c[?25l[?1c[m[55;215Hw[20;1H[55;215H [20;5H[17;26H[46m{[20;5H}[m[54;98H[1m[7m5[20;5H[?25h[?0c[?25l[?1c[m[55;215Hk[20;5H[55;215H [19;5H[17;26H{[20;5H}[54;95H[1m[7m19[19;5H[?25h[?0c[?25l[?1c[m[55;215Hk[19;5H[55;215H [18;5H[54;96H[1m[7m8[18;5H[?25h[?0c[?25l[?1c[m[55;215Hk[18;5H[55;215H [17;5H[54;96H[1m[7m7[17;5H[?25h[?0c[?25l[?1c[m[55;215HV[17;5H[55;215H1[17;5H[7m    [m[1C[1m[7m[33mf[m[7m (fclose(in) != [m[1m[7m[35m0[m[7m) { [m[55;1H[1m-- VISUAL LINE --[m[55;215H[K[55;215H1[17;5H[?25h[?0c[?25l[?1c[55;215Hj[17;5H[55;215H2[18;5H[17;5H[1m[7m[33mi[m
[7m    [m [7m fprintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot close [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, inName, strerror(errno)); [m[54;96H[1m[7m8[18;5H[?25h[?0c[?25l[?1c[m[55;215Hj[18;5H[55;215H3[19;5H[18;5H[7m 
    [m [7m exit([m[1m[7m[35m1[m[7m); [m[54;96H[1m[7m9[19;5H[?25h[?0c[?25l[?1c[m[55;215Hj[19;5H[55;215H4[20;5H[19;5H[7m 
    [m[46m}[m[7m [m[54;95H[1m[7m20[20;5H[?25h[?0c[?25l[?1c[m[55;215Hx[20;5H[55;1H4 fewer lines[55;14H[K[17;5H    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [50;1HstatPoints(DynArray *points, [1m[32mFILE[m *out)
{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;15H[1m[7m[+][77C17[m[55;1H[K[55;1H4 fewer lines[17;5H[?25h[?0c[?25l[?1c[55;215H:[17;5H[55;1H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 91L, 2161C written[17;5H[54;15H[1m[7m   [17;5H[?25h[?0c[?25l[?1c[m[55;215HG[17;5H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [16;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;1H[K[54;95H[1m[7m91,1[11CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215Hg[53;1H[?25h[?0c[?25l[?1c[55;215H [53;1H[55;215Hgg[53;1H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m1,1 [11CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hj[11;1H[55;215H [12;1H[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;1H[13;1H{[27;1H}[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hj[14;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hj[15;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hj[16;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hj[17;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hj[18;1H[55;215H [19;1H[54;96H[1m[7m9[19;1H[?25h[?0c[?25l[?1c[m[55;215Hj[19;1H[55;215H [20;1H[54;95H[1m[7m20[20;1H[?25h[?0c[?25l[?1c[m[55;215Hj[20;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hj[21;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hj[22;1H[55;215H [23;1H[54;96H[1m[7m3[23;1H[?25h[?0c[?25l[?1c[m[55;215Hj[23;1H[55;215H [24;1H[54;96H[1m[7m4[24;1H[?25h[?0c[?25l[?1c[m[55;215Hj[24;1H[55;215H [25;1H[54;96H[1m[7m5[25;1H[?25h[?0c[?25l[?1c[m[55;215Hj[25;1H[55;215H [26;1H[54;96H[1m[7m6[26;1H[?25h[?0c[?25l[?1c[m[55;215Hj[26;1H[55;215H [27;1H[13;1H[46m{[27;1H}[m[54;96H[1m[7m7[27;1H[?25h[?0c[?25l[?1c[m[55;215Hj[27;1H[55;215H [28;1H[13;1H{[27;1H}[54;96H[1m[7m8,0-1[28;1H[?25h[?0c[?25l[?1c[m[55;215Hj[28;1H[55;215H [29;1H[54;96H[1m[7m9,1  [29;1H[?25h[?0c[?25l[?1c[m[55;215Hj[29;1H[55;215H [30;1H[54;95H[1m[7m30[30;1H[?25h[?0c[?25l[?1c[m[55;215Hk[30;1H[55;215H [29;1H[54;95H[1m[7m29[29;1H[?25h[?0c[?25l[?1c[m[55;215Hk[29;1H[55;215H [28;1H[54;96H[1m[7m8,0-1[28;1H[?25h[?0c[?25l[?1c[m[55;215Hk[28;1H[55;215H [27;1H[13;1H[46m{[27;1H}[m[54;96H[1m[7m7,1  [27;1H[?25h[?0c[?25l[?1c[m[55;215Hk[27;1H[55;215H [26;1H[13;1H{[27;1H}[54;96H[1m[7m6[26;1H[?25h[?0c[?25l[?1c[m[55;215Hk[26;1H[55;215H [25;1H[54;96H[1m[7m5[25;1H[?25h[?0c[?25l[?1c[m[55;215Hk[25;1H[55;215H [24;1H[54;96H[1m[7m4[24;1H[?25h[?0c[?25l[?1c[m[55;215Hk[24;1H[55;215H [23;1H[54;96H[1m[7m3[23;1H[?25h[?0c[?25l[?1c[m[55;215Hk[23;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hk[22;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hk[21;1H[55;215H [20;1H[54;96H[1m[7m0[20;1H[?25h[?0c[?25l[?1c[m[55;215Hk[20;1H[55;215H [19;1H[54;95H[1m[7m19[19;1H[?25h[?0c[?25l[?1c[m[55;215Hk[19;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hk[18;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hk[17;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hk[16;1H[55;215H [15;1H[54;96H[1m[7m5[15;1H[?25h[?0c[?25l[?1c[m[55;215Hk[15;1H[55;215H [14;1H[54;96H[1m[7m4[14;1H[?25h[?0c[?25l[?1c[m[55;215Hk[14;1H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hk[13;1H[55;215H [12;1H
{[27;1H}[54;96H[1m[7m2[12;1H[?25h[?0c[?25l[?1c[m[55;215HA[12;1H[55;215H [12;49H[55;1H[1m-- INSERT --[m[12;11H[46m([36C)[m[54;98H[1m[7m49[12;49H[?25h[?0c[m[55;1H[K[12;48H[?25l[?1c[55;215H^[[12;48H[55;215H  [12;49H[54;99H[1m[7m8[12;48H[?25h[?0c[?25l[?1c[m[55;215Hi[12;48H[55;215H [12;48H[55;1H[1m-- INSERT --[12;48H[?25h[?0c[m[55;1H[K[12;47H[?25l[?1c[55;215H^[[12;47H[55;215H  [12;48H[12;11H([36C)[54;99H[1m[7m7[12;47H[?25h[?0c[?25l[?1c[m[55;215H/[12;47H[55;215H[K[55;1H/[?25h[?0cr[?25l[?1c[14;29H[1m[7m[35mr[m[54;96H[1m[7m4,29
[m/r[?25h[?0ce[?25l[?1c[14;29H[1m[35mr[m[16;29H[1m[7m[35mre[m[54;96H[1m[7m6
[m/re[?25h[?0ca[?25l[?1c[16;31H[1m[7m[35ma[55;5H[?25h[?0c[md[?25l[?1c[16;32H[1m[7m[35md[55;6H[?25h[?0c[m{[?25l[?1c[16;29H[1m[35mread[m[54;96H[1m[7m2,47[55;7H[mP[?25h[?0c[?25l[?1c[55;7H[K[55;7H[?25h[?0c[?25l[?1c[55;6H[K[16;29H[1m[7m[35mread[m[54;96H[1m[7m6,29[55;6H[?25h[?0c[mP[?25l[?1c[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [21;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[27;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[41;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[42;9H[1m[33mif[m (!out) {[43;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[44;11Hexit([1m[35m1[m);[45;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  [7mreadP[moints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[52;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[53;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[54;95H[1m[7m81,3 [10C86%[m[55;1H[K[55;1H/readP[?25h[?0c[?25l[?1c[48;3HreadP  [?25h[?0c[?25l[?1c[55;215Hn[48;3H[55;215H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[12;1H[m[1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}[55;1H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m[54;95H[1m[7m12,1[11CTop[12;1H[?25h[?0c[?25l[?1c[m[55;215Hn[12;1H[55;1H/readP[55;7H[K[55;1H[48;3H[1;1H                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [21;3H[1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[27;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
{
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[41;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[42;9H[1m[33mif[m (!out) {[43;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[44;11Hexit([1m[35m1[m);[45;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[52;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[53;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[55;1H[K[54;95H[1m[7m81,3[11C86%[48;3H[?25h[?0c[?25l[?1c[m[55;215Hn[48;3H[55;1H/readP[55;215H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[12;1H[m[1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
{                                                                                                               
  sortDynArray(points, comparePoint2);                                                                          
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}[55;1H[K[55;1H[1m[31msearch hit BOTTOM, continuing at TOP[m[54;95H[1m[7m12,1[11CTop[12;1H[?25h[?0c[?25l[?1c[m[55;215HA[12;1H[55;215H [12;49H[55;1H[1m-- INSERT --[m[55;13H[K[12;11H[46m([36C)[m[54;98H[1m[7m49[12;49H[?25h[?0c[m[55;1H[K[12;48H[?25l[?1c[55;215H^[[12;48H[55;215H  [12;49H[54;99H[1m[7m8[12;48H[?25h[?0c[?25l[?1c[m[55;215Hb[12;48H[55;215H [12;42H[12;11H([36C)[54;99H[1m[7m2[12;42H[?25h[?0c[?25l[?1c[m[55;215Hb[12;42H[55;215H [12;41H[54;99H[1m[7m1[12;41H[?25h[?0c[?25l[?1c[m[55;215Hb[12;41H[55;215H [12;32H[54;98H[1m[7m32[12;32H[?25h[?0c[?25l[?1c[m[55;215Hb[12;32H[55;215H [12;30H[54;99H[1m[7m0[12;30H[?25h[?0c[?25l[?1c[m[55;215Hw[12;30H[55;215H [12;32H[54;99H[1m[7m2[12;32H[?25h[?0c[?25l[?1c[m[55;215Hi[12;32H[55;215H [12;32H[55;1H[1m-- INSERT --[12;32H[?25h[?0c[?25l[?1c[mcDynArray *points)[54;15H[1m[7m[+][81C3[12;33H[?25h[?0c[?25l[?1c[moDynArray *points)[54;99H[1m[7m4[12;34H[?25h[?0c[?25l[?1c[mnDynArray *points)[54;99H[1m[7m5[12;35H[?25h[?0c[?25l[?1c[msDynArray *points)[54;99H[1m[7m6[12;36H[?25h[?0c[?25l[?1c[mtDynArray *points)[54;99H[1m[7m7[12;37H[?25h[?0c[?25l[?1c[m[1m[32mconst[m DynArray *points)[54;99H[1m[7m8[12;38H[?25h[?0c[?25l[?1c[mcDynArray *points)[54;99H[1m[7m9[12;39H[?25h[?0c[?25l[?1c[mhDynArray *points)[54;98H[1m[7m40[12;40H[?25h[?0c[?25l[?1c[maDynArray *points)[54;99H[1m[7m1[12;41H[?25h[?0c[?25l[?1c[mrDynArray *points)[54;99H[1m[7m2[12;42H[?25h[?0c[?25l[?1c[m[1m[32mchar[m DynArray *points)[54;99H[1m[7m3[12;43H[?25h[?0c[?25l[?1c[m*DynArray *points)[54;99H[1m[7m4[12;44H[?25h[?0c[?25l[?1c[moDynArray *points)[54;99H[1m[7m5[12;45H[?25h[?0c[?25l[?1c[muDynArray *points)[54;99H[1m[7m6[12;46H[?25h[?0c[?25l[?1c[mtDynArray *points)[54;99H[1m[7m7[12;47H[?25h[?0c[?25l[?1c[mNDynArray *points)[54;99H[1m[7m8[12;48H[?25h[?0c[?25l[?1c[maDynArray *points)[54;99H[1m[7m9[12;49H[?25h[?0c[?25l[?1c[mmDynArray *points)[54;98H[1m[7m50[12;50H[?25h[?0c[?25l[?1c[meDynArray *points)[54;99H[1m[7m1[12;51H[?25h[?0c[?25l[?1c[m,DynArray *points)[54;99H[1m[7m2[12;52H[?25h[?0c[?25l[?1c[m DynArray *points)[54;99H[1m[7m3[12;53H[?25h[?0c[m[55;1H[K[12;52H[?25l[?1c[55;215H^[[12;52H[55;215H  [12;53H[54;99H[1m[7m2[12;52H[?25h[?0c[?25l[?1c[m[55;215Hj[12;52H[55;215H [13;1H[46m{[27;1H}[m[54;96H[1m[7m3,1 [13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;33H[13;1H{[27;1H}[54;96H[1m[7m4,33[14;33H[?25h[?0c[?25l[?1c[m[55;215Hj[14;33H[55;215H [15;12H[46m{[18;3H}[m[54;96H[1m[7m5,12[15;12H[?25h[?0c[?25l[?1c[m[55;215Hj[15;12H[55;215H [16;52H[15;12H{[18;3H}[54;96H[1m[7m6,5[16;52H[?25h[?0c[?25l[?1c[m[55;215Hk[16;52H[55;215H [15;12H[46m{[18;3H}[m[54;96H[1m[7m5,1[15;12H[?25h[?0c[?25l[?1c[m[55;215Hj[15;12H[55;215H [16;52H[15;12H{[18;3H}[54;96H[1m[7m6,5[16;52H[?25h[?0c[?25l[?1c[m[55;215Hj[16;52H[55;215H [17;12H[54;96H[1m[7m7,1[17;12H[?25h[?0c[?25l[?1c[m[55;215Hj[17;12H[55;215H [18;3H[15;12H[46m{[18;3H}[m[54;96H[1m[7m8,3 [18;3H[?25h[?0c[?25l[?1c[m[55;215Hj[18;3H[55;215H [19;16H[15;12H{[18;3H}[54;96H[1m[7m9,16[19;16H[?25h[?0c[?25l[?1c[m[55;215Hj[19;16H[55;215H [20;52H[20;9H[46m([42C)[m[54;95H[1m[7m20,52[20;52H[?25h[?0c[?25l[?1c[m[55;215Hj[20;52H[55;215H [21;40H[20;9H([42C)[54;96H[1m[7m1,40[21;40H[?25h[?0c[?25l[?1c[m[55;215Hj[21;40H[55;215H [22;3H[20;54H[46m{

[m  [46m}[m[54;96H[1m[7m2,3 [22;3H[?25h[?0c[?25l[?1c[m[55;215Hj[22;3H[55;215H [23;24H[20;54H{

  }[23;24H[46m{[26;3H}[m[54;96H[1m[7m3,24[23;24H[?25h[?0c[?25l[?1c[m[55;215HV[23;24H[55;215H1[23;24H[7m  [m[1m[7m[33mif[m[7m (fclose(in) != [m[1m[7m[35m0[m[7m) [1C [m[55;1H[1m-- VISUAL LINE --[m[55;215H[K[55;215H1[23;24H[?25h[?0c[?25l[?1c[55;215Hj[23;24H[55;215H2[24;52H[23;24H[7m{
    fprintf([m[1m[7m[35mstderr[m[7m, [m[1m[7m[35m"cannot close [m[1m[7m[31m%s[m[1m[7m[35m: [m[1m[7m[31m%s\n[m[1m[7m[35m"[m[7m, inName[m,[7m strerror(errno)); [m

  }[54;96H[1m[7m4,52[24;52H[?25h[?0c[?25l[?1c[m[55;215Hj[24;52H[55;215H3[25;13H[24;52H[7m,
    exit([m[1m[7m[35m1[m[7m);[m[54;96H[1m[7m5,13[25;13H[?25h[?0c[?25l[?1c[m[55;215Hj[25;13H[55;215H4[26;4H[25;13H[7m 
  }[m[54;96H[1m[7m6,4 [26;4H[?25h[?0c[?25l[?1c[m[55;215Hy[26;4H[23;1H  [1m[33mif[m (fclose(in) != [1m[35m0[m) { 
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno)); 
    exit([1m[35m1[m); 
  }[55;1H[K[55;1H4 lines yanked[23;1H[54;96H[1m[7m3,1[23;1H[?25h[?0c[?25l[?1c[m[55;215Hk[23;1H[55;215H [22;1H[54;96H[1m[7m2[22;1H[?25h[?0c[?25l[?1c[m[55;215Hk[22;1H[55;215H [21;1H[54;96H[1m[7m1[21;1H[?25h[?0c[?25l[?1c[m[55;215Hk[21;1H[55;215H [20;1H[54;96H[1m[7m0[20;1H[?25h[?0c[?25l[?1c[m[55;215Hk[20;1H[55;215H [19;1H[54;95H[1m[7m19[19;1H[?25h[?0c[?25l[?1c[m[55;215Hk[19;1H[55;215H [18;1H[54;96H[1m[7m8[18;1H[?25h[?0c[?25l[?1c[m[55;215Hk[18;1H[55;215H [17;1H[54;96H[1m[7m7[17;1H[?25h[?0c[?25l[?1c[m[55;215Hk[17;1H[55;215H [16;1H[54;96H[1m[7m6[16;1H[?25h[?0c[?25l[?1c[m[55;215Hp[16;1H[55;3Hmore lines[55;13H[K[17;3H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     [17;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }[55;1H[K[55;1H4 more lines[54;96H[1m[7m7,3[17;3H[?25h[?0c[?25l[?1c[m[55;215H^V[17;3H[55;215H1x1[17;3H[55;1H[1m-- VISUAL BLOCK --[m[55;215H[K[55;215H1x1[17;3H[?25h[?0c[?25l[?1c[55;215Hj  [17;3H[55;215H2x1[18;3H[17;3H[1m[7m[33mi[m[54;96H[1m[7m8[18;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [18;3H[55;215H3x1[19;3H[18;3H[7m [m[54;96H[1m[7m9[19;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [19;3H[55;215H4x1[20;3H[17;24H[46m{[m

  [7m [m
  [46m}[m[54;95H[1m[7m20[20;3H[?25h[?0c[?25l[?1c[m[55;215Hj  [20;3H[55;215H5x1[21;3H[17;24H{[20;3H[7m}[m[54;96H[1m[7m1[21;3H[?25h[?0c[?25l[?1c[m[55;215Hk  [21;3H[55;215H4x1[20;3H[17;24H[46m{[20;3H}[m[54;96H[1m[7m0[20;3H[?25h[?0c[?25l[?1c[m[55;215HI  [20;3H[17;3H[1m[33mi[m
   
   [55;1H[K[17;3H[55;1H[1m-- INSERT --[m[17;24H{[20;3H}[54;95H[1m[7m17[17;3H[?25h[?0c[?25l[?1c[m      [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m4-9[17;9H[?25h[?0c[?25l[?1c[m  [1m[33mif[m (fclose(in) != [1m[35m0[m) {      [54;98H[1m[7m3  [17;3H[?25h[?0c[?25l[?1c[m [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m4[17;4H[?25h[?0c[?25l[?1c[m [1m[33mif[m (fclose(in) != [1m[35m0[m) {[54;98H[1m[7m5[17;5H[?25h[?0c[m[55;1H[K[17;4H[?25l[?1c[55;215H^[[17;4H[55;215H  [17;5H
      fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
      exit([1m[35m1[m);
    }[54;98H[1m[7m3[17;3H[?25h[?0c[?25l[?1c[m[55;215Hj[17;3H[55;215H [18;3H[54;96H[1m[7m8[18;3H[?25h[?0c[?25l[?1c[m[55;215Hj[18;3H[55;215H [19;3H[54;96H[1m[7m9[19;3H[?25h[?0c[?25l[?1c[m[55;215Hd[19;3H[?25h[?0c[?25l[?1c[55;216Hd[19;3H[55;215H  [19;5H[17;1H      fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                        
      exit([1m[35m1[m);                                                                                                  
    }                                                                                                           
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
  Point2 point2;                                                                                                
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {                                                          
    addElementDynArray(points, &point2);                                                                        
  }                                                                                                             
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {                                                                                        
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));                                          
    exit([1m[35m1[m);                                                                                                    
  }                                                                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mint[m                                                                                                      
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)                                                                   
{                                                                                                               
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);                                                             
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mdouble[m                                                                                                   
averagePoints([1m[32mconst[m DynArray *points)                                                                           
{                                                                                                               
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);                                                                      
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
                                                                                                                [17;5H[1m[33mif[m (fclose(in) != [1m[35m0[m) [46m{[m                                              [18;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    [46m}[m[53;1HstatPoints(DynArray *points, [1m[32mFILE[m *out)[54;98H[1m[7m5[19;5H[?25h[?0c[?25l[?1c[m[55;215Hk[19;5H[55;215H [18;5H[17;26H{[19;5H}[54;96H[1m[7m8[18;5H[?25h[?0c[?25l[?1c[m[55;215Hk[18;5H[55;215H [17;5H[54;96H[1m[7m7[17;5H[?25h[?0c[?25l[?1c[m[55;215Hw[17;5H[55;215H [17;8H[46m([15C)[m[54;98H[1m[7m8[17;8H[?25h[?0c[?25l[?1c[m[55;215Hw[17;8H[55;215H [17;9H([15C)[54;98H[1m[7m9[17;9H[?25h[?0c[?25l[?1c[m[55;215Hw[17;9H[55;215H [17;15H[46m([min[46m)[m[54;98H[1m[7m15[17;15H[?25h[?0c[?25l[?1c[m[55;215Hw[17;15H[55;215H [17;16H(in)[54;99H[1m[7m6[17;16H[?25h[?0c[?25l[?1c[m[55;215Hc[17;16H[?25h[?0c[?25l[?1c[55;216Hw[17;16H[55;215H  [17;16H[55;1H[1m-- INSERT --[m[17;16H) != [1m[35m0[m) {  [17;15H[46m()[?25h[?0c[?25l[?1co[m) != [1m[35m0[m) {[17;16Ho[46m)[m[54;99H[1m[7m7[17;17H[?25h[?0c[?25l[?1c[m[46mu[m) != [1m[35m0[m) {[17;17Hu[46m)[m[54;99H[1m[7m8[17;18H[?25h[?0c[?25l[?1c[m[46mt[m) != [1m[35m0[m) {[17;18Ht[46m)[m[54;99H[1m[7m9[17;19H[?25h[?0c[m[55;1H[K[17;18H[?25l[?1c[55;215H^[[17;18H[55;215H  [17;19H(out)[54;99H[1m[7m8[17;18H[?25h[?0c[?25l[?1c[m[55;215Hw[17;18H[55;215H [17;19H[46m([mout[46m)[m[54;99H[1m[7m9[17;19H[?25h[?0c[?25l[?1c[m[55;215Hw[17;19H[55;215H [17;21H(out)[54;98H[1m[7m21[17;21H[?25h[?0c[?25l[?1c[m[55;215Hj[17;21H[55;215H [18;21H[54;96H[1m[7m8[18;21H[?25h[?0c[?25l[?1c[m[55;215Hj[18;21H[55;215H [19;5H[17;27H[46m{[19;5H}[m[54;96H[1m[7m9,5 [19;5H[?25h[?0c[?25l[?1c[m[55;215Hk[19;5H[55;215H [18;21H[17;27H{[19;5H}[54;96H[1m[7m8,21[18;21H[?25h[?0c[?25l[?1c[m[55;215Hw[18;21H[55;215H [18;23H[54;99H[1m[7m3[18;23H[?25h[?0c[?25l[?1c[m[55;215Hw[18;23H[55;215H [18;24H[54;99H[1m[7m4[18;24H[?25h[?0c[?25l[?1c[m[55;215Hw[18;24H[55;215H [18;31H[54;98H[1m[7m31[18;31H[?25h[?0c[?25l[?1c[m[55;215Hw[18;31H[55;215H [18;37H[54;99H[1m[7m7[18;37H[?25h[?0c[?25l[?1c[m[55;215Hw[18;37H[55;215H [18;38H[54;99H[1m[7m8[18;38H[?25h[?0c[?25l[?1c[m[55;215Hw[18;38H[55;215H [18;39H[54;99H[1m[7m9[18;39H[?25h[?0c[?25l[?1c[m[55;215Hw[18;39H[55;215H [18;41H[54;98H[1m[7m41[18;41H[?25h[?0c[?25l[?1c[m[55;215Hw[18;41H[55;215H [18;42H[54;99H[1m[7m2[18;42H[?25h[?0c[?25l[?1c[m[55;215Hw[18;42H[55;215H [18;43H[54;99H[1m[7m3[18;43H[?25h[?0c[?25l[?1c[m[55;215Hw[18;43H[55;215H [18;44H[54;99H[1m[7m4[18;44H[?25h[?0c[?25l[?1c[m[55;215Hw[18;44H[55;215H [18;45H[54;99H[1m[7m5[18;45H[?25h[?0c[?25l[?1c[m[55;215Hw[18;45H[55;215H [18;48H[54;99H[1m[7m8[18;48H[?25h[?0c[?25l[?1c[m[55;215Hc[18;48H[?25h[?0c[?25l[?1c[55;216Hw[18;48H[55;215H  [18;48H[55;1H[1m-- INSERT --[m[18;48H, strerror(errno));      [18;48H[?25h[?0c[?25l[?1co, strerror(errno));[54;99H[1m[7m9[18;49H[?25h[?0c[?25l[?1c[mu, strerror(errno));[54;98H[1m[7m50[18;50H[?25h[?0c[?25l[?1c[mt, strerror(errno));[54;99H[1m[7m1[18;51H[?25h[?0c[?25l[?1c[mN, strerror(errno));[54;99H[1m[7m2[18;52H[?25h[?0c[?25l[?1c[ma, strerror(errno));[54;99H[1m[7m3[18;53H[?25h[?0c[?25l[?1c[mm, strerror(errno));[54;99H[1m[7m4[18;54H[?25h[?0c[?25l[?1c[me, strerror(errno));[54;99H[1m[7m5[18;55H[?25h[?0c[m[55;1H[K[18;54H[?25l[?1c[55;215H^[[18;54H[55;215H  [18;55H[54;99H[1m[7m4[18;54H[?25h[?0c[?25l[?1c[m[55;215Hk[18;54H[55;215H [17;27H[46m{[19;5H}[m[54;96H[1m[7m7,27[17;27H[?25h[?0c[?25l[?1c[m[55;215Hb[17;27H[55;215H [17;25H[17;8H[46m([16C)[m {[19;5H}[54;99H[1m[7m5[17;25H[?25h[?0c[?25l[?1c[m[55;215Hb[17;25H[55;215H [17;24H[17;8H([16C)[54;99H[1m[7m4[17;24H[?25h[?0c[?25l[?1c[m[55;215Hb[17;24H[55;215H [17;21H[54;99H[1m[7m1[17;21H[?25h[?0c[?25l[?1c[m[55;215Hb[17;21H[55;215H [17;19H[46m([mout[46m)[m[54;98H[1m[7m19[17;19H[?25h[?0c[?25l[?1c[m[55;215Hb[17;19H[55;215H [17;16H(out)[54;99H[1m[7m6[17;16H[?25h[?0c[?25l[?1c[m[55;215Hk[17;16H[55;215H [16;16H[54;96H[1m[7m6[16;16H[?25h[?0c[?25l[?1c[m[55;215Hk[16;16H[55;215H [15;12H[46m{[21;3H}[m[54;96H[1m[7m5,12[15;12H[?25h[?0c[?25l[?1c[m[55;215Hk[15;12H[55;215H [14;16H[15;12H{[21;3H}[54;96H[1m[7m4,16[14;16H[?25h[?0c[?25l[?1c[m[55;215Hk[14;16H[55;215H [13;1H[46m{[30;1H}[m[54;96H[1m[7m3,1 [13;1H[?25h[?0c[?25l[?1c[m[55;215Hk[13;1H[55;215H [12;16H
{[30;1H}[54;96H[1m[7m2,16[12;16H[?25h[?0c[?25l[?1c[m[55;215Hw[12;16H[55;215H [12;18H[54;99H[1m[7m8[12;18H[?25h[?0c[?25l[?1c[m[55;215Hw[12;18H[55;215H [12;23H[54;98H[1m[7m23[12;23H[?25h[?0c[?25l[?1c[m[55;215Hw[12;23H[55;215H [12;24H[54;99H[1m[7m4[12;24H[?25h[?0c[?25l[?1c[m[55;215Hw[12;24H[55;215H [12;30H[54;98H[1m[7m30[12;30H[?25h[?0c[?25l[?1c[m[55;215Hw[12;30H[55;215H [12;32H[54;99H[1m[7m2[12;32H[?25h[?0c[?25l[?1c[m[55;215Hw[12;32H[55;215H [12;38H[54;99H[1m[7m8[12;38H[?25h[?0c[?25l[?1c[m[55;215Hw[12;38H[55;215H [12;43H[54;98H[1m[7m43[12;43H[?25h[?0c[?25l[?1c[m[55;215Hw[12;43H[55;215H [12;44H[54;99H[1m[7m4[12;44H[?25h[?0c[?25l[?1c[m[55;215Hw[12;44H[55;215H [12;51H[54;98H[1m[7m51[12;51H[?25h[?0c[?25l[?1c[m[55;215Hw[12;51H[55;215H [12;53H[54;99H[1m[7m3[12;53H[?25h[?0c[?25l[?1c[m[55;215Hb[12;53H[55;215H [12;51H[54;99H[1m[7m1[12;51H[?25h[?0c[?25l[?1c[m[55;215Hb[12;51H[55;215H [12;44H[54;98H[1m[7m44[12;44H[?25h[?0c[?25l[?1c[m[55;215Hb[12;44H[55;215H [12;43H[54;99H[1m[7m3[12;43H[?25h[?0c[?25l[?1c[m[55;215Hb[12;43H[55;215H [12;38H[54;98H[1m[7m38[12;38H[?25h[?0c[?25l[?1c[m[55;215Hb[12;38H[55;215H [12;32H[54;99H[1m[7m2[12;32H[?25h[?0c[?25l[?1c[m[55;215Hb[12;32H[55;215H [12;30H[54;99H[1m[7m0[12;30H[?25h[?0c[?25l[?1c[m[55;215Hw[12;30H[55;215H [12;32H[54;99H[1m[7m2[12;32H[?25h[?0c[?25l[?1c[m[55;215Hc[12;32H[?25h[?0c[?25l[?1c[55;216Ht[12;32H[?25h[?0c[?25l[?1c[55;217H,[12;32H[55;215H   [12;32H[55;1H[1m-- INSERT --[m[12;32H, DynArray *points)                   [12;32H[?25h[?0c[?25l[?1cF, DynArray *points)[54;99H[1m[7m3[12;33H[?25h[?0c[?25l[?1c[mI, DynArray *points)[54;99H[1m[7m4[12;34H[?25h[?0c[?25l[?1c[mL, DynArray *points)[54;99H[1m[7m5[12;35H[?25h[?0c[?25l[?1c[m[1m[32mFILE[m, DynArray *points)[54;99H[1m[7m6[12;36H[?25h[?0c[?25l[?1c[m , DynArray *points)[54;99H[1m[7m7[12;37H[?25h[?0c[?25l[?1c[mo, DynArray *points)[54;99H[1m[7m8[12;38H[?25h[?0c[?25l[?1c[mu, DynArray *points)[54;99H[1m[7m9[12;39H[?25h[?0c[?25l[?1c[mt, DynArray *points)[54;98H[1m[7m40[12;40H[?25h[?0c[m[55;1H[K[12;39H[?25l[?1c[55;215H^[[12;39H[55;215H  [12;40H[54;98H[1m[7m39[12;39H[?25h[?0c[?25l[?1c[m[55;215Hj[12;39H[55;215H [13;1H[46m{[30;1H}[m[54;96H[1m[7m3,1 [13;1H[?25h[?0c[?25l[?1c[m[55;215Hj[13;1H[55;215H [14;33H[13;1H{[30;1H}[54;96H[1m[7m4,33[14;33H[?25h[?0c[?25l[?1c[m[55;215Hj[14;33H[55;215H [15;12H[46m{[21;3H}[m[54;96H[1m[7m5,12[15;12H[?25h[?0c[?25l[?1c[m[55;215Hj[15;12H[55;215H [16;39H[15;12H{[21;3H}[54;96H[1m[7m6,39[16;39H[?25h[?0c[?25l[?1c[m[55;215Hj[16;39H[55;215H [17;27H[46m{[19;5H}[m[54;96H[1m[7m7,27[17;27H[?25h[?0c[?25l[?1c[m[55;215Hj[17;27H[55;215H [18;39H[17;27H{[19;5H}[54;96H[1m[7m8,39[18;39H[?25h[?0c[?25l[?1c[m[55;215Hw[18;39H[55;215H [18;41H[54;98H[1m[7m41[18;41H[?25h[?0c[?25l[?1c[m[55;215Hw[18;41H[55;215H [18;42H[54;99H[1m[7m2[18;42H[?25h[?0c[?25l[?1c[m[55;215Hw[18;42H[55;215H [18;43H[54;99H[1m[7m3[18;43H[?25h[?0c[?25l[?1c[m[55;215Hw[18;43H[55;215H [18;44H[54;99H[1m[7m4[18;44H[?25h[?0c[?25l[?1c[m[55;215Hw[18;44H[55;215H [18;45H[54;99H[1m[7m5[18;45H[?25h[?0c[?25l[?1c[m[55;215Hw[18;45H[55;215H [18;48H[54;99H[1m[7m8[18;48H[?25h[?0c[?25l[?1c[m[55;215Hd[18;48H[?25h[?0c[?25l[?1c[55;216Ht[18;48H[?25h[?0c[?25l[?1c[55;217Hs[18;48H[55;215H   [18;48Hstrerror(errno));         [18;48H[?25h[?0c[?25l[?1c[55;215H^[[18;48H[55;215H  [18;48H[55;215H^[[18;48H[55;215H  [18;48H[?25h[?0c[?25l[?1c[55;215Hb[18;48H[55;215H [18;45H[54;99H[1m[7m5[18;45H[?25h[?0c[?25l[?1c[m[55;215Hb[18;45H[55;215H [18;44H[54;99H[1m[7m4[18;44H[?25h[?0c[?25l[?1c[m[55;215Hb[18;44H[55;215H [18;43H[54;99H[1m[7m3[18;43H[?25h[?0c[?25l[?1c[m[55;215Hb[18;43H[55;215H [18;42H[54;99H[1m[7m2[18;42H[?25h[?0c[?25l[?1c[m[55;215Hb[18;42H[55;215H [18;41H[54;99H[1m[7m1[18;41H[?25h[?0c[?25l[?1c[m[55;215Hb[18;41H[55;215H [18;39H[54;98H[1m[7m39[18;39H[?25h[?0c[?25l[?1c[m[55;215Hi[18;39H[55;215H [18;39H[55;1H[1m-- INSERT --[18;39H[?25h[?0c[?25l[?1c[m[1m[35m%: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno)); [54;99H[1m[7m8[18;38H[?25h[?0c[?25l[?1c[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno)); [54;99H[1m[7m7[18;37H[?25h[?0c[?25l[?1c[m[1m[35mo: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m8[18;38H[?25h[?0c[?25l[?1c[m[1m[35mi: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m9[18;39H[?25h[?0c[?25l[?1c[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno)); [54;99H[1m[7m8[18;38H[?25h[?0c[?25l[?1c[m[1m[35mu: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m9[18;39H[?25h[?0c[?25l[?1c[m[1m[35mt: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;98H[1m[7m40[18;40H[?25h[?0c[?25l[?1c[m[1m[35mf: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m1[18;41H[?25h[?0c[?25l[?1c[m[1m[35mi: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m2[18;42H[?25h[?0c[?25l[?1c[m[1m[35ml: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m3[18;43H[?25h[?0c[?25l[?1c[m[1m[35me: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[54;99H[1m[7m4[18;44H[?25h[?0c[m[55;1H[K[18;43H[?25l[?1c[55;215H^[[18;43H[55;215H  [18;44H[54;99H[1m[7m3[18;43H[?25h[?0c[?25l[?1c[m[55;215H:[18;43H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 94L, 2275C written[18;43H[54;15H[1m[7m   [18;43H[?25h[?0c[?25l[?1c[m[55;215HG[18;43H[55;215H [53;1H[1;1H  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                [13;1H{
  sortDynArray(points, comparePoint2);
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);
  [1m[33mif[m (n > [1m[35m0[m) {
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));
    [1m[32mdouble[m average = averagePoints(points);
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[22;13Hmin, average, median, max);
  }
}

[1m[32mint[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])
[46m{[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);
    exit([1m[35m1[m);
  }

  [1m[32mFILE[m *out;
  [1m[33mif[m (argc == [1m[35m3[m) {[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[37;9H[1m[33mif[m (!out) {[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[39;11Hexit([1m[35m1[m);[40;9H}
  }
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));
  readPoints(argv[[1m[35m1[m], points);
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);
  freeDynArray(points);
  [1m[33mif[m (argc == [1m[35m3[m) {[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[49;11Hexit([1m[35m1[m);[50;9H}
  }
  [1m[33mreturn[m [1m[35m0[m;
[46m}[m[55;1H[K[54;95H[1m[7m94,1 [10CBot[53;1H[?25h[?0c[?25l[?1c[m[55;215Hk[53;1H[55;215H [52;1H[28;1H{[53;1H}[54;96H[1m[7m3[52;1H[?25h[?0c[?25l[?1c[m[55;215Hk[52;1H[55;215H [51;1H[54;96H[1m[7m2[51;1H[?25h[?0c[?25l[?1c[m[55;215Hk[51;1H[55;215H [50;1H[54;96H[1m[7m1[50;1H[?25h[?0c[?25l[?1c[m[55;215Hk[50;1H[55;215H [49;1H[54;96H[1m[7m0[49;1H[?25h[?0c[?25l[?1c[m[55;215Hk[49;1H[55;215H [48;1H[54;95H[1m[7m89[48;1H[?25h[?0c[?25l[?1c[m[55;215Hk[48;1H[55;215H [47;1H[54;96H[1m[7m8[47;1H[?25h[?0c[?25l[?1c[m[55;215Hk[47;1H[55;215H [46;1H[54;96H[1m[7m7[46;1H[?25h[?0c[?25l[?1c[m[55;215Hk[46;1H[55;215H [45;1H[54;96H[1m[7m6[45;1H[?25h[?0c[?25l[?1c[m[55;215Hk[45;1H[55;215H [44;1H[54;96H[1m[7m5[44;1H[?25h[?0c[?25l[?1c[m[55;215Hk[44;1H[55;215H [43;1H[54;96H[1m[7m4[43;1H[?25h[?0c[?25l[?1c[m[55;215Hk[43;1H[55;215H [42;1H[54;96H[1m[7m3[42;1H[?25h[?0c[?25l[?1c[m[55;215Hk[42;1H[55;215H [41;1H[54;96H[1m[7m2[41;1H[?25h[?0c[?25l[?1c[m[55;215Hk[41;1H[55;215H [40;1H[54;96H[1m[7m1[40;1H[?25h[?0c[?25l[?1c[m[55;215Hj[40;1H[55;215H [41;1H[54;96H[1m[7m2[41;1H[?25h[?0c[?25l[?1c[m[55;215Hn[41;1H[55;1H/readP[55;215H[K[55;1H[43;3H[54;96H[1m[7m4,3[43;3H[?25h[?0c[?25l[?1c[m[55;215Hw[43;3H[55;215H [43;13H[46m([15C)[m[54;98H[1m[7m13[43;13H[?25h[?0c[?25l[?1c[m[55;215Hw[43;13H[55;215H [43;14H([15C)[54;99H[1m[7m4[43;14H[?25h[?0c[?25l[?1c[m[55;215Hw[43;14H[55;215H [43;18H[46m[[1C][m[54;99H[1m[7m8[43;18H[?25h[?0c[?25l[?1c[m[55;215Hw[43;18H[55;215H [43;19H[[1C][54;99H[1m[7m9[43;19H[?25h[?0c[?25l[?1c[m[55;215Hw[43;19H[55;215H [43;20H[46m[[1C][m[54;98H[1m[7m20[43;20H[?25h[?0c[?25l[?1c[m[55;215Hw[43;20H[55;215H [43;23H[[1C][54;99H[1m[7m3[43;23H[?25h[?0c[?25l[?1c[m[55;215Hi[43;23H[55;215H [43;23H[55;1H[1m-- INSERT --[43;23H[?25h[?0c[?25l[?1c[mopoints);[54;15H[1m[7m[+][81C4[43;24H[?25h[?0c[?25l[?1c[mupoints);[54;99H[1m[7m5[43;25H[?25h[?0c[?25l[?1c[mtpoints);[54;99H[1m[7m6[43;26H[?25h[?0c[?25l[?1c[m points);[54;99H[1m[7m7[43;27H[?25h[?0c[?25l[?1c[mpoints); [54;99H[1m[7m6[43;26H[?25h[?0c[?25l[?1c[m,points);[54;99H[1m[7m7[43;27H[?25h[?0c[?25l[?1c[m points);[54;99H[1m[7m8[43;28H[?25h[?0c[m[55;1H[K[43;27H[?25l[?1c[55;215H^[[43;27H[55;215H  [43;28H[54;99H[1m[7m7[43;27H[?25h[?0c[?25l[?1c[m[55;215H:[43;27H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 94L, 2280C written[43;27H[54;15H[1m[7m   [43;27H[?25h[?0c[?25l[?1c[m[55;215H^Z[43;27H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
[01m[Kstat-points.c:[m[K In function ‚Äò[01m[KreadPoints[m[K‚Äô:
[01m[Kstat-points.c:17:16:[m[K [01;31m[Kerror: [m[Kincompatible type for argument 1 of ‚Äò[01m[Kfclose[m[K‚Äô
     if (fclose([01;31m[Kout[m[K) != 0) {
                [01;31m[K^~~[m[K
In file included from [01m[Kstat-points.c:5[m[K:
[01m[K/usr/include/stdio.h:213:26:[m[K [01;36m[Knote: [m[Kexpected ‚Äò[01m[KFILE *[m[K‚Äô {aka ‚Äò[01m[Kstruct _IO_FILE *[m[K‚Äô} but argument is of type ‚Äò[01m[KFILE[m[K‚Äô {aka ‚Äò[01m[Kstruct _IO_FILE[m[K‚Äô}
 extern int fclose ([01;36m[KFILE *__stream[m[K);
                    [01;36m[K~~~~~~^~~~~~~~[m[K
[01m[Kstat-points.c:[m[K In function ‚Äò[01m[Kmain[m[K‚Äô:
[01m[Kstat-points.c:84:23:[m[K [01;31m[Kerror: [m[Kincompatible type for argument 2 of ‚Äò[01m[KreadPoints[m[K‚Äô
   readPoints(argv[1], [01;31m[Kout[m[K, points);
                       [01;31m[K^~~[m[K
[01m[Kstat-points.c:12:37:[m[K [01;36m[Knote: [m[Kexpected ‚Äò[01m[KFILE[m[K‚Äô {aka ‚Äò[01m[Kstruct _IO_FILE[m[K‚Äô} but argument is of type ‚Äò[01m[KFILE *[m[K‚Äô {aka ‚Äò[01m[Kstruct _IO_FILE *[m[K‚Äô}
 readPoints(const char *inName, [01;36m[KFILE out[m[K, DynArray *points)
                                [01;36m[K~~~~~^~~[m[K
make: *** [<builtin>: stat-points.o] Error 1
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg[K[Kfg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;3Hassert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
{[111C[7m|[m
  sortDynArray(points, comparePoint2);[74C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  [1m[33mif[m (n > [1m[35m0[m) {[98C[7m|[m
    [1m[32mdouble[m min = magnitudePoint2(getElementDynArray(points, [1m[35m0[m));[48C[7m|[m
    [1m[32mdouble[m max = magnitudePoint2(getElementDynArray(points, n - [1m[35m1[m));[44C[7m|[m
    [1m[32mdouble[m average = averagePoints(points);[69C[7m|[m
    [1m[32mdouble[m median = magnitudePoint2(getElementDynArray(points, n/[1m[35m2[m));[43C[7m|[m
    fprintf(out, [1m[35m"min = [m[1m[31m%g\n[m[1m[35maverage = [m[1m[31m%g\n[m[1m[35mmedian = [m[1m[31m%g\n[m[1m[35mmax = [m[1m[31m%g\n[m[1m[35m"[m,[45C[7m|[m[22;13Hmin, average, median, max);[73C[7m|[m
  }[109C[7m|[m
}[111C[7m|[25;113H|[m
[1m[32mint[m[109C[7m|[m
main([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[78C[7m|[m
{[111C[7m|[m
  [1m[33mif[m (argc < [1m[35m2[m || argc > [1m[35m3[m) {[83C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m BINARY_POINTS_FILE [OUTPUT_FILE][m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[35C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[33;113H|[m
  [1m[32mFILE[m *out;[100C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[36;9Hout = fopen(argv[[1m[35m2[m], [1m[35m"w"[m);[78C[7m|[m[37;9H[1m[33mif[m (!out) {[93C[7m|[m[38;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[39;11Hexit([1m[35m1[m);[94C[7m|[m[40;9H}[103C[7m|[m
  }[109C[7m|[m
  DynArray *points = newDynArray([1m[33msizeof[m(Point2));[63C[7m|[m
  readPoints(argv[[1m[35m1[m], out, points);[77C[7m|[m
  statPoints(points, (argc == [1m[35m3[m) ? out : [1m[35mstdout[m);[63C[7m|[m
  freeDynArray(points);[89C[7m|[m
  [1m[33mif[m (argc == [1m[35m3[m) {[94C[7m|[m[47;9H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[81C[7m|[m[48;11Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, argv[[1m[35m2[m], strerror(errno));[35C[7m|[m[49;11Hexit([1m[35m1[m);[94C[7m|[m[50;9H}[103C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m [1m[35m0[m;[101C[7m|[m
}[111C[7m|[m
[1m[7mstat-points.c                                                                                 84,27          Bot [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      45,1           Bot[43;27H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215Hg[43;27H[?25h[?0c[?25l[?1c[55;215H [43;27H[55;215Hgg[43;27H[55;215H  [1;1H                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
                                                                                                                
  assert(n > [1m[35m0[m);                                                                                                
  [1m[32mdouble[m sum = [1m[35m0[m;                                                                                               
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {                                                                                 
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);                                                            
    [1m[32mdouble[m mag = magnitudePoint2(p);                                                                            
    sum += mag;                                                                                                 
  }                                                                                                             
  [1m[33mreturn[m sum/n;                                                                                                 
}                                                                                                               
                                                                                                                
[1m[32mstatic[m [1m[32mvoid[m                                                                                                     
statPoints(DynArray *points, [1m[32mFILE[m *out)                                                                         [1;1H[1m[34m#include [m[1m[35m<assert.h>[m
[1m[34m#include [m[1m[35m<errno.h>[m
[1m[34m#include [m[1m[35m<math.h>[m
[1m[34m#include [m[1m[35m<stdlib.h>[m
[1m[34m#include [m[1m[35m<stdio.h>[m
[1m[34m#include [m[1m[35m<string.h>[m

[1m[34m#include [m[1m[35m"dyn-array.h"[m
[1m[34m#include [m[1m[35m"point2.h"[m

[1m[32mstatic[m [1m[32mvoid[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m out, DynArray *points)
{
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);
  [1m[33mif[m (!in) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    [1m[33mif[m (fclose(out) != [1m[35m0[m) {[18;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot close outfile: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));
    }
    exit([1m[35m1[m);
  }
  Point2 point2;
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {
    addElementDynArray(points, &point2);
  }
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));
    exit([1m[35m1[m);
  }
}

[1m[32mstatic[m [1m[32mint[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)
{
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);
}

[1m[32mstatic[m [1m[32mdouble[m
averagePoints([1m[32mconst[m DynArray *points)
{
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[54;95H[1m[7m1,1  [10CTop[1;1H[?25h[?0c[?25l[?1c[m[55;215Hj[1;1H[55;215H [2;1H[54;95H[1m[7m2[2;1H[?25h[?0c[?25l[?1c[m[55;215Hj[2;1H[55;215H [3;1H[54;95H[1m[7m3[3;1H[?25h[?0c[?25l[?1c[m[55;215Hj[3;1H[55;215H [4;1H[54;95H[1m[7m4[4;1H[?25h[?0c[?25l[?1c[m[55;215Hj[4;1H[55;215H [5;1H[54;95H[1m[7m5[5;1H[?25h[?0c[?25l[?1c[m[55;215Hj[5;1H[55;215H [6;1H[54;95H[1m[7m6[6;1H[?25h[?0c[?25l[?1c[m[55;215Hj[6;1H[55;215H [7;1H[54;95H[1m[7m7,0-1[7;1H[?25h[?0c[?25l[?1c[m[55;215Hj[7;1H[55;215H [8;1H[54;95H[1m[7m8,1  [8;1H[?25h[?0c[?25l[?1c[m[55;215Hj[8;1H[55;215H [9;1H[54;95H[1m[7m9[9;1H[?25h[?0c[?25l[?1c[m[55;215Hj[9;1H[55;215H [10;1H[54;95H[1m[7m10,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;1H[54;96H[1m[7m1,1  [11;1H[?25h[?0c[?25l[?1c[m[55;215Hw[11;1H[55;215H [11;8H[54;98H[1m[7m8[11;8H[?25h[?0c[?25l[?1c[m[55;215Hk[11;8H[55;215H [10;1H[54;96H[1m[7m0,0-1[10;1H[?25h[?0c[?25l[?1c[m[55;215Hj[10;1H[55;215H [11;8H[54;96H[1m[7m1,8  [11;8H[?25h[?0c[?25l[?1c[m[55;215Hw[11;8H[55;215H [12;1H[54;96H[1m[7m2,1[12;1H[?25h[?0c[?25l[?1c[m[55;215Hj[12;1H[55;215H [13;1H[46m{[30;1H}[m[54;96H[1m[7m3[13;1H[?25h[?0c[?25l[?1c[m[55;215Hw[13;1H[55;215H [14;3H[13;1H{[30;1H}[54;96H[1m[7m4,3[14;3H[?25h[?0c[?25l[?1c[m[55;215Hk[14;3H[55;215H [13;1H[46m{[30;1H}[m[54;96H[1m[7m3,1[13;1H[?25h[?0c[?25l[?1c[m[55;215Hk[13;1H[55;215H [12;3H
{[30;1H}[54;96H[1m[7m2,3[12;3H[?25h[?0c[?25l[?1c[m[55;215Hw[12;3H[55;215H [12;11H[46m([46C)[m[54;98H[1m[7m11[12;11H[?25h[?0c[?25l[?1c[m[55;215Hw[12;11H[55;215H [12;12H([46C)[54;99H[1m[7m2[12;12H[?25h[?0c[?25l[?1c[m[55;215Hw[12;12H[55;215H [12;18H[54;99H[1m[7m8[12;18H[?25h[?0c[?25l[?1c[m[55;215Hw[12;18H[55;215H [12;23H[54;98H[1m[7m23[12;23H[?25h[?0c[?25l[?1c[m[55;215Hw[12;23H[55;215H [12;24H[54;99H[1m[7m4[12;24H[?25h[?0c[?25l[?1c[m[55;215Hw[12;24H[55;215H [12;30H[54;98H[1m[7m30[12;30H[?25h[?0c[?25l[?1c[m[55;215Hw[12;30H[55;215H [12;32H[54;99H[1m[7m2[12;32H[?25h[?0c[?25l[?1c[m[55;215Hw[12;32H[55;215H [12;37H[54;99H[1m[7m7[12;37H[?25h[?0c[?25l[?1c[m[55;215Hw[12;37H[55;215H [12;40H[54;98H[1m[7m40[12;40H[?25h[?0c[?25l[?1c[m[55;215Hb[12;40H[55;215H [12;37H[54;98H[1m[7m37[12;37H[?25h[?0c[?25l[?1c[m[55;215Hi[12;37H[55;215H [12;37H[55;1H[1m-- INSERT --[12;37H[?25h[?0c[?25l[?1c[m*out, DynArray *points)[54;15H[1m[7m[+][81C8[12;38H[?25h[?0c[m[55;1H[K[12;37H[?25l[?1c[55;215H^[[12;37H[55;215H  [12;38H[54;99H[1m[7m7[12;37H[?25h[?0c[?25l[?1c[m[55;215H:[12;37H[55;215H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"stat-points.c" 94L, 2281C written[12;37H[54;15H[1m[7m   [12;37H[?25h[?0c[?25l[?1c[m[55;215H^Z[12;37H[55;1H
[?25h[?0c
[2]+  Stopped                 vim stat-points.c
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make
gcc -g -Wall -std=c11   -c -o stat-points.o stat-points.c
gcc   stat-points.o dyn-array.o  -lm -o stat-points
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ make[2Pfgmake[2Pfgvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt [C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmake[Kvalgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt 
==20000== Memcheck, a memory error detector
==20000== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20000== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==20000== Command: ./stat-points point.dat out.txt
==20000== 
cannot read point.dat: No such file or directory
==20000== 
==20000== HEAP SUMMARY:
==20000==     in use at exit: 32 bytes in 1 blocks
==20000==   total heap usage: 3 allocs, 2 frees, 1,136 bytes allocated
==20000== 
==20000== 32 bytes in 1 blocks are still reachable in loss record 1 of 1
==20000==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==20000==    by 0x1096EB: newDynArray (dyn-array.c:20)
==20000==    by 0x109622: main (stat-points.c:83)
==20000== 
==20000== LEAK SUMMARY:
==20000==    definitely lost: 0 bytes in 0 blocks
==20000==    indirectly lost: 0 bytes in 0 blocks
==20000==      possibly lost: 0 bytes in 0 blocks
==20000==    still reachable: 32 bytes in 1 blocks
==20000==         suppressed: 0 bytes in 0 blocks
==20000== 
==20000== For counts of detected and suppressed errors, rerun with: -v
==20000== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim stat-points.c
[27m[24m[m[H[J[?25l[?1c[1;1H[1m[34m#include [m[1m[35m<assert.h>[m[93C[7m|[m
[1m[34m#include [m[1m[35m<errno.h>[m[94C[7m|[m
[1m[34m#include [m[1m[35m<math.h>[m[95C[7m|[m
[1m[34m#include [m[1m[35m<stdlib.h>[m[93C[7m|[m
[1m[34m#include [m[1m[35m<stdio.h>[m[94C[7m|[m
[1m[34m#include [m[1m[35m<string.h>[m[93C[7m|[7;113H|[m
[1m[34m#include [m[1m[35m"dyn-array.h"[m[90C[7m|[m
[1m[34m#include [m[1m[35m"point2.h"[m[93C[7m|[10;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
readPoints([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *out, DynArray *points)[53C[7m|[m
{[111C[7m|[m
  [1m[32mFILE[m *in = fopen(inName, [1m[35m"rb"[m);[79C[7m|[m
  [1m[33mif[m (!in) {[100C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[43C[7m|[m
    [1m[33mif[m (fclose(out) != [1m[35m0[m) {[85C[7m|[m[18;7Hfprintf([1m[35mstderr[m, [1m[35m"cannot close outfile: [m[1m[31m%s\n[m[1m[35m"[m, strerror(errno));[43C[7m|[m
    }[107C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[m
  Point2 point2;[96C[7m|[m
  [1m[33mwhile[m (fread(&point2, [1m[33msizeof[m(Point2), [1m[35m1[m, in) == [1m[35m1[m) {[58C[7m|[m
    addElementDynArray(points, &point2);[72C[7m|[m
  }[109C[7m|[m
  [1m[33mif[m (fclose(in) != [1m[35m0[m) {[88C[7m|[m
    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, inName, strerror(errno));[42C[7m|[m
    exit([1m[35m1[m);[100C[7m|[m
  }[109C[7m|[m
}[111C[7m|[31;113H|[m
[1m[32mstatic[m [1m[32mint[m[102C[7m|[m
comparePoint2([1m[32mconst[m [1m[32mvoid[m *p1, [1m[32mconst[m [1m[32mvoid[m *p2)[67C[7m|[m
{[111C[7m|[m
  [1m[33mreturn[m magnitudePoint2(p1) - magnitudePoint2(p2);[61C[7m|[m
}[111C[7m|[37;113H|[m
[1m[32mstatic[m [1m[32mdouble[m[99C[7m|[m
averagePoints([1m[32mconst[m DynArray *points)[75C[7m|[m
{[111C[7m|[m
  [1m[32mconst[m [1m[32mint[m n = nElementsDynArray(points);[70C[7m|[m
  assert(n > [1m[35m0[m);[96C[7m|[m
  [1m[32mdouble[m sum = [1m[35m0[m;[95C[7m|[m
  [1m[33mfor[m ([1m[32mint[m i = [1m[35m0[m; i < n; i++) {[81C[7m|[m
    [1m[32mconst[m Point2 *p = getElementDynArray(points, i);[60C[7m|[m
    [1m[32mdouble[m mag = magnitudePoint2(p);[76C[7m|[m
    sum += mag;[97C[7m|[m
  }[109C[7m|[m
  [1m[33mreturn[m sum/n;[97C[7m|[m
}[111C[7m|[51;113H|[m
[1m[32mstatic[m [1m[32mvoid[m[101C[7m|[m
statPoints(DynArray *points, [1m[32mFILE[m *out)[73C[7m|[m
[1m[7mstat-points.c                                                                                 12,37          Top [m[1;114H[1m[34m#include [m[1m[35m<stdio.h>[m[2;114H[1m[34m#include [m[1m[35m<stdlib.h>[m[3;114H[1m[34m#include [m[1m[35m<string.h>[m[5;114H[1m[32mstatic[m [1m[32mvoid[m[6;114HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;114H{[8;116H[1m[32mint[m c;[9;116H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;118H[1m[33mif[m (ferror(in)) {[11;120Hfprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;120Hexit([1m[35m1[m);[13;118H}[14;118H[1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;120Hfprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;120Hexit([1m[35m1[m);[17;118H}[18;116H}[19;114H}[21;114H[1m[36m/** Output number of chars in file specified by single command-line[22;114H *  argument.[23;114H */[m[24;114H[1m[32mint[m[25;114Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;114H{[27;116H[1m[33mif[m (argc != [1m[35m3[m) {[28;118Hfprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;118Hexit([1m[35m1[m);[30;116H}[31;116H[1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;116H[1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;116H[1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;116H[1m[33mif[m (!in) {[35;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;118Hexit([1m[35m1[m);[37;116H}[38;116H[1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;116H[1m[33mif[m (!out) {[40;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;118Hexit([1m[35m1[m);[42;116H}[43;116HdoCopy(srcName, in, destName, out);[44;116H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;118Hexit([1m[35m1[m);[47;116H}[48;116H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;118Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;118Hexit([1m[35m1[m);[51;116H}[52;116H[1m[33mreturn[m [1m[35m0[m;[53;114H}[54;114H[7m../file-copy/file-copy.c                                                                      45,1           Bot[12;37H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[m[55;215H:[12;37H[55;215H[K[55;1H:[?25h[?0cq[?25l[?1c[?25h[?0c[?25l[?1c[45;1H[1;11H[1m[35merrno.h>[m[1;19H[K[2;11H[1m[35mstdi[m[2;113H[K[3;11H[1m[35mstdlib.h>[m[3;113H[K[4;13H[1m[35mring[m[4;113H[K[5;1H[K[6;1H[1m[32mstatic[m [1m[32mvoid[m[6;12H[K[7;1HdoCopy([1m[32mconst[m [1m[32mchar[m *inName, [1m[32mFILE[m *in, [1m[32mconst[m [1m[32mchar[m *outName, [1m[32mFILE[m *out)[7;113H[K[8;1H{[8;2H[K[9;1H  [1m[32mint[m c;[9;9H[K[10;3H[1m[33mwhile[m ((c = fgetc(in)) != [1m[35mEOF[m) {[10;113H[K[11;1H    [1m[33mif[m (ferror(in)) {[11;113H[K[12;1H      fprintf([1m[35mstderr[m, [1m[35m"getc error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[12;113H[K[13;1H      exit([1m[35m1[m);[13;113H[K[14;3H  }[14;6H[K[15;3H  [1m[33mif[m (fputc(c, out) == [1m[35mEOF[m) {[15;113H[K[16;5H  fprintf([1m[35mstderr[m, [1m[35m"error writing to [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, outName, strerror(errno));[16;113H[K[17;5H  exit([1m[35m1[m);[17;15H[K[18;5H}[18;7H[K[19;3H}[19;5H[K[20;1H}[20;5H[K[21;3H[K[22;1H[1m[36m/** Output number of chars in file specified by single command-line[m[22;113H[K[23;1H[1m[36m *  argument.[m[23;14H[K[24;1H[1m[36m */[m[24;5H[K[25;1H[1m[32mint[m[25;113H[K[26;1Hmain([1m[32mint[m argc, [1m[32mconst[m [1m[32mchar[m *argv[])[26;113H[K[27;1H{[27;5H[K[28;3H[1m[33mif[m (argc != [1m[35m3[m) {[28;113H[K[29;3H  fprintf([1m[35mstderr[m, [1m[35m"usage: [m[1m[31m%s[m[1m[35m SRC_NAME DEST_NAME[m[1m[31m\n[m[1m[35m"[m, argv[[1m[35m0[m]);[29;113H[K[30;1H    exit([1m[35m1[m);[30;113H[K[31;3H}[31;113H[K[32;1H  [1m[32mconst[m [1m[32mchar[m *srcName = argv[[1m[35m1[m];[32;113H[K[33;1H  [1m[32mconst[m [1m[32mchar[m *destName = argv[[1m[35m2[m];[33;34H[K[34;1H  [1m[32mFILE[m *in = fopen(srcName, [1m[35m"r"[m);[34;113H[K[35;3H[1m[33mif[m (!in) {[35;13H[K[36;1H    fprintf([1m[35mstderr[m, [1m[35m"cannot read [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[36;113H[K[37;5Hexit([1m[35m1[m);[37;113H[K[38;1H  }[38;4H[K[39;1H  [1m[32mFILE[m *out = fopen(destName, [1m[35m"w"[m);[39;36H[K[40;1H  [1m[33mif[m (!out) {[40;113H[K[41;3H  fprintf([1m[35mstderr[m, [1m[35m"cannot write [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[41;113H[K[42;3H  exit([1m[35m1[m);[42;14H[K[43;3H}[43;4H[K[44;3HdoCopy(srcName, in, destName, out);[44;113H[K[45;3H[1m[33mif[m (fclose(in) != [1m[35m0[m) {[45;25H[K[46;5Hfprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, srcName, strerror(errno));[46;113H[K[47;5Hexit([1m[35m1[m);[47;13H[K[48;113H[K[49;3H[1m[33mif[m (fclose(out) != [1m[35m0[m) {[49;113H[K[50;1H    fprintf([1m[35mstderr[m, [1m[35m"cannot close [m[1m[31m%s[m[1m[35m: [m[1m[31m%s\n[m[1m[35m"[m, destName, strerror(errno));[50;113H[K[51;5Hexit([1m[35m1[m);[51;113H[K[52;1H  }[52;4H[K[53;1H  [1m[33mreturn[m [1m[35m0[m;[53;12H[K[54;1H}[54;2H[K[55;208H45,1[10CAll[45;1H[?25h[?0c[?25l[?1c[55;198H:[45;1H[55;1H[K[55;1H:[?25h[?0cq[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ fg
vim ../lab13_out.txt	(wd: ~/i220a/work/lab13/files/file-copy)
[27m[24m[m[H[J[?25l[?1c[1;1H==8242==
==8242== For counts of detected and suppressed errors, rerun with: -v
==8242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

Ex3:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ cmp Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ^C
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ chmod a-w t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
cannot write t: Permission denied

# Add (ferror(in)) to file-copy.c

Ex4:
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ rm -rf t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy file-copy.c t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ ./file-copy Makefile t
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$  wc -l file-copy.c Makefile
  54 file-copy.c
  10 Makefile
  64 total
hsloan1@remote04:~/i220a/work/lab13/files/file-copy$ wc -l t
10 t

Ex5:
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 1

real    0m0.016s
user    0m0.010s
sys     0m0.002s
hsloan1@remote04:~/i220a/work/lab13/files/no-buffer-copy$ time ./no-buffer-copy `which gcc` /dev/null 0

real    0m1.698s
user    0m0.929s
sys     0m0.767s

Ex6:
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./gen-rand-points 100 points.dat
average magnitude = 752.156
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49

hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ ./stat-points points.dat out.txt
hsloan1@remote04:~/i220a/work/lab13/files/rec-io$ cat out.txt
min = 43.4166
average = 752.156
median = 773.59
max = 1306.49
[1m[34m~                                                                                                                                                                                                                                [m[55;208H75,1[10CBot[48;1H[?25h[?0c[?25l[?1c[?25h[?0c[?25l[?1c[55;198HG[48;1H[55;198H [53;1H[55;208H80[53;1H[?25h[?0c[?25l[?1c[55;198Ho[53;1H[55;198H [54;1H
[1m-- INSERT --[m[55;208H[K[55;208H81,1[10CBot[54;1H[K[54;1H[?25h[?0c[?25l[?1c[1;54r[54;1H
[1;55r[55;208H[K[55;208H82,1[10CBot[54;1H[?25h[?0c[?25l[?1c[1;54r[1;1H[26M[1;55r[28;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ valgrind --leak-check=full --show-leak-kinds=all ./stat-points point.dat out.txt
==20000== Memcheck, a memory error detector
==20000== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20000== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==20000== Command: ./stat-points point.dat out.txt
==20000==
cannot read point.dat: No such file or directory
==20000==
==20000== HEAP SUMMARY:
==20000==     in use at exit: 32 bytes in 1 blocks
==20000==   total heap usage: 3 allocs, 2 frees, 1,136 bytes allocated
==20000==
==20000== 32 bytes in 1 blocks are still reachable in loss record 1 of 1
==20000==    at 0x4837B65: calloc (vg_replace_malloc.c:752)
==20000==    by 0x1096EB: newDynArray (dyn-array.c:20)
==20000==    by 0x109622: main (stat-points.c:83)
==20000==
==20000== LEAK SUMMARY:
==20000==    definitely lost: 0 bytes in 0 blocks
==20000==    indirectly lost: 0 bytes in 0 blocks
==20000==      possibly lost: 0 bytes in 0 blocks
==20000==    still reachable: 32 bytes in 1 blocks
==20000==[9Csuppressed: 0 bytes in 0 blocks
==20000==
==20000== For counts of detected and suppressed errors, rerun with: -v
==20000== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)[55;208H[K[55;208H108,1[9CBot[54;1H[?25h[?0c[55;1H[K[54;1H[?25l[?1c[55;198H^[[54;1H[55;198H  [54;1H[55;208H108,0-1[7CBot[54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;198H[K[55;1H:[?25h[?0cw[?25l[?1c[?25h[?0c[?25l[?1c"../lab13_out.txt" 108L, 4137C written[54;1H[55;208H108,0-1[7CBot[55;208H[K[55;208H108,0-1[7CBot[54;1H[?25h[?0c[?25l[?1c[55;198H:[54;1H[55;1H[K[55;1H:[?25h[?0cx[?25l[?1c[?25h[?0c[?25l[?1c[?25h[?0c[55;1H[K[55;1Hhsloan1@remote04:~/i220a/work/lab13/files/rec-io$ cd .[K[Kexit
[1m[7m%[27m[1m[m                                                                                                                                                                                                                                 [m[27m[24m[J[39m[m[49m[40m[39m hsloan1@remote04 [44m[30mÓÇ∞[30m ~/i220a/work/lab13/files [43m[34mÓÇ∞[30m ÓÇ† master ‚óè [49m[33mÓÇ∞[39m [K[?2004h[?2004l

Script done on 2019-11-17 21:57:24-05:00 [COMMAND_EXIT_CODE="0"]
